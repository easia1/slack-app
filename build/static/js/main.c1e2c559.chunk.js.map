{"version":3,"sources":["api/API.js","context/UserContext.js","components/logo/Logo.js","components/pic/Pic.js","components/navbar/Navbar.js","components/button/Button.js","components/startchannel.svg","components/channel/ChannelList.js","components/beginchat.svg","components/contact/ContactList.js","components/search/Search.js","components/sidebar/Sidebar.js","components/loading/Loading.js","messages/MessageInput.js","components/search/NewMsgSearch.js","newmessage/NewMessage.js","messages/ChatBubble.js","messages/ChannelInfoToggle.js","messages/ChatHeader.js","components/nocontent.svg","messages/ScrollDown.js","messages/Messages.js","components/toast/Toast.js","newchannel/SearchUser.js","newchannel/NewChannel.js","components/selectmessage.svg","messages/MessageSidebar.js","Main.js","PrivateRoute.js","PublicRoute.js","login/Login.js","login/Loginhero.js","login/Register.js","login/LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","userSessionAPI","data","method","url","email","password","password_confirmation","getListsAPI","headers","client","expiry","uid","then","res","catch","err","getMessagesAPI","user_id","receiver_class","params","receiver_id","UserContext","createContext","UserProvider","children","useState","currentUser","setUser","currentHeaders","setHeaders","isLoggedIn","setIsLoggedIn","loginMessage","setLoginMessage","sidebarMode","setSidebarMode","channelList","setChannelList","allUsers","setAllUsers","contactList","setContactList","addUsers","setAddUsers","userIds","setUserIds","messages","setMessages","allChannelMessages","setAllChannelMessages","loadData","setLoadData","showModal","setShowModal","showContent","setShowContent","showChatInfo","setShowChatInfo","chatInfo","setChatInfo","chatName","setChatName","Provider","value","handleSetLoadData","logoutFunction","localStorage","setItem","sessionStorage","to","localStorageLogin","JSON","stringify","tokenSessionStorage","removeEmail","split","handleSetShowChatInfo","returnUserName","id","i","length","Logo","className","Pic","colorNumber","name","isChannel","isChip","colors","Math","floor","style","backgroundColor","charAt","toUpperCase","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Navbar","useContext","onClick","Button","text","type","ChannelList","displayRecentMsg","channel","sender","message","useEffect","errors","channelRecentMsgRequest","parseInt","console","log","at","body","getRecentMsg","src","StartChannel","map","index","activeClassName","ContactList","BeginChat","user","Search","placeholder","searchList","setSearchList","onChange","e","searchInput","target","searchFilter","filter","toLowerCase","includes","slice","Sidebar","Loading","MessageInput","newMsg","setNewMessageUser","messageInputRef","useRef","history","useHistory","sendMessage","current","sendMessageRequest","push","onSubmit","preventDefault","autoComplete","ref","NewMsgSearch","NewMessage","newMessageUser","ChatBubble","keyNum","time","date","Date","formattedTime","toLocaleTimeString","hour","minute","hour12","formattedDate","toLocaleDateString","showTime","setShowTime","ChannelInfoToggle","channelMembers","ChatHeader","ScrollDown","elementRef","scrollIntoView","Messages","useParams","messageRequest","getMessages","owner","owner_id","created_at","Nocontent","Toast","SearchUser","searchValue","setSearchValue","setMessage","showToast","setShowToast","setTimeout","addUser","NewChannel","channelNameRef","showError","onCreateChannel","user_ids","createChannelAPI","splice","deleteUser","temp_arr","dataset","newIdsList","temp_arr2","min","max","val","MessageSidebar","setChannelMembers","addNewUser","setAddNewUser","showInvite","setShowInvite","onAddingUser","addUserRequest","channel_id","member_id","channelInfoRequest","channel_members","member","Main","channelListRequest","allUsersListRequest","contactListRequest","runAPI","path","exact","Selectmessage","alt","component","PrivateRoute","Component","rest","render","props","PublicRoute","restricted","Login","loginEmailRef","loginPasswordRef","rememberUser","setRememberUser","localStorageLoginUser","parse","getItem","sessionStorageUser","sessionStorageHeaders","response","status","request","loginFunction","checked","isRememberUser","Loginhero","Register","registerEmailRef","registerPasswordRef","registerConfirmPasswordRef","showPassError","setShowPassError","focus","test","onRegister","LoginPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.c1e2c559.chunk.js","sourcesContent":["import axios from 'axios';\n\n//Set default URL for the API\naxios.defaults.baseURL = 'https://slackapi.avionschool.com/api/v1/';\n\nexport const userSessionAPI = (data) => {\n    return axios({\n        method: 'post',\n        url: data.url,\n        data: {\n            email: data.email,\n            password: data.password,\n            password_confirmation: data.password_confirmation,\n        },\n    });\n};\n\nexport const getListsAPI = (data) => {\n    return axios({\n        method: 'GET',\n        url: data.url,\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const getMessagesAPI = (data) => {\n    return axios({\n        method: 'GET',\n        url: `messages?receiver_id=${data.user_id}&receiver_class=${data.receiver_class}`,\n        params: {\n            receiver_id: data.user_id,\n            receiver_class: data.receiver_class,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const createChannelAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: 'channels',\n        data: {\n            name: data.name,\n            user_ids: data.user_ids,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const sendMessageAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: data.url,\n        data: {\n            receiver_id: data.receiver_id,\n            receiver_class: data.receiver_class,\n            body: data.message,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    });\n};\n\nexport const addUserChannelAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: 'channel/add_member',\n        data: {\n            id: data.channel_id,\n            member_id: data.member_id,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    });\n};\n","import { createContext, useState } from 'react';\nimport { Redirect } from 'react-router';\n\n/* ------------------ How to access contents of useContext ------------------ */\n// 1. Go to your component file where you want to access the content.\n// 2. Type const { name of prop } = useContext(UserContext)\n\n/* ------------------------------- useContext ------------------------------- */\n//Creating a context can help pass down props to several child components without having to pass them down through every parent component.\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n    //Current user information\n    const [currentUser, setUser] = useState(null);\n\n    //Access tokens\n    const [currentHeaders, setHeaders] = useState(null);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [loginMessage, setLoginMessage] = useState('');\n\n    //Save user to local storage\n    const localStorageLogin = (data) => {\n        localStorage.setItem('User', JSON.stringify(data));\n    };\n\n    //Save user to local storage\n    const tokenSessionStorage = (data, headers) => {\n        sessionStorage.setItem('User', JSON.stringify(data));\n        sessionStorage.setItem('Headers', JSON.stringify(headers));\n    };\n\n    //Sidebar state\n    const [sidebarMode, setSidebarMode] = useState('dm');\n\n    //List of data\n    const [channelList, setChannelList] = useState('');\n    const [allUsers, setAllUsers] = useState('');\n    const [contactList, setContactList] = useState('');\n    const [addUsers, setAddUsers] = useState([]);\n    const [userIds, setUserIds] = useState([]);\n\n    //Messages\n    const [messages, setMessages] = useState();\n\n    //For recent messages\n    const [allChannelMessages, setAllChannelMessages] = useState([]);\n\n    //Will be used for useEffect for reloading data\n    const [loadData, setLoadData] = useState(false);\n\n    //Function for toggling data reload\n    const handleSetLoadData = () => {\n        setLoadData(!loadData);\n    };\n\n    //Logout function\n    const logoutFunction = () => {\n        localStorage.setItem('User', null);\n        sessionStorage.setItem('User', null);\n        sessionStorage.setItem('Headers', null);\n        setUser(null);\n        setHeaders(null);\n        setIsLoggedIn(false);\n        setLoginMessage('');\n        setSidebarMode('dm');\n        setShowContent(false);\n        setAllChannelMessages();\n        setMessages();\n        setContactList('');\n        setChannelList('');\n        return <Redirect to=\"/login\" />;\n    };\n\n    //Show new channel modal\n    const [showModal, setShowModal] = useState(false);\n\n    //Remove @___.___ from email\n    const removeEmail = (email) => {\n        return email.split('@')[0];\n    };\n    //For mobile devices, for showing main content\n    const [showContent, setShowContent] = useState(false);\n\n    //For message sidebars/options\n    const [showChatInfo, setShowChatInfo] = useState(false);\n    const handleSetShowChatInfo = () => {\n        setShowChatInfo((showChatInfo) => !showChatInfo);\n    };\n    const [chatInfo, setChatInfo] = useState({});\n    const [chatName, setChatName] = useState();\n\n    //Function for getting name of user from ID number\n    const returnUserName = (id) => {\n        for (let i = 0; i < allUsers.data?.data?.length; i++) {\n            if (allUsers.data?.data?.[i].id === id) {\n                return allUsers.data.data[i].email;\n            }\n        }\n    };\n\n    return (\n        <UserContext.Provider\n            value={{\n                currentUser,\n                setUser,\n                currentHeaders,\n                setHeaders,\n                isLoggedIn,\n                setIsLoggedIn,\n                loginMessage,\n                setLoginMessage,\n                sidebarMode,\n                setSidebarMode,\n                channelList,\n                setChannelList,\n                allUsers,\n                setAllUsers,\n                contactList,\n                setContactList,\n                allChannelMessages,\n                setAllChannelMessages,\n                loadData,\n                setLoadData,\n                handleSetLoadData,\n                logoutFunction,\n                localStorageLogin,\n                tokenSessionStorage,\n                showModal,\n                setShowModal,\n                removeEmail,\n                showContent,\n                setShowContent,\n                showChatInfo,\n                setShowChatInfo,\n                messages,\n                setMessages,\n                handleSetShowChatInfo,\n                userIds,\n                setUserIds,\n                addUsers,\n                setAddUsers,\n                chatInfo,\n                setChatInfo,\n                chatName,\n                setChatName,\n                returnUserName,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n};\n","import React from 'react';\nimport './logo.css';\n\nconst Logo = ({ className }) => {\n    return (\n        <>\n            <h1 className={className}>\n                <span>t</span>\n                <span>:</span>\n                <span>l</span>\n                <span>k</span>\n            </h1>\n        </>\n    );\n};\n\nexport default Logo;\n","import React from 'react';\nimport './pic.css';\n\nconst Pic = ({ id, name, isChannel, isChip }) => {\n    const getInitial = () => {\n        let initialLetter = name.charAt(0);\n        return initialLetter.toUpperCase();\n    };\n\n    let colors = [\n        '#d43d2a',\n        '#ed8937',\n        '#d5b758',\n        '#9cb27a',\n        '#62ae9d',\n        '#2aa9be',\n    ];\n\n    let colorNumber;\n\n    const getColor = () => {\n        if (id === 0) {\n            return (colorNumber = 0);\n        } else if (id >= colors.length) {\n            return (colorNumber = Math.floor(id % colors.length));\n        } else if (id < colors.length) {\n            return (colorNumber = Math.floor(colors.length % id));\n        }\n    };\n\n    getColor();\n\n    return (\n        <div className=\"pic-container\">\n            <div\n                className={isChip ? 'chip-pic' : 'profile-pic'}\n                style={{\n                    backgroundColor: colors[colorNumber],\n                }}\n            >\n                {getInitial()}\n            </div>\n            {isChannel ? (\n                <div className=\"channel-pic-icon\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                        />\n                    </svg>\n                </div>\n            ) : (\n                ''\n            )}\n        </div>\n    );\n};\n\nexport default Pic;\n","import React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport Logo from '../logo/Logo';\nimport Pic from '../pic/Pic';\nimport './navbar.css';\n\nconst Navbar = () => {\n    const { setSidebarMode, sidebarMode, currentUser, handleSetLoadData } =\n        useContext(UserContext);\n\n    return (\n        <nav>\n            <Logo className=\"navbar-logo\" />\n            <div className=\"navlink-container\">\n                <button\n                    className={\n                        sidebarMode === 'dm'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => {\n                        setSidebarMode('dm');\n                        handleSetLoadData();\n                    }}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z\"\n                        />\n                    </svg>\n                </button>\n                <button\n                    className={\n                        sidebarMode === 'channel'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => {\n                        setSidebarMode('channel');\n                        handleSetLoadData();\n                    }}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                        />\n                    </svg>\n                </button>\n                <button\n                    className={\n                        sidebarMode === 'search'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => {\n                        setSidebarMode('search');\n                        handleSetLoadData();\n                    }}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                        />\n                    </svg>\n                </button>\n            </div>\n            <button\n                className={\n                    sidebarMode === 'user'\n                        ? 'nav-link nav-link-active'\n                        : 'nav-link'\n                }\n                onClick={() => setSidebarMode('user')}\n            >\n                <Pic id={currentUser.id} name={currentUser.email} />\n            </button>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport './button.css';\n\nconst Button = ({ className, text, type, onClick }) => {\n    return (\n        <>\n            <button className={className} type={type} onClick={onClick}>\n                {text}\n            </button>\n        </>\n    );\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/startchannel.d76733b3.svg\";","import React, { useContext, useEffect } from 'react';\nimport Pic from '../pic/Pic';\nimport './channellist.css';\nimport { default as StartChannel } from '../startchannel.svg';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport { getMessagesAPI } from '../../api/API';\n\nconst ChannelList = () => {\n    const {\n        channelList,\n        handleSetLoadData,\n        currentHeaders,\n        loadData,\n        removeEmail,\n        allChannelMessages,\n        setAllChannelMessages,\n        setShowContent,\n        setShowChatInfo,\n    } = useContext(UserContext);\n\n    // const [allChannelMessages, setAllChannelMessages] = useState([]);\n\n    const getRecentMsg = () => {\n        if (channelList) {\n            if (!channelList.data.errors) {\n                for (let i = 0; i < channelList.data?.data.length; i++) {\n                    let channelRecentMsgRequest = {\n                        'access-token': currentHeaders['access-token'],\n                        client: currentHeaders.client,\n                        expiry: currentHeaders.expiry,\n                        uid: currentHeaders.uid,\n                        user_id: parseInt(channelList.data.data[i].id),\n                        receiver_class: 'Channel',\n                    };\n\n                    getMessagesAPI(channelRecentMsgRequest).then((res) => {\n                        if (res.data?.data.length > 0) {\n                            console.log('res', res);\n                            console.log(res.data.data.at(-1).body);\n                            setAllChannelMessages((allChannelMessages) => [\n                                ...allChannelMessages,\n                                {\n                                    id: parseInt(channelList.data.data[i].id),\n                                    message: res.data.data.at(-1).body,\n                                    sender: res.data.data.at(-1).sender.email,\n                                },\n                            ]);\n                        } else {\n                            console.log('res', res);\n                            setAllChannelMessages((allChannelMessages) => [\n                                ...allChannelMessages,\n                                {\n                                    id: parseInt(channelList.data.data[i].id),\n                                    message: 'No messages',\n                                    sender: null,\n                                },\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n\n    const displayRecentMsg = (channel) => {\n        // console.log(allChannelMessages);\n\n        for (let i = 0; i < allChannelMessages.length; i++) {\n            if (channel.id === allChannelMessages[i].id) {\n                return (\n                    <div className=\"recent-message-container\">\n                        {allChannelMessages[i].sender ? (\n                            <span className=\"recent-message-sender\">\n                                {removeEmail(allChannelMessages[i].sender)}:\n                            </span>\n                        ) : (\n                            ''\n                        )}\n                        <span className=\"recent-message\">\n                            {allChannelMessages[i].message}\n                        </span>\n                    </div>\n                );\n            }\n        }\n    };\n\n    useEffect(() => {\n        getRecentMsg();\n    }, [loadData, currentHeaders]);\n\n    if (channelList.data.errors) {\n        return (\n            <div className=\"contact-container-empty\">\n                <img src={StartChannel} />\n                <span className=\"empty-title\">The more the merrier!</span>\n                <p>Create a new channel.</p>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"channel-container\">\n                {channelList.data.data.map((channel, index) => (\n                    <NavLink\n                        to={`/channel/${channel.id}`}\n                        className=\"channel-item\"\n                        key={index}\n                        activeClassName=\"selected-message\"\n                        onClick={() => {\n                            handleSetLoadData();\n                            setShowContent(true);\n                            setShowChatInfo(false);\n                            /* setMessages(); */\n                        }}\n                    >\n                        <Pic\n                            id={channel.id}\n                            name={channel.name}\n                            isChannel={true}\n                        />\n                        <div className=\"inbox-info\">\n                            <span className=\"inbox-name\">{channel.name}</span>\n                            {displayRecentMsg(channel)}\n                        </div>\n                    </NavLink>\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default ChannelList;\n","export default __webpack_public_path__ + \"static/media/beginchat.fee9cb19.svg\";","import React, { useContext } from 'react';\nimport Pic from '../pic/Pic';\nimport './contactlist.css';\nimport { default as BeginChat } from '../beginchat.svg';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\n\nconst ContactList = () => {\n    const { allUsers, handleSetLoadData, setShowContent, setShowChatInfo } =\n        useContext(UserContext);\n\n    if (allUsers.data.data.length === 0) {\n        return (\n            <div className=\"contact-container-empty\">\n                <img src={BeginChat} />\n                <span className=\"empty-title\">Whew, there's nothing here.</span>\n                <p>Start a new conversation!</p>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"contact-container\">\n                {allUsers.data.data.map((user, index) => (\n                    <NavLink\n                        to={`/user/${user.id}`}\n                        className=\"contact-item\"\n                        key={index}\n                        activeClassName=\"selected-message\"\n                        onClick={() => {\n                            handleSetLoadData();\n                            setShowContent(true);\n                            setShowChatInfo(false);\n                        }}\n                    >\n                        <Pic id={user.id} name={user.email} />\n                        <span>{user.email}</span>\n                    </NavLink>\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport './search.css';\n\nconst Search = ({ placeholder, type }) => {\n    const { channelList, allUsers, handleSetLoadData, setShowContent } =\n        useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        if (type === 'channel') {\n            const searchFilter = channelList.data.data.filter((channel) => {\n                return channel.name\n                    .toLowerCase()\n                    .includes(searchInput.toLowerCase());\n            });\n\n            if (searchInput === '') {\n                setSearchList([]);\n            } else {\n                setSearchList(searchFilter);\n            }\n        } else if (type === 'user') {\n            const searchFilter = allUsers.data.data.filter((user) => {\n                return user.email\n                    .toLowerCase()\n                    .includes(searchInput.toLowerCase());\n            });\n\n            if (searchInput === '') {\n                setSearchList([]);\n            } else {\n                setSearchList(searchFilter);\n            }\n        }\n    };\n\n    return (\n        <div className=\"search-container\">\n            <div className=\"search-input-container\">\n                <input\n                    type=\"text\"\n                    placeholder={placeholder}\n                    onChange={handleSearchList}\n                />\n            </div>\n            {searchList.length != 0 && (\n                <div className=\"search-results\">\n                    {type === 'channel' ? (\n                        <>\n                            {searchList.map((channel, index) => (\n                                <NavLink\n                                    className=\"search-item\"\n                                    to={`/channel/${channel.id}`}\n                                    key={index}\n                                    onClick={() => {\n                                        handleSetLoadData();\n                                        setShowContent(true);\n                                    }}\n                                >\n                                    <Pic\n                                        id={channel.id}\n                                        name={channel.name}\n                                        isChannel={true}\n                                    />\n                                    <span> {channel.name}</span>\n                                </NavLink>\n                            ))}\n                        </>\n                    ) : (\n                        <>\n                            {searchList.slice(0, 15).map((user, index) => (\n                                <NavLink\n                                    className=\"search-item\"\n                                    to={`/user/${user.id}`}\n                                    key={index}\n                                    onClick={() => {\n                                        handleSetLoadData();\n                                        setShowContent(true);\n                                    }}\n                                >\n                                    <Pic\n                                        id={user.id}\n                                        name={user.email}\n                                        isChannel={false}\n                                    />\n                                    <span> {user.email} </span>\n                                </NavLink>\n                            ))}\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Search;\n","import './sidebar.css';\nimport Button from '../button/Button';\nimport React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport ChannelList from '../channel/ChannelList';\nimport ContactList from '../contact/ContactList';\nimport { NavLink } from 'react-router-dom';\nimport Search from '../search/Search';\n\nconst Sidebar = () => {\n    // console.log('sidebar', currentHeaders);\n    // console.log('sidebar', allUsers);\n    // console.log('sidebar', contactList);\n    // console.log('sidebar', channelList);\n\n    const {\n        sidebarMode,\n        logoutFunction,\n        currentUser,\n        setShowModal,\n        setShowContent,\n        setShowChatInfo,\n    } = useContext(UserContext);\n\n    // const [showModal, setShowModal] = useState(false);\n\n    if (sidebarMode === 'dm') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Direct messages</h1>\n                <NavLink\n                    to=\"/new-message\"\n                    className=\"button\"\n                    onClick={() => {\n                        setShowContent(true);\n                        setShowChatInfo(false);\n                    }}\n                >\n                    New message\n                </NavLink>\n                <ContactList />\n            </div>\n        );\n    } else if (sidebarMode === 'channel') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Channels</h1>\n\n                <Button\n                    className=\"button\"\n                    text=\"Add channel\"\n                    onClick={() => {\n                        setShowModal(true);\n                        setShowChatInfo(false);\n                    }}\n                />\n\n                <ChannelList />\n            </div>\n        );\n    } else if (sidebarMode === 'search') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Search</h1>\n                <Search placeholder={'Search for a user'} type=\"user\" />\n            </div>\n        );\n    } else if (sidebarMode === 'user') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">User</h1>\n                <div className=\"user-container\">\n                    <Pic id={currentUser.id} name={currentUser.email} />\n                    <span className=\"user-email\">{currentUser.email}</span>\n                </div>\n                <Button\n                    onClick={logoutFunction}\n                    text=\"Logout\"\n                    className=\"button\"\n                />\n            </div>\n        );\n    }\n};\n\nexport default Sidebar;\n","import './loading.css';\nimport Logo from '../logo/Logo';\nimport React from 'react';\n\nconst Loading = () => {\n    return (\n        <div className=\"loading-container\">\n            <Logo className=\"loading-logo\" />\n        </div>\n    );\n};\n\nexport default Loading;\n","import React, { useContext, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { sendMessageAPI } from '../api/API';\nimport { UserContext } from '../context/UserContext';\n\nconst MessageInput = ({ type, id, newMsg, setNewMessageUser }) => {\n    const { currentHeaders, handleSetLoadData } = useContext(UserContext);\n\n    let messageInputRef = useRef(null);\n    let history = useHistory();\n\n    const sendMessage = () => {\n        if (\n            (messageInputRef.current.value !== null ||\n                messageInputRef.current.value !== '') &&\n            id !== null\n        ) {\n            let sendMessageRequest = {\n                url: 'messages',\n                'access-token': currentHeaders['access-token'],\n                client: currentHeaders.client,\n                expiry: currentHeaders.expiry,\n                uid: currentHeaders.uid,\n                receiver_id: parseInt(id),\n                receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n                message: messageInputRef.current.value,\n            };\n\n            sendMessageAPI(sendMessageRequest)\n                .then((res) => {\n                    console.log('send message ', res);\n                    handleSetLoadData();\n                    messageInputRef.current.value = '';\n                })\n                .catch((err) => console.log(err));\n\n            if (\n                (messageInputRef.current.value !== null ||\n                    messageInputRef.current.value !== '') &&\n                newMsg &&\n                id !== null\n            ) {\n                history.push(`/user/${id}`);\n                setNewMessageUser();\n            }\n        }\n    };\n\n    return (\n        <form\n            className=\"message-input-container\"\n            onSubmit={(e) => {\n                e.preventDefault();\n                sendMessage();\n            }}\n        >\n            <label className=\"message-input\">\n                <input\n                    type=\"text\"\n                    name=\"message-input\"\n                    id=\"message-input\"\n                    autoComplete=\"off\"\n                    placeholder=\"Type your message here...\"\n                    ref={messageInputRef}\n                />\n            </label>\n            <button type=\"submit\" className=\"send-button\">\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-6 w-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                >\n                    <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={1}\n                        d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                    />\n                </svg>\n            </button>\n        </form>\n    );\n};\n\nexport default MessageInput;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport './search.css';\n\nconst NewMsgSearch = ({ setNewMessageUser }) => {\n    const { allUsers, handleSetLoadData } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n\n        const searchFilter = allUsers.data.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"newmsg-search-container\">\n                <span>To: </span>\n                <div className=\"newmsg-search-input-container\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"someone@example.com\"\n                        onChange={handleSearchList}\n                    />\n                </div>\n            </div>\n            {searchList.length != 0 && (\n                <div className=\"newmsg-search-results\">\n                    {searchList.slice(0, 15).map((user, index) => (\n                        <div\n                            className=\"newmsg-search-item\"\n                            key={index}\n                            onClick={() => {\n                                handleSetLoadData();\n                                setNewMessageUser(user);\n                            }}\n                        >\n                            <Pic\n                                id={user.id}\n                                name={user.email}\n                                isChannel={false}\n                            />\n                            <span>{user.email}</span>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default NewMsgSearch;\n","import React, { useContext, useState } from 'react';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport MessageInput from '../messages/MessageInput';\nimport NewMsgSearch from '../components/search/NewMsgSearch';\nimport './newmessages.css';\n\nconst NewMessage = () => {\n    const { showContent, setShowContent } = useContext(UserContext);\n\n    /* const { type, id } = useParams(); */\n\n    const [newMessageUser, setNewMessageUser] = useState(null);\n\n    // const [chatInfo, setChatInfo] = useState();\n\n    // const getMessages = () => {\n    //     let messageRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         user_id: parseInt(id),\n    //         receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n    //     };\n\n    //     console.log(messageRequest);\n    //     getMessagesAPI(messageRequest).then((res) => {\n    //         console.log(res);\n    //         setMessages(res);\n    //     });\n    // };\n\n    return (\n        <div\n            className={\n                showContent\n                    ? 'main-content'\n                    : 'main-content main-content-closed'\n            }\n        >\n            <div className=\"new-messages-section\">\n                <div className=\"new-messages-header\">\n                    <div className=\"chat-header\">\n                        <button\n                            className={'back-button'}\n                            onClick={() => setShowContent(false)}\n                        >\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-6 w-6\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                            >\n                                <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M15 19l-7-7 7-7\"\n                                />\n                            </svg>\n                        </button>\n                        <h1 className=\"chat-name\">New message</h1>\n                    </div>\n                    {!newMessageUser ? (\n                        <NewMsgSearch setNewMessageUser={setNewMessageUser} />\n                    ) : (\n                        <div className=\"newmsg-search-container\">\n                            <span>To: </span>\n                            <div className=\"chip-container\">\n                                <Pic\n                                    id={newMessageUser.id}\n                                    name={newMessageUser.email}\n                                    isChip={true}\n                                />\n                                <span>{newMessageUser.email}</span>\n                                <div\n                                    className=\"delete-chip-button\"\n                                    onClick={() => setNewMessageUser()}\n                                >\n                                    ✕\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {/* \n            <div className=\"message-flex\">\n                <div className=\"messages-container\"></div>\n            </div> */}\n\n                <MessageInput\n                    type=\"User\"\n                    id={newMessageUser ? newMessageUser.id : null}\n                    newMsg={true}\n                    setNewMessageUser={setNewMessageUser}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NewMessage;\n","import React, { useState } from 'react';\nimport Pic from '../components/pic/Pic';\nimport './messages.css';\n\nconst ChatBubble = ({ keyNum, className, id, name, message, time, type }) => {\n    const date = new Date(time);\n\n    const formattedTime = date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true,\n    });\n\n    const formattedDate = date.toLocaleDateString('en-US');\n\n    const [showTime, setShowTime] = useState(false);\n    const handleSetShowTime = () => [setShowTime(!showTime)];\n\n    return (\n        <div className={className} key={keyNum} onClick={handleSetShowTime}>\n            <div className=\"pic-message-container\">\n                <Pic id={id} name={name} />\n                <span className={`message-bubble-${type}`}>{message}</span>\n            </div>\n\n            <span className={`message-${type}-name`}>{name}</span>\n\n            {showTime ? (\n                <span className={`message-time-${type}`}>\n                    {formattedDate} {formattedTime}\n                </span>\n            ) : (\n                ''\n            )}\n        </div>\n    );\n};\n\nexport default ChatBubble;\n","import React from 'react';\nimport { useContext } from 'react';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\n\nconst ChannelInfoToggle = ({ id, channelMembers }) => {\n    const { showChatInfo, setShowChatInfo, handleSetShowChatInfo } =\n        useContext(UserContext);\n\n    return (\n        <div\n            className=\"message-sidebar-toggle\"\n            onClick={() => {\n                handleSetShowChatInfo();\n                console.log(showChatInfo);\n            }}\n        >\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n            >\n                <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                />\n            </svg>\n        </div>\n    );\n};\n\nexport default ChannelInfoToggle;\n","import React, { useContext, useEffect, useState } from 'react';\nimport Button from '../components/button/Button';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChannelInfoToggle from './ChannelInfoToggle';\n\nconst ChatHeader = ({ type, id, messages, channelMembers }) => {\n    const { channelList, allUsers, loadData, setShowContent } =\n        useContext(UserContext);\n\n    const [chatInfo, setChatInfo] = useState();\n\n    useEffect(() => {\n        if (type === 'channel') {\n            channelList.data.data.map((channel) => {\n                if (channel.id === parseInt(id)) {\n                    setChatInfo({\n                        id: channel.id,\n                        name: channel.name,\n                        isChannel: true,\n                    });\n                }\n            });\n        } else if (type === 'user') {\n            allUsers.data.data.map((user) => {\n                if (user.id === parseInt(id)) {\n                    setChatInfo({\n                        id: user.id,\n                        name: user.email,\n                        isChannel: false,\n                    });\n                }\n            });\n        }\n    }, [loadData]);\n\n    return (\n        <>\n            {chatInfo ? (\n                <div className=\"chat-header\">\n                    <button\n                        className={'back-button'}\n                        onClick={() => setShowContent(false)}\n                    >\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-6 w-6\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                        >\n                            <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M15 19l-7-7 7-7\"\n                            />\n                        </svg>\n                    </button>\n                    <div className=\"header-name\">\n                        {!chatInfo.isChannel ? (\n                            <Pic\n                                id={chatInfo.id}\n                                name={chatInfo.name}\n                                isChannel={chatInfo.isChannel}\n                            />\n                        ) : (\n                            ''\n                        )}\n                        <h1\n                            className={\n                                !chatInfo.isChannel\n                                    ? 'chat-name chat-name-user'\n                                    : 'chat-name '\n                            }\n                        >\n                            {chatInfo.name}\n                        </h1>\n                    </div>\n\n                    <ChannelInfoToggle\n                        id={chatInfo.id}\n                        channelMembers={channelMembers}\n                    />\n                </div>\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ChatHeader;\n","export default __webpack_public_path__ + \"static/media/nocontent.ebe2c5bc.svg\";","import React, { useRef, useEffect } from 'react';\n\nconst ScrollDown = () => {\n    const elementRef = useRef();\n\n    useEffect(() => {\n        elementRef.current.scrollIntoView();\n    });\n\n    return <div ref={elementRef}></div>;\n};\n\nexport default ScrollDown;\n","import React, { useContext, useRef, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { getMessagesAPI } from '../api/API';\nimport Loading from '../components/loading/Loading';\n\nimport { UserContext } from '../context/UserContext';\nimport ChatBubble from './ChatBubble';\nimport ChatHeader from './ChatHeader';\nimport Nocontent from '../components/nocontent.svg';\nimport MessageInput from './MessageInput';\nimport ScrollDown from '../messages/ScrollDown';\n\nconst Messages = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        channelList,\n        allUsers,\n        loadData,\n        showContent,\n        messages,\n        setMessages,\n        showChatInfo,\n        setChatInfo,\n        setChatName,\n    } = useContext(UserContext);\n\n    const { type, id } = useParams();\n\n    // const [messages, setMessages] = useState();\n    // const [channelMembers, setChannelMembers] = useState();\n\n    // const [chatInfo, setChatInfo] = useState();\n\n    // const sendMessageRef = useRef();\n    // const endMessageRef = useRef(null);\n    // const elementRef = useRef();\n\n    const getMessages = () => {\n        let messageRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            user_id: parseInt(id),\n            receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n        };\n\n        /* setChatInfo({\n            id: id,\n            type: type,\n        }); */\n\n        console.log('message request', messageRequest);\n        getMessagesAPI(messageRequest)\n            .then((res) => {\n                console.log('message request response', res);\n                setMessages(res);\n            })\n            .catch((err) => console.log(err));\n\n        // if (type === 'channel') {\n        //     let channelInfoRequest = {\n        //         url: `channels/${id}`,\n        //         'access-token': currentHeaders['access-token'],\n        //         client: currentHeaders.client,\n        //         expiry: currentHeaders.expiry,\n        //         uid: currentHeaders.uid,\n        //     };\n\n        //     getListsAPI(channelInfoRequest).then((res) => {\n        //         console.log('channel info response', res);\n        //         setChannelMembers(res.data?.data?.channel_members);\n        //     });\n        // }\n    };\n\n    const getChatName = () => {\n        if (type === 'channel') {\n            channelList.data.data.map((channel) => {\n                if (channel.id === parseInt(id)) {\n                    setChatName({\n                        id: channel.id,\n                        name: channel.name,\n                        isChannel: true,\n                        owner: channel.owner_id,\n                    });\n                }\n            });\n        } else if (type === 'user') {\n            allUsers.data.data.map((user) => {\n                if (user.id === parseInt(id)) {\n                    setChatName({\n                        id: user.id,\n                        name: user.email,\n                        isChannel: false,\n                    });\n                }\n            });\n        }\n    };\n\n    // const getChatInfo = () => {\n    //     if (type === 'channel') {\n    //         for (let i = 0; i < channelList.length; i++) {\n    //             if (parseInt(id) === channelList.data.data[i].id) {\n    //                 setChatInfo({\n    //                     id: channelList.data.data[i].id,\n    //                     name: channelList.data.data[i].name,\n    //                     isChannel: true,\n    //                 });\n    //                 console.log('get ' + chatInfo);\n    //             }\n    //         }\n    //         console.log('hindi kinuha channel' + chatInfo);\n    //     } else if (type === 'user') {\n    //         for (let i = 0; i < allUsers.length; i++) {\n    //             if (parseInt(id) === allUsers.data.data[i].id) {\n    //                 setChatInfo({\n    //                     id: allUsers.data.data[i].id,\n    //                     name: allUsers.data.data[i].email,\n    //                     isChannel: false,\n    //                 });\n    //                 console.log('get ' + chatInfo);\n    //             }\n    //         }\n    //         console.log(allUsers);\n    //         console.log('hindi kinuha users' + chatInfo);\n    //     }\n    // };\n\n    // getChatInfo();\n\n    useEffect(() => {\n        getMessages();\n        getChatName();\n        // getChatInfo();\n    }, [loadData /* , messages, currentHeaders */]);\n\n    if (!messages) {\n        return <Loading />;\n    } else {\n        return (\n            <div\n                className={\n                    showContent\n                        ? 'main-content'\n                        : 'main-content main-content-closed'\n                }\n            >\n                <div className=\"messages-section\">\n                    {messages ? (\n                        <>\n                            <ChatHeader\n                                type={type}\n                                id={id}\n                                messages={messages}\n                                // channelMembers={channelMembers}\n                            />\n                            <div className=\"messages-content\">\n                                {messages.data?.data.length > 0 ? (\n                                    <div className=\"message-flex\">\n                                        <div className=\"messages-container\">\n                                            {messages.data.data.map(\n                                                (message, index) => {\n                                                    return message.sender.id !==\n                                                        currentUser.id ? (\n                                                        <ChatBubble\n                                                            key={index}\n                                                            keyNum={index}\n                                                            id={\n                                                                message.sender\n                                                                    .id\n                                                            }\n                                                            name={\n                                                                message.sender\n                                                                    .email\n                                                            }\n                                                            message={\n                                                                message.body\n                                                            }\n                                                            time={\n                                                                message.created_at\n                                                            }\n                                                            className=\"incoming-messages\"\n                                                            type=\"sender\"\n                                                        />\n                                                    ) : (\n                                                        <ChatBubble\n                                                            key={index}\n                                                            keyNum={index}\n                                                            id={\n                                                                message.sender\n                                                                    .id\n                                                            }\n                                                            name={\n                                                                message.sender\n                                                                    .email\n                                                            }\n                                                            message={\n                                                                message.body\n                                                            }\n                                                            time={\n                                                                message.created_at\n                                                            }\n                                                            className=\"outgoing-messages\"\n                                                            type=\"user\"\n                                                        />\n                                                    );\n                                                }\n                                            )}\n                                            {/* <div ref={elementRef}></div> */}\n                                            <ScrollDown />\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div className=\"message-container-empty\">\n                                        <img src={Nocontent} />\n                                        <span className=\"empty-title\">\n                                            Be the first one to say hi!\n                                        </span>\n                                        <p>Send a message!</p>\n                                    </div>\n                                )}\n                            </div>\n                            <MessageInput type={type} id={id} />\n                        </>\n                    ) : (\n                        ''\n                    )}\n                </div>\n                {/* <div\n                    className={\n                        showChatInfo\n                            ? 'message-sidebar'\n                            : 'message-sidebar message-sidebar-closed'\n                    }\n                >\n                    <ChatHeader type={type} id={id} messages={messages} />\n                    <MessageSidebar />\n                    <h1>channel sidebar</h1>\n                </div> */}\n            </div>\n        );\n    }\n};\n\nexport default Messages;\n","import React from 'react';\nimport './toast.css';\n\nconst Toast = ({ className, text }) => {\n    return <div className={className}>{text}</div>;\n};\n\nexport default Toast;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport Pic from '../components/pic/Pic';\nimport '../newchannel/searchuser.css';\nimport { useRef } from 'react';\n\nimport Toast from '../components/toast/Toast';\n\nconst SearchUser = ({ type, placeholder }) => {\n    const {\n        currentHeaders,\n        allUsers,\n        currentUser,\n        addUsers,\n        setAddUsers,\n        userIds,\n        setUserIds,\n    } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const [searchValue, setSearchValue] = useState('');\n\n    const [message, setMessage] = useState('');\n    const [showToast, setShowToast] = useState(false);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        setSearchValue(searchInput);\n        const searchFilter = allUsers.data?.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n    const addUser = (user) => {\n        if (addUsers.includes(user)) {\n            setShowToast(true);\n            setMessage('Please add another user');\n            setTimeout(() => {\n                setShowToast(false);\n            }, 1000);\n        } else {\n            setAddUsers([...addUsers, user]);\n            setUserIds([...userIds, user.id]);\n        }\n\n        console.log(addUsers);\n        console.log(userIds);\n    };\n\n    const clearSearchField = () => {\n        setSearchList([]);\n        setSearchValue('');\n    };\n\n    // const deleteUser = (e) => {\n    //     let temp_arr = [...addUsers];\n    //     temp_arr.splice(e.target.dataset.index, 1);\n\n    //     let temp_arr2 = [...userIds];\n    //     temp_arr2.splice(e.target.dataset.index, 1);\n    //     updateIndex(temp_arr, temp_arr2);\n    //     console.log(temp_arr);\n    //     console.log(temp_arr2);\n    // };\n\n    // const updateIndex = (newList, newIdsList) => {\n    //     setAddUsers(newList);\n    //     setUserIds(newIdsList);\n    // };\n\n    return (\n        <>\n            {showToast ? (\n                <Toast className='toast-message' text={message} />\n            ) : (\n                <></>\n            )}\n            <div className='input-container'>\n                <span>Add users</span>\n                <input\n                    type='text'\n                    placeholder={placeholder}\n                    onChange={handleSearchList}\n                    value={searchValue}\n                />\n            </div>\n            {searchList.length !== 0 && (\n                <div className='newchannel-search-results'>\n                    {searchList.slice(0, 5).map((user, index) => (\n                        <div\n                            className='newmsg-search-item'\n                            key={index}\n                            onClick={() => {\n                                addUser(user, index);\n                                clearSearchField();\n                            }}\n                        >\n                            <Pic id={user.id} name={user.email} isChip={true} />\n                            <span>{user.uid}</span>\n                        </div>\n                    ))}\n                </div>\n            )}\n            {/* <br />\n            <br />\n            <br /> */}\n            {/* <span>User List:</span> */}\n            {/* {addUsers.map((val, index) => {\n                return (\n                    <div className=\"select-chip-container\" key={index}>\n                        <Pic id={val.id} name={val.email} isChip={true} />\n                        <span>{val.email}</span>\n                        <div\n                            className=\"delete-chip-button\"\n                            data-index={index}\n                            onClick={(e) => deleteUser(e)}\n                        >\n                            ✕\n                        </div>\n                    </div>\n                );\n            })} */}\n        </>\n    );\n};\n\nexport default SearchUser;\n","import React, { useContext, useRef, useState } from 'react';\nimport Button from '../components/button/Button';\nimport { createChannelAPI } from '../api/API';\nimport Toast from '../components/toast/Toast';\nimport './newchannel.css';\nimport { UserContext } from '../context/UserContext';\nimport SearchUser from '../newchannel/SearchUser';\nimport Pic from '../components/pic/Pic';\n\nconst NewChannel = () => {\n    const {\n        currentHeaders,\n        setShowModal,\n        userIds,\n        addUsers,\n        setAddUsers,\n        setUserIds,\n        handleSetLoadData,\n    } = useContext(UserContext);\n\n    const channelNameRef = useRef();\n    // const userInputRef = useRef();\n\n    //Toast\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n\n    //Error Message\n    const [showError, setShowError] = useState(false);\n\n    const onCreateChannel = () => {\n        // if (channelNameRef.current.value.length > 15) {\n        //     setMessage('Channel Name too long');\n        //     setShowError(true);\n        //     setShowToast(false);\n        //     setTimeout(() => {\n        //         setShowError(false);\n        //     }, 3000);\n        //     channelNameRef.current.focus();\n        // } else if (channelNameRef.current.value.length < 3) {\n        //     setMessage('Channel Name too short');\n        //     setShowError(true);\n        //     setTimeout(() => {\n        //         setShowError(false);\n        //     }, 3000);\n        //     channelNameRef.current.focus();\n        // } else {\n        const data = {\n            name: channelNameRef.current.value,\n            user_ids: userIds,\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n        };\n        createChannelAPI(data)\n            .then((res) => {\n                if (res.data.errors) {\n                    setMessage(res.data.errors[0]);\n                    setShowToast(true);\n                    setTimeout(() => {\n                        setShowToast(false);\n                    }, 3000);\n                } else {\n                    setMessage('Channel Created');\n                    setShowToast(true);\n                    setTimeout(() => {\n                        setShowToast(false);\n                        setShowModal(false);\n                    }, 1500);\n                    userIds.splice(0, userIds.length);\n                    addUsers.splice(0, addUsers.length);\n                    console.log(res);\n                }\n            })\n            .catch((err) => {\n                console.log('error', err);\n            });\n    };\n    const newFunction = () => {\n        setAddUsers([]);\n        setUserIds([]);\n        setShowModal(false);\n    };\n\n    const updateIndex = (newList, newIdsList) => {\n        setAddUsers(newList);\n        setUserIds(newIdsList);\n    };\n\n    const deleteUser = (e) => {\n        let temp_arr = [...addUsers];\n        temp_arr.splice(e.target.dataset.index, 1);\n\n        let temp_arr2 = [...userIds];\n        temp_arr2.splice(e.target.dataset.index, 1);\n        updateIndex(temp_arr, temp_arr2);\n        console.log(temp_arr);\n        console.log(temp_arr2);\n    };\n\n    return (\n        <div className=\"channel-modal-container\">\n            <form className=\"channel-modal\">\n                <div className=\"modal-upperhalf\">\n                    <div className=\"modal-title\">\n                        <span\n                            className=\"close-button\"\n                            onClick={() => newFunction()}\n                        >\n                            ✕\n                        </span>\n                        <h1 className=\"sidebar-title\">Create a channel</h1>\n                    </div>\n                    <div className=\"newchannel-inputs-container\">\n                        <label className=\"input-container\">\n                            <span>Channel Name</span>\n\n                            <input\n                                type=\"text\"\n                                min=\"3\"\n                                max=\"15\"\n                                ref={channelNameRef}\n                            ></input>\n                        </label>\n                        {/* <label className='input-container'>\n                    <span>Input user IDs</span>\n                    {<input type='text' ref={userInputRef}></input>}\n                </label> */}\n                        {<SearchUser />}\n                    </div>\n                </div>\n                <span className=\"newchannel-chips-container-label\">\n                    Users to be added to the channel\n                </span>\n                <div className=\"newchannel-chips-container\">\n                    {addUsers.map((val, index) => {\n                        return (\n                            <div className=\"select-chip-container\" key={index}>\n                                <Pic\n                                    id={val.id}\n                                    name={val.email}\n                                    isChip={true}\n                                />\n                                <span>{val.email}</span>\n                                <div\n                                    className=\"delete-chip-button\"\n                                    data-index={index}\n                                    onClick={(e) => deleteUser(e)}\n                                >\n                                    ✕\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n\n                <Button\n                    className=\"button\"\n                    type=\"submit\"\n                    text=\"Create Channel\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        handleSetLoadData();\n                        onCreateChannel();\n                    }}\n                />\n            </form>\n            {showToast || showError ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default NewChannel;\n","export default __webpack_public_path__ + \"static/media/selectmessage.d806d655.svg\";","import React, { useEffect, useState } from 'react';\nimport { useContext } from 'react';\nimport { getListsAPI, addUserChannelAPI } from '../api/API';\nimport Button from '../components/button/Button';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport Toast from '../components/toast/Toast';\nimport { NavLink } from 'react-router-dom';\nconst MessageSidebar = () => {\n    const {\n        allUsers,\n        currentHeaders,\n        handleSetShowChatInfo,\n        showChatInfo,\n        loadData,\n        chatName,\n        addUsers,\n        returnUserName,\n        handleSetLoadData,\n        setShowContent,\n        setShowChatInfo,\n    } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n\n    const [channelMembers, setChannelMembers] = useState();\n\n    const [message, setMessage] = useState('');\n    const [showToast, setShowToast] = useState(false);\n    const [addNewUser, setAddNewUser] = useState();\n    const [showInvite, setShowInvite] = useState(false);\n\n    const onAddingUser = () => {\n        const addUserRequest = {\n            channel_id: chatName.id,\n            member_id: addNewUser,\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n        };\n        addUserChannelAPI(addUserRequest).then((res) => {\n            if (res.data.errors) {\n                setMessage(res.data.errors[0]);\n                setShowToast(true);\n                setTimeout(() => {\n                    setShowToast(false);\n                }, 3000);\n            } else {\n                setShowToast(true);\n                setShowInvite(false);\n                setMessage('User added');\n                setTimeout(() => {\n                    setShowToast(false);\n                }, 1500);\n                console.log(res);\n            }\n        });\n    };\n\n    const clearSearchField = () => {\n        setSearchList([]);\n        setSearchValue('');\n    };\n\n    const addUser = (user) => {\n        if (addUsers.includes(user)) {\n            setShowToast(true);\n            setMessage('Please add another user');\n            setTimeout(() => {\n                setShowToast(false);\n            }, 1000);\n        } else {\n            setAddNewUser(user.id);\n            console.log(user.id);\n        }\n    };\n\n    // const getMemberIcons = () => {\n    //     let getMemberRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: `channels/${chatInfo.id}`,\n    //     };\n    // };\n\n    useEffect(() => {\n        if (chatName && chatName.isChannel) {\n            let channelInfoRequest = {\n                url: `channels/${chatName.id}`,\n                'access-token': currentHeaders['access-token'],\n                client: currentHeaders.client,\n                expiry: currentHeaders.expiry,\n                uid: currentHeaders.uid,\n            };\n\n            getListsAPI(channelInfoRequest).then((res) => {\n                console.log('channel info response', res);\n                setChannelMembers(res.data?.data?.channel_members);\n            });\n        }\n\n        return () => {\n            console.log('cleanup');\n        };\n    }, [loadData, chatName, showChatInfo]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        setSearchValue(searchInput);\n        const searchFilter = allUsers.data?.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n\n    return (\n        <div\n            className={\n                showChatInfo\n                    ? 'message-sidebar'\n                    : 'message-sidebar message-sidebar-closed'\n            }\n        >\n            <div className=\"modal-title\">\n                <span\n                    className=\"close-button-sidebar\"\n                    onClick={() => {\n                        handleSetShowChatInfo();\n                        setShowInvite(false);\n                    }}\n                >\n                    ✕\n                </span>\n            </div>\n            {chatName && (\n                <div className=\"message-sidebar-title\">\n                    <Pic\n                        id={chatName.id}\n                        name={chatName?.name}\n                        isChannel={chatName.isChannel}\n                    />\n                    <h1 className=\"sidebar-title\">{chatName.name}</h1>\n                </div>\n            )}\n            {chatName && chatName?.isChannel ? (\n                <>\n                    {!showInvite ? (\n                        <div\n                            className=\"invite-user-toggle\"\n                            onClick={() => {\n                                setShowInvite(true);\n                            }}\n                        >\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-6 w-6\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                            >\n                                <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={1.5}\n                                    d=\"M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z\"\n                                />\n                            </svg>\n                            <span>Invite user to group</span>\n                        </div>\n                    ) : (\n                        <div className=\"invite-user-container\">\n                            {!addNewUser ? (\n                                <>\n                                    <input\n                                        className=\"invite-user-input\"\n                                        type=\"text\"\n                                        placeholder={'Invite a user...'}\n                                        onChange={handleSearchList}\n                                    />\n                                    {searchList.length !== 0 && (\n                                        <div className=\"invite-user-search-results\">\n                                            {searchList\n                                                .slice(0, 5)\n                                                .map((user, index) => (\n                                                    <div\n                                                        className=\"newmsg-search-item\"\n                                                        key={index}\n                                                        onClick={() => {\n                                                            addUser(\n                                                                user,\n                                                                index\n                                                            );\n                                                            clearSearchField();\n                                                        }}\n                                                    >\n                                                        <Pic\n                                                            id={user.id}\n                                                            name={user.email}\n                                                            isChip={true}\n                                                        />\n                                                        <span>{user.uid}</span>\n                                                    </div>\n                                                ))}\n                                        </div>\n                                    )}\n                                </>\n                            ) : (\n                                <>\n                                    <div className=\"invite-chip-container\">\n                                        <div>\n                                            <Pic\n                                                id={addNewUser}\n                                                name={returnUserName(\n                                                    addNewUser\n                                                )}\n                                                isChip={true}\n                                            />\n                                            <span>\n                                                {returnUserName(addNewUser)}\n                                            </span>\n                                        </div>\n                                        <div\n                                            className=\"delete-chip-button\"\n                                            onClick={() => setAddNewUser()}\n                                        >\n                                            ✕\n                                        </div>\n                                    </div>\n                                    <Button\n                                        text={'+ Invite user'}\n                                        className=\"button\"\n                                        onClick={() => {\n                                            onAddingUser();\n                                            handleSetLoadData();\n                                        }}\n                                    />\n                                </>\n                            )}\n                        </div>\n                    )}{' '}\n                </>\n            ) : (\n                <div\n                    className=\"invite-user-toggle\"\n                    onClick={() => {\n                        setShowInvite(true);\n                    }}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1.5}\n                            d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\n                        />\n                    </svg>\n                    <span>Add to favorites</span>\n                </div>\n            )}\n\n            {chatName && channelMembers && chatName.isChannel ? (\n                <>\n                    <span className=\"member-list-label\">Group members</span>\n                    <div className=\"member-list\">\n                        {channelMembers.map((member, index) => (\n                            <NavLink\n                                to={`/user/${member.user_id}`}\n                                className=\"newmsg-search-item\"\n                                key={index}\n                                onClick={() => {\n                                    handleSetLoadData();\n                                    setShowContent(true);\n                                    setShowChatInfo(false);\n                                }}\n                            >\n                                <Pic\n                                    id={member.user_id}\n                                    name={returnUserName(member.user_id)}\n                                    isChip={true}\n                                />\n                                <span>{returnUserName(member.user_id)}</span>\n                            </NavLink>\n                        ))}\n                    </div>\n                </>\n            ) : (\n                ''\n            )}\n            {showToast ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default MessageSidebar;\n\n/* const { type, id } = useParams(); */\n\n// const [chatName, setChatName] = useState();\n\n// useEffect(() => {\n//     if (chatInfo.type === 'channel') {\n//         channelList.data.data.map((channel) => {\n//             if (channel.id === parseInt(chatInfo.id)) {\n//                 setChatName({\n//                     id: channel.id,\n//                     name: channel.name,\n//                     isChannel: true,\n//                 });\n//             }\n//         });\n//     } else if (chatInfo.type === 'user') {\n//         allUsers.data.data.map((user) => {\n//             if (user.id === parseInt(chatInfo.id)) {\n//                 setChatName({\n//                     id: user.id,\n//                     name: user.email,\n//                     isChannel: false,\n//                 });\n//             }\n//         });\n//     }\n// }, [loadData]);\n\n//Make a function that gets all chat info\n// let channelInfoRequest = {\n//     url: `channels/${id}`,\n//     'access-token': currentHeaders['access-token'],\n//     client: currentHeaders.client,\n//     expiry: currentHeaders.expiry,\n//     uid: currentHeaders.uid,\n// };\n\n// getListsAPI(channelInfoRequest).then((res) => {\n//     console.log('channel info response', res);\n//     setChannelMembers(res.data?.data?.channel_members);\n// });\n","import React, { useEffect, useContext } from 'react';\nimport { getListsAPI } from './api/API';\nimport Navbar from './components/navbar/Navbar';\nimport Sidebar from './components/sidebar/Sidebar';\nimport Loading from './components/loading/Loading';\nimport { Route, Switch } from 'react-router-dom';\nimport NewMessage from './newmessage/NewMessage';\nimport Messages from './messages/Messages';\nimport { UserContext } from './context/UserContext';\nimport NewChannel from './newchannel/NewChannel';\nimport Selectmessage from './components/selectmessage.svg';\nimport MessageSidebar from './messages/MessageSidebar';\n\nconst Main = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        setChannelList,\n        setAllUsers,\n        setContactList,\n        allUsers,\n        channelList,\n        contactList,\n        showModal,\n        setShowModal,\n        loadData,\n        removeEmail,\n        showContent,\n        showChatInfo,\n    } = useContext(UserContext);\n\n    const runAPI = () => {\n        let channelListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'channels',\n        };\n\n        let allUsersListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'users',\n        };\n\n        let contactListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'users',\n        };\n\n        getListsAPI(channelListRequest)\n            .then((res) => {\n                console.log('channels r', res);\n                console.log('channels', channelList);\n                setChannelList(res);\n            })\n            .catch((err) => console.log(err));\n\n        getListsAPI(allUsersListRequest)\n            .then((res) => {\n                console.log('users r', res);\n                console.log('users', allUsers);\n                setAllUsers(res);\n            })\n            .catch((err) => console.log(err));\n\n        getListsAPI(contactListRequest)\n            .then((res) => {\n                console.log('contact r', res);\n                console.log('contact', contactList);\n                setContactList(res);\n            })\n            .catch((err) => console.log(err));\n    };\n\n    useEffect(() => {\n        runAPI();\n    }, [loadData]);\n\n    if (!channelList.data || !allUsers || !contactList) {\n        return <Loading />;\n    } else {\n        return (\n            <div className=\"app-container\">\n                {showModal ? (\n                    <NewChannel\n                        showModal={showModal}\n                        setShowModal={setShowModal}\n                    />\n                ) : null}\n                {/* <Router basename={process.env.PUBLIC_URL}> */}\n                <div\n                    className={\n                        showContent\n                            ? 'navigation-bars-container navigation-bars-container-closed'\n                            : 'navigation-bars-container '\n                    }\n                >\n                    <Navbar />\n                    <Sidebar />\n                </div>\n                <Switch>\n                    <Route path=\"/\" exact>\n                        <div\n                            className={\n                                !showContent\n                                    ? 'main-content main-content-closed'\n                                    : showChatInfo\n                                    ? 'main-content main-content-closed'\n                                    : 'main-content'\n                            }\n                        >\n                            <div className=\"message-container-empty\">\n                                <img src={Selectmessage} alt=\"Welcome back\" />\n                                <span className=\"empty-title\">\n                                    Welcome back,{' '}\n                                    {removeEmail(currentUser.email)}!\n                                </span>\n                                <p>\n                                    Send a message or choose a contact to get\n                                    started.\n                                </p>\n                            </div>\n                        </div>\n                    </Route>\n                    <Route path=\"/:type/:id\" component={Messages} />\n                    <Route exact path=\"/new-message\" component={NewMessage} />\n                </Switch>\n\n                <MessageSidebar />\n                {/* </Router> */}\n            </div>\n        );\n    }\n};\n\nexport default Main;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from './context/UserContext';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const { isLoggedIn } = useContext(UserContext);\n\n    return (\n        // Show the component only when the user is logged in\n        // Otherwise, redirect the user to /signin page\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn ? <Component {...props} /> : <Redirect to=\"/login\" />\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from './context/UserContext';\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n    const { isLoggedIn } = useContext(UserContext);\n\n    return (\n        // restricted = false meaning public route\n        // restricted = true meaning restricted route\n\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn && restricted ? (\n                    <Redirect to=\"/\" exact />\n                ) : (\n                    <Component {...props} />\n                )\n            }\n        />\n    );\n};\n\nexport default PublicRoute;\n","import axios from 'axios';\nimport { useEffect, useState, useRef, useContext } from 'react';\nimport { userSessionAPI } from '../api/API';\nimport { Router, Route, Switch, NavLink } from 'react-router-dom';\nimport Button from '../components/button/Button';\nimport Loading from '../components/loading/Loading';\nimport './login.css';\nimport Logo from '../components/logo/Logo';\nimport Toast from '../components/toast/Toast';\nimport { UserContext } from '../context/UserContext';\n\nconst Login = () => {\n    const {\n        setUser,\n        setHeaders,\n        setIsLoggedIn,\n        loginMessage,\n        localStorageLogin,\n        setLoginMessage,\n        tokenSessionStorage,\n    } = useContext(UserContext);\n\n    //Refs for email and password input fields\n    let loginEmailRef = useRef(null);\n    let loginPasswordRef = useRef(null);\n\n    const [rememberUser, setRememberUser] = useState(null);\n\n    const isRememberUser = (e) => {\n        const checked = e.target.checked;\n        if (checked) {\n            setRememberUser(true);\n        } else {\n            setRememberUser(false);\n        }\n    };\n\n    //Toast Message\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n\n    //Login function\n    const loginFunction = () => {\n        if (\n            loginEmailRef.current.value !== '' &&\n            loginPasswordRef.current.value !== ''\n        ) {\n            //Save login data to an object so it can be passed down to API call\n            const data = {\n                url: 'auth/sign_in',\n                email: loginEmailRef.current.value,\n                password: loginPasswordRef.current.value,\n            };\n\n            //Message for logging in while waiting for API response\n            setMessage('Logging you in...');\n\n            //API call for creating new user session\n            userSessionAPI(data)\n                .then((res) => {\n                    setHeaders(res.headers);\n                    setUser(res.data.data);\n                    setMessage('Logged in!');\n                    setIsLoggedIn(true);\n                    console.log(res);\n\n                    if (rememberUser) {\n                        localStorageLogin(\n                            /* res.data.data, res.headers */ data\n                        );\n                        tokenSessionStorage(res.data.data, res.headers);\n                    }\n                })\n                .catch((err) => {\n                    if (err.response) {\n                        // Request made and server responded\n                        // console.log(err.response.data);\n                        // console.log(err.response.status);\n                        // console.log(err.response.headers);\n                        setHeaders('');\n                        setUser('');\n                        setMessage(err?.response.data.errors[0]);\n                        setTimeout(() => {\n                            setMessage(false);\n                        }, 3000);\n                    } else if (err.request) {\n                        // The request was made but no response was received\n                        console.log(err.request);\n                        setMessage('Server error, please try again.');\n                        setTimeout(() => {\n                            setMessage(false);\n                        }, 3000);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', err.message);\n                    }\n                });\n        } else {\n            setMessage('Please fill out the required fields');\n            setShowToast(true);\n        }\n    };\n\n    // Logged In\n    useEffect(() => {\n        const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\n        const sessionStorageUser = JSON.parse(sessionStorage.getItem('User'));\n        const sessionStorageHeaders = JSON.parse(\n            sessionStorage.getItem('Headers')\n        );\n\n        if (sessionStorageUser) {\n            setIsLoggedIn(true);\n            setHeaders(sessionStorageHeaders);\n            setUser(sessionStorageUser);\n        } else if (localStorageLoginUser) {\n            setLoginMessage('Logging you in...');\n\n            userSessionAPI(localStorageLoginUser)\n                .then((res) => {\n                    setHeaders(res.headers);\n                    setUser(res.data.data);\n                    setLoginMessage('Logged in!');\n                    setIsLoggedIn(true);\n                    tokenSessionStorage(res.data.data, res.headers);\n                })\n                .catch((err) => {\n                    if (err.response) {\n                        // Request made and server responded\n                        console.log(err.response.data);\n                        console.log(err.response.status);\n                        console.log(err.response.headers);\n                        setHeaders('');\n                        setUser('');\n                        setLoginMessage(err.response.data.errors[0]);\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                    } else if (err.request) {\n                        // The request was made but no response was received\n                        console.log(err.request);\n                        setLoginMessage('Server error, please try again.');\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', err.message);\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className=\"login-page\">\n            {showToast || message || loginMessage ? (\n                <Toast\n                    className=\"toast-message\"\n                    text={message || loginMessage}\n                />\n            ) : (\n                <></>\n            )}\n            {/* {isLoading ? <Loading /> : ''} */}\n            <Logo className=\"hero-logo\" />\n            <h2 className=\"login-title\">Let's go!</h2>\n            <p className=\"login-subtitle\">\n                Log in to your account and start connecting. Check check check.\n            </p>\n            <form\n                className=\"login-container\"\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(loginEmailRef.current.value);\n                    console.log(loginPasswordRef.current.value);\n                    loginFunction({});\n                }}\n            >\n                <label className=\"input-container\">\n                    <span>Email</span>\n                    <input\n                        type=\"email\"\n                        name=\"login-email\"\n                        id=\"login-email\"\n                        ref={loginEmailRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"login-password\"\n                        id=\"login-password\"\n                        ref={loginPasswordRef}\n                    />\n                </label>\n\n                <label className=\"checkbox-container\">\n                    <input\n                        type=\"checkbox\"\n                        name=\"remember-user\"\n                        id=\"remember-user\"\n                        onClick={(e) => {\n                            isRememberUser(e);\n                        }}\n                    />\n                    <span>Keep me logged in</span>\n                </label>\n                <Button type=\"submit\" text=\"Login\" className=\"button\" />\n            </form>\n\n            <div>\n                Don't have an account yet?{' '}\n                <NavLink className=\"hyperlink\" to=\"/signup\">\n                    Sign up here.\n                </NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport './login.css';\n\nconst Loginhero = () => {\n    return <div className=\"login-hero\"></div>;\n};\n\nexport default Loginhero;\n","import React, { useState, useRef } from 'react';\nimport Button from '../components/button/Button';\nimport { userSessionAPI } from '../api/API';\nimport { NavLink } from 'react-router-dom';\nimport './login.css';\nimport Toast from '../components/toast/Toast';\n\nconst Register = () => {\n    const registerEmailRef = useRef(null);\n    const registerPasswordRef = useRef(null);\n    const registerConfirmPasswordRef = useRef(null);\n\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n    const [showPassError, setShowPassError] = useState(false);\n\n    // const onRegister = () => {\n    //     handleError();\n\n    //     // const data = {\n    //     //     url: 'auth',\n    //     //     email: registerEmailRef.current.value,\n    //     //     password: registerPasswordRef.current.value,\n    //     //     password_confirmation: registerConfirmPasswordRef.current.value,\n    //     // };\n\n    //     // userSessionAPI(data)\n    //     //     .then((res) => {\n    //     //         setMessage('Registration Success');\n    //     //         setShowToast(true);\n    //     //         console.log('res', res);\n    //     //     })\n    //     //     .catch((err) => {\n    //     //         setMessage('Something went wrong. Please try again');\n    //     //         setShowToast(true);\n    //     //         console.log('err', err);\n    //     //     });\n    // };\n\n    const onRegister = () => {\n        if (\n            registerPasswordRef.current.value !==\n            registerConfirmPasswordRef.current.value\n        ) {\n            setMessage('Password did not match');\n            setShowPassError(true);\n            registerPasswordRef.current.focus();\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        } else if (registerPasswordRef.current.value.length < 6) {\n            setMessage('Password is too short');\n            setShowPassError(true);\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        } else if (\n            !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(\n                registerEmailRef.current.value\n            )\n        ) {\n            setMessage('Please enter valid email');\n            setShowPassError(true);\n            registerEmailRef.current.focus();\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        } else {\n            const data = {\n                url: 'auth',\n                email: registerEmailRef.current.value,\n                password: registerPasswordRef.current.value,\n                password_confirmation: registerConfirmPasswordRef.current.value,\n            };\n\n            userSessionAPI(data)\n                .then((res) => {\n                    setMessage('Registration Success');\n                    setShowToast(true);\n                    console.log('res', res);\n                })\n                .catch((err) => {\n                    setMessage('Something went wrong. Please try again');\n                    setShowToast(true);\n                    console.log('err', err);\n                });\n        }\n    };\n\n    return (\n        <div className=\"login-page\">\n            <h2 className=\"login-title\">Let's get started!</h2>\n            <p className=\"login-subtitle\">\n                Sign up for an account to connect with other people\n            </p>\n            <form\n                className=\"login-container\"\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    onRegister();\n                }}\n            >\n                <br />\n\n                <label className=\"input-container\">\n                    <span>Email</span>\n                    <input\n                        type=\"email\"\n                        name=\"register-email\"\n                        id=\"register-email\"\n                        ref={registerEmailRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"register-name\"\n                        min=\"6\"\n                        id=\"register-password\"\n                        ref={registerPasswordRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Confirm Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"register-name\"\n                        min=\"6\"\n                        id=\"register-passconfirm\"\n                        ref={registerConfirmPasswordRef}\n                    />\n                </label>\n\n                <Button text=\"Register\" type=\"submit\" className=\"button\" />\n            </form>\n            <div>\n                Already have an account?{' '}\n                <NavLink className=\"hyperlink\" to=\"/login\">\n                    Log in.\n                </NavLink>\n            </div>\n            {showToast || showPassError ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default Register;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport PrivateRoute from '../PrivateRoute';\nimport PublicRoute from '../PublicRoute';\nimport Login from './Login';\nimport Loginhero from './Loginhero';\nimport Register from './Register';\n\nconst LoginPage = () => {\n    return (\n        <div className=\"login-main-container\">\n            <Loginhero />\n            <Switch>\n                <PublicRoute\n                    component={Login}\n                    restricted={true}\n                    path=\"/login\"\n                    exact\n                />\n                <PublicRoute\n                    component={Register}\n                    restricted={true}\n                    path=\"/signup\"\n                    exact\n                />\n                <Route render={() => <Redirect to=\"/login\" />} />\n            </Switch>\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import './App.css';\nimport './login/login.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Main from './Main';\nimport PrivateRoute from './PrivateRoute';\nimport LoginPage from './login/LoginPage';\n\nfunction App() {\n    // // Logged In\n    // useEffect(() => {\n    //     const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\n\n    //     if (localStorageLoginUser) {\n    //         setLoginMessage('Logging you in...');\n\n    //         userSessionAPI(localStorageLoginUser)\n    //             .then((res) => {\n    //                 setHeaders(res.headers);\n    //                 setUser(res.data.data);\n    //                 setLoginMessage('Logged in!');\n    //                 setIsLoggedIn(true);\n    //             })\n    //             .catch((err) => {\n    //                 if (err.response) {\n    //                     // Request made and server responded\n    //                     console.log(err.response.data);\n    //                     console.log(err.response.status);\n    //                     console.log(err.response.headers);\n    //                     setHeaders('');\n    //                     setUser('');\n    //                     setLoginMessage(err.response.data.errors[0]);\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                 } else if (err.request) {\n    //                     // The request was made but no response was received\n    //                     console.log(err.request);\n    //                     setLoginMessage('Server error, please try again.');\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                 } else {\n    //                     // Something happened in setting up the request that triggered an Error\n    //                     console.log('Error', err.message);\n    //                 }\n    //             });\n    //     }\n    // }, []);\n\n    return (\n        <div className=\"App\">\n            {/* <Router> */}\n            <Switch>\n                <PrivateRoute\n                    component={Main}\n                    path={['/', '/:type/:id', '/new-message']}\n                    exact\n                />\n\n                <Route component={LoginPage} />\n            </Switch>\n            {/* </Router> */}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { UserProvider } from './context/UserContext';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n            <UserProvider>\n                <App />\n            </UserProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}