{"version":3,"sources":["api/API.js","context/UserContext.js","components/logo/Logo.js","components/pic/Pic.js","components/navbar/Navbar.js","components/button/Button.js","components/startchannel.svg","components/channel/ChannelList.js","components/beginchat.svg","components/contact/ContactList.js","components/search/Search.js","components/sidebar/Sidebar.js","components/loading/Loading.js","messages/ChatBubble.js","messages/ChannelInfoToggle.js","messages/ChatHeader.js","messages/MessageInput.js","components/newmessage.svg","components/search/NewMsgSearch.js","newmessage/NewMessage.js","components/nocontent.svg","messages/ScrollDown.js","messages/MessageSidebar.js","messages/Messages.js","components/toast/Toast.js","newchannel/SearchUser.js","newchannel/NewChannel.js","components/selectmessage.svg","Main.js","PrivateRoute.js","PublicRoute.js","login/Login.js","login/Loginhero.js","login/Register.js","login/LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","userSessionAPI","data","method","url","email","password","password_confirmation","getListsAPI","headers","client","expiry","uid","then","res","catch","err","getMessagesAPI","user_id","receiver_class","params","receiver_id","UserContext","createContext","UserProvider","children","useState","currentUser","setUser","currentHeaders","setHeaders","isLoggedIn","setIsLoggedIn","loginMessage","setLoginMessage","sidebarMode","setSidebarMode","channelList","setChannelList","allUsers","setAllUsers","contactList","setContactList","addUsers","setAddUsers","userIds","setUserIds","messages","setMessages","allChannelMessages","setAllChannelMessages","loadData","setLoadData","showModal","setShowModal","showContent","setShowContent","showChatInfo","setShowChatInfo","chatInfo","setChatInfo","chatName","setChatName","Provider","value","handleSetLoadData","logoutFunction","localStorage","setItem","sessionStorage","to","localStorageLogin","JSON","stringify","tokenSessionStorage","removeEmail","split","handleSetShowChatInfo","Logo","className","Pic","colorNumber","id","name","isChannel","isChip","colors","length","Math","floor","style","backgroundColor","charAt","toUpperCase","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Navbar","useContext","onClick","Button","text","type","ChannelList","displayRecentMsg","channel","i","sender","message","useEffect","channelRecentMsgRequest","parseInt","console","log","at","body","getRecentMsg","errors","src","StartChannel","map","index","activeClassName","ContactList","BeginChat","user","Search","placeholder","searchList","setSearchList","onChange","e","searchInput","target","searchFilter","filter","toLowerCase","includes","slice","Sidebar","Loading","ChatBubble","keyNum","time","date","Date","toLocaleTimeString","hour","minute","hour12","toLocaleDateString","ChannelInfoToggle","channelMembers","ChatHeader","MessageInput","newMsg","setNewMessageUser","messageInputRef","useRef","history","useHistory","sendMessage","current","sendMessageRequest","push","onSubmit","preventDefault","ref","NewMsgSearch","NewMessage","newMessageUser","ScrollDown","elementRef","scrollIntoView","MessageSidebar","Messages","useParams","messageRequest","getMessages","created_at","Nocontent","Toast","SearchUser","searchValue","setSearchValue","setMessage","showToast","setShowToast","setTimeout","addUser","NewChannel","channelNameRef","showError","onCreateChannel","user_ids","createChannelAPI","splice","deleteUser","temp_arr","dataset","newIdsList","temp_arr2","min","max","val","Main","channelListRequest","allUsersListRequest","contactListRequest","runAPI","basename","process","path","exact","Selectmessage","alt","component","PrivateRoute","Component","rest","render","props","PublicRoute","restricted","Login","loginEmailRef","loginPasswordRef","rememberUser","setRememberUser","localStorageLoginUser","parse","getItem","sessionStorageUser","sessionStorageHeaders","response","status","request","loginFunction","checked","isRememberUser","Loginhero","Register","registerEmailRef","registerPasswordRef","registerConfirmPasswordRef","showPassError","setShowPassError","handleError","focus","test","onRegister","LoginPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.569c7b85.chunk.js","sourcesContent":["import axios from 'axios';\n\n//Set default URL for the API\naxios.defaults.baseURL = 'https://slackapi.avionschool.com/api/v1/';\n\nexport const userSessionAPI = (data) => {\n    return axios({\n        method: 'post',\n        url: data.url,\n        data: {\n            email: data.email,\n            password: data.password,\n            password_confirmation: data.password_confirmation,\n        },\n    });\n};\n\nexport const getListsAPI = (data) => {\n    return axios({\n        method: 'GET',\n        url: data.url,\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const getMessagesAPI = (data) => {\n    return axios({\n        method: 'GET',\n        url: `messages?receiver_id=${data.user_id}&receiver_class=${data.receiver_class}`,\n        params: {\n            receiver_id: data.user_id,\n            receiver_class: data.receiver_class,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const createChannelAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: 'channels',\n        data: {\n            name: data.name,\n            user_ids: data.user_ids,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const sendMessageAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: data.url,\n        data: {\n            receiver_id: data.receiver_id,\n            receiver_class: data.receiver_class,\n            body: data.message,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    });\n};\n\nexport const addUserChannelAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: 'channel/add_member',\n        data: {\n            id: data.channel_id,\n            member_id: data.user_id,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    });\n};\n","import { createContext, useState } from 'react';\nimport { Redirect } from 'react-router';\n\n/* ------------------ How to access contents of useContext ------------------ */\n// 1. Go to your component file where you want to access the content.\n// 2. Type const { name of prop } = useContext(UserContext)\n\n/* ------------------------------- useContext ------------------------------- */\n//Creating a context can help pass down props to several child components without having to pass them down through every parent component.\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n    //Current user information\n    const [currentUser, setUser] = useState(null);\n\n    //Access tokens\n    const [currentHeaders, setHeaders] = useState(null);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [loginMessage, setLoginMessage] = useState('');\n\n    //Save user to local storage\n    const localStorageLogin = (data) => {\n        localStorage.setItem('User', JSON.stringify(data));\n    };\n\n    //Save user to local storage\n    const tokenSessionStorage = (data, headers) => {\n        sessionStorage.setItem('User', JSON.stringify(data));\n        sessionStorage.setItem('Headers', JSON.stringify(headers));\n    };\n\n    //Sidebar state\n    const [sidebarMode, setSidebarMode] = useState('dm');\n\n    //List of data\n    const [channelList, setChannelList] = useState('');\n    const [allUsers, setAllUsers] = useState('');\n    const [contactList, setContactList] = useState('');\n    const [addUsers, setAddUsers] = useState([]);\n    const [userIds, setUserIds] = useState([]);\n\n    //Messages\n    const [messages, setMessages] = useState();\n\n    //For recent messages\n    const [allChannelMessages, setAllChannelMessages] = useState([]);\n\n    //Will be used for useEffect for reloading data\n    const [loadData, setLoadData] = useState(false);\n\n    //Function for toggling data reload\n    const handleSetLoadData = () => {\n        setLoadData(!loadData);\n    };\n\n    //Logout function\n    const logoutFunction = () => {\n        localStorage.setItem('User', null);\n        sessionStorage.setItem('User', null);\n        sessionStorage.setItem('Headers', null);\n        setUser(null);\n        setHeaders(null);\n        setIsLoggedIn(false);\n        setLoginMessage('');\n        setSidebarMode('dm');\n        setShowContent(false);\n        return <Redirect to=\"/login\" />;\n    };\n\n    //Show new channel modal\n    const [showModal, setShowModal] = useState(false);\n\n    //Remove @___.___ from email\n    const removeEmail = (email) => {\n        return email.split('@')[0];\n    };\n    //For mobile devices, for showing main content\n    const [showContent, setShowContent] = useState(false);\n\n    //For message sidebars/options\n    const [showChatInfo, setShowChatInfo] = useState(false);\n    const handleSetShowChatInfo = () => {\n        setShowChatInfo((showChatInfo) => !showChatInfo);\n    };\n    const [chatInfo, setChatInfo] = useState({});\n    const [chatName, setChatName] = useState();\n\n    return (\n        <UserContext.Provider\n            value={{\n                currentUser,\n                setUser,\n                currentHeaders,\n                setHeaders,\n                isLoggedIn,\n                setIsLoggedIn,\n                loginMessage,\n                setLoginMessage,\n                sidebarMode,\n                setSidebarMode,\n                channelList,\n                setChannelList,\n                allUsers,\n                setAllUsers,\n                contactList,\n                setContactList,\n                allChannelMessages,\n                setAllChannelMessages,\n                loadData,\n                setLoadData,\n                handleSetLoadData,\n                logoutFunction,\n                localStorageLogin,\n                tokenSessionStorage,\n                showModal,\n                setShowModal,\n                removeEmail,\n                showContent,\n                setShowContent,\n                showChatInfo,\n                setShowChatInfo,\n                messages,\n                setMessages,\n                handleSetShowChatInfo,\n                userIds,\n                setUserIds,\n                addUsers,\n                setAddUsers,\n                chatInfo,\n                setChatInfo,\n                chatName,\n                setChatName,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n};\n","import React from 'react';\nimport './logo.css';\n\nconst Logo = ({ className }) => {\n    return (\n        <>\n            <h1 className={className}>\n                <span>t</span>\n                <span>:</span>\n                <span>l</span>\n                <span>k</span>\n            </h1>\n        </>\n    );\n};\n\nexport default Logo;\n","import React from 'react';\nimport './pic.css';\n\nconst Pic = ({ id, name, isChannel, isChip }) => {\n    const getInitial = () => {\n        let initialLetter = name.charAt(0);\n        return initialLetter.toUpperCase();\n    };\n\n    let colors = [\n        '#d43d2a',\n        '#ed8937',\n        '#d5b758',\n        '#9cb27a',\n        '#62ae9d',\n        '#2aa9be',\n    ];\n\n    let colorNumber;\n\n    const getColor = () => {\n        if (id === 0) {\n            return (colorNumber = 0);\n        } else if (id >= colors.length) {\n            return (colorNumber = Math.floor(id % colors.length));\n        } else if (id < colors.length) {\n            return (colorNumber = Math.floor(colors.length % id));\n        }\n    };\n\n    getColor();\n\n    return (\n        <div className=\"pic-container\">\n            <div\n                className={isChip ? 'chip-pic' : 'profile-pic'}\n                style={{\n                    backgroundColor: colors[colorNumber],\n                }}\n            >\n                {getInitial()}\n            </div>\n            {isChannel ? (\n                <div className=\"channel-pic-icon\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                        />\n                    </svg>\n                </div>\n            ) : (\n                ''\n            )}\n        </div>\n    );\n};\n\nexport default Pic;\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Logo from '../logo/Logo';\nimport Pic from '../pic/Pic';\nimport './navbar.css';\n\nconst Navbar = () => {\n    const { setSidebarMode, sidebarMode, currentUser } =\n        useContext(UserContext);\n\n    return (\n        <nav>\n            <Logo className=\"navbar-logo\" />\n            <div className=\"navlink-container\">\n                <button\n                    className={\n                        sidebarMode === 'dm'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => setSidebarMode('dm')}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z\"\n                        />\n                    </svg>\n                </button>\n                <button\n                    className={\n                        sidebarMode === 'channel'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => setSidebarMode('channel')}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                        />\n                    </svg>\n                </button>\n                <button\n                    className={\n                        sidebarMode === 'search'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => setSidebarMode('search')}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                        />\n                    </svg>\n                </button>\n            </div>\n            <button\n                className={\n                    sidebarMode === 'user'\n                        ? 'nav-link nav-link-active'\n                        : 'nav-link'\n                }\n                onClick={() => setSidebarMode('user')}\n            >\n                <Pic id={currentUser.id} name={currentUser.email} />\n            </button>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React, { Children } from 'react';\nimport './button.css';\n\nconst Button = ({ className, text, type, onClick }) => {\n    return (\n        <>\n            <button className={className} type={type} onClick={onClick}>\n                {text}\n            </button>\n        </>\n    );\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/startchannel.d76733b3.svg\";","import React, { useContext, useEffect, useState } from 'react';\nimport Pic from '../pic/Pic';\nimport './channellist.css';\nimport { default as StartChannel } from '../startchannel.svg';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport { getMessagesAPI } from '../../api/API';\n\nconst ChannelList = () => {\n    const {\n        channelList,\n        handleSetLoadData,\n        currentHeaders,\n        loadData,\n        removeEmail,\n        allChannelMessages,\n        setAllChannelMessages,\n        setShowContent,\n        setMessages,\n    } = useContext(UserContext);\n\n    // const [allChannelMessages, setAllChannelMessages] = useState([]);\n\n    const getRecentMsg = () => {\n        if (channelList) {\n            for (let i = 0; i < channelList.data?.data.length; i++) {\n                let channelRecentMsgRequest = {\n                    'access-token': currentHeaders['access-token'],\n                    client: currentHeaders.client,\n                    expiry: currentHeaders.expiry,\n                    uid: currentHeaders.uid,\n                    user_id: parseInt(channelList.data.data[i].id),\n                    receiver_class: 'Channel',\n                };\n\n                getMessagesAPI(channelRecentMsgRequest).then((res) => {\n                    if (res.data?.data.length > 0) {\n                        console.log('res', res);\n                        console.log(res.data.data.at(-1).body);\n                        setAllChannelMessages((allChannelMessages) => [\n                            ...allChannelMessages,\n                            {\n                                id: parseInt(channelList.data.data[i].id),\n                                message: res.data.data.at(-1).body,\n                                sender: res.data.data.at(-1).sender.email,\n                            },\n                        ]);\n                    } else {\n                        console.log('res', res);\n                        setAllChannelMessages((allChannelMessages) => [\n                            ...allChannelMessages,\n                            {\n                                id: parseInt(channelList.data.data[i].id),\n                                message: 'No messages',\n                                sender: null,\n                            },\n                        ]);\n                    }\n                });\n            }\n        }\n    };\n\n    const displayRecentMsg = (channel) => {\n        // console.log(allChannelMessages);\n\n        for (let i = 0; i < allChannelMessages.length; i++) {\n            if (channel.id === allChannelMessages[i].id) {\n                return (\n                    <div className=\"recent-message-container\">\n                        {allChannelMessages[i].sender ? (\n                            <span className=\"recent-message-sender\">\n                                {removeEmail(allChannelMessages[i].sender)}:\n                            </span>\n                        ) : (\n                            ''\n                        )}\n                        <span className=\"recent-message\">\n                            {allChannelMessages[i].message}\n                        </span>\n                    </div>\n                );\n            }\n        }\n    };\n\n    useEffect(() => {\n        getRecentMsg();\n    }, [loadData, currentHeaders]);\n\n    if (channelList.data.errors) {\n        return (\n            <div className=\"contact-container-empty\">\n                <img src={StartChannel} />\n                <span className=\"empty-title\">The more the merrier!</span>\n                <p>Create a new channel.</p>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"channel-container\">\n                {channelList.data.data.map((channel, index) => (\n                    <NavLink\n                        to={`/channel/${channel.id}`}\n                        className=\"channel-item\"\n                        key={index}\n                        activeClassName=\"selected-message\"\n                        onClick={() => {\n                            handleSetLoadData();\n                            setShowContent(true);\n                            /* setMessages(); */\n                        }}\n                    >\n                        <Pic\n                            id={channel.id}\n                            name={channel.name}\n                            isChannel={true}\n                        />\n                        <div className=\"inbox-info\">\n                            <span className=\"inbox-name\">{channel.name}</span>\n                            {displayRecentMsg(channel)}\n                        </div>\n                    </NavLink>\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default ChannelList;\n","export default __webpack_public_path__ + \"static/media/beginchat.fee9cb19.svg\";","import React, { useContext, useEffect, useState } from 'react';\nimport Pic from '../pic/Pic';\nimport './contactlist.css';\nimport { default as BeginChat } from '../beginchat.svg';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\n\nconst ContactList = () => {\n    const {\n        contactList,\n        handleSetLoadData,\n        removeEmail,\n        setShowContent,\n        setMessages,\n    } = useContext(UserContext);\n\n    if (contactList.data.data.length === 0) {\n        return (\n            <div className=\"contact-container-empty\">\n                <img src={BeginChat} />\n                <span className=\"empty-title\">Whew, there's nothing here.</span>\n                <p>Start a new conversation!</p>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"contact-container\">\n                {contactList.data.data.map((user, index) => (\n                    <NavLink\n                        to={`/user/${user.id}`}\n                        className=\"contact-item\"\n                        key={index}\n                        activeClassName=\"selected-message\"\n                        onClick={() => {\n                            handleSetLoadData();\n                            setShowContent(true);\n                            /* setMessages(); */\n                        }}\n                    >\n                        <Pic id={user.id} name={user.email} />\n                        <span>{user.email}</span>\n                    </NavLink>\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport './search.css';\n\nconst Search = ({ placeholder, type }) => {\n    const { channelList, allUsers, handleSetLoadData, setShowContent } =\n        useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        if (type === 'channel') {\n            const searchFilter = channelList.data.data.filter((channel) => {\n                return channel.name\n                    .toLowerCase()\n                    .includes(searchInput.toLowerCase());\n            });\n\n            if (searchInput === '') {\n                setSearchList([]);\n            } else {\n                setSearchList(searchFilter);\n            }\n        } else if (type === 'user') {\n            const searchFilter = allUsers.data.data.filter((user) => {\n                return user.email\n                    .toLowerCase()\n                    .includes(searchInput.toLowerCase());\n            });\n\n            if (searchInput === '') {\n                setSearchList([]);\n            } else {\n                setSearchList(searchFilter);\n            }\n        }\n    };\n\n    return (\n        <div className=\"search-container\">\n            <div className=\"search-input-container\">\n                <input\n                    type=\"text\"\n                    placeholder={placeholder}\n                    onChange={handleSearchList}\n                />\n            </div>\n            {searchList.length != 0 && (\n                <div className=\"search-results\">\n                    {type === 'channel' ? (\n                        <>\n                            {searchList.map((channel, index) => (\n                                <NavLink\n                                    className=\"search-item\"\n                                    to={`/channel/${channel.id}`}\n                                    key={index}\n                                    onClick={() => {\n                                        handleSetLoadData();\n                                        setShowContent(true);\n                                    }}\n                                >\n                                    <Pic\n                                        id={channel.id}\n                                        name={channel.name}\n                                        isChannel={true}\n                                    />\n                                    <span> {channel.name}</span>\n                                </NavLink>\n                            ))}\n                        </>\n                    ) : (\n                        <>\n                            {searchList.slice(0, 15).map((user, index) => (\n                                <NavLink\n                                    className=\"search-item\"\n                                    to={`/user/${user.id}`}\n                                    key={index}\n                                    onClick={() => {\n                                        handleSetLoadData();\n                                        setShowContent(true);\n                                    }}\n                                >\n                                    <Pic\n                                        id={user.id}\n                                        name={user.email}\n                                        isChannel={false}\n                                    />\n                                    <span> {user.email} </span>\n                                </NavLink>\n                            ))}\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Search;\n","import './sidebar.css';\nimport Button from '../button/Button';\nimport React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport ChannelList from '../channel/ChannelList';\nimport ContactList from '../contact/ContactList';\nimport { NavLink } from 'react-router-dom';\nimport Search from '../search/Search';\n\nconst Sidebar = () => {\n    // console.log('sidebar', currentHeaders);\n    // console.log('sidebar', allUsers);\n    // console.log('sidebar', contactList);\n    // console.log('sidebar', channelList);\n\n    const {\n        sidebarMode,\n        logoutFunction,\n        currentUser,\n        setShowModal,\n        setShowContent,\n    } = useContext(UserContext);\n\n    // const [showModal, setShowModal] = useState(false);\n\n    if (sidebarMode === 'dm') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Direct messages</h1>\n                <NavLink\n                    to=\"/new-message\"\n                    className=\"button\"\n                    onClick={() => setShowContent(true)}\n                >\n                    New message\n                </NavLink>\n                <ContactList />\n            </div>\n        );\n    } else if (sidebarMode === 'channel') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Channels</h1>\n\n                <Button\n                    className=\"button\"\n                    text=\"Add channel\"\n                    onClick={() => setShowModal(true)}\n                />\n\n                <ChannelList />\n            </div>\n        );\n    } else if (sidebarMode === 'search') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Search</h1>\n                <Search placeholder={'Search for a user'} type=\"user\" />\n            </div>\n        );\n    } else if (sidebarMode === 'user') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">User</h1>\n                <div className=\"user-container\">\n                    <Pic id={currentUser.id} name={currentUser.email} />\n                    <span className=\"user-email\">{currentUser.email}</span>\n                </div>\n                <Button\n                    onClick={logoutFunction}\n                    text=\"Logout\"\n                    className=\"button\"\n                />\n            </div>\n        );\n    }\n};\n\nexport default Sidebar;\n","import './loading.css';\nimport Logo from '../logo/Logo';\nimport React from 'react';\n\nconst Loading = () => {\n    return (\n        <div className=\"loading-container\">\n            <Logo className=\"loading-logo\" />\n        </div>\n    );\n};\n\nexport default Loading;\n","import React from 'react';\nimport Pic from '../components/pic/Pic';\nimport './messages.css';\n\nconst ChatBubble = ({ keyNum, className, id, name, message, time, type }) => {\n    const date = new Date(time);\n\n    const formattedTime = date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true,\n    });\n\n    const formattedDate = date.toLocaleDateString('en-US');\n\n    return (\n        <div className={className} key={keyNum}>\n            <div className=\"pic-message-container\">\n                <Pic id={id} name={name} />\n                <span className={`message-bubble-${type}`}>{message}</span>\n            </div>\n\n            <span className={`message-${type}-name`}>{name}</span>\n            {/* <span className=\"message-time\">\n                {formattedDate} {formattedTime}\n            </span> */}\n        </div>\n    );\n};\n\nexport default ChatBubble;\n","import React from 'react';\nimport { useContext } from 'react';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\n\nconst ChannelInfoToggle = ({ id, channelMembers }) => {\n    const { showChatInfo, setShowChatInfo, handleSetShowChatInfo } =\n        useContext(UserContext);\n\n    return (\n        <div\n            className=\"message-sidebar-toggle\"\n            onClick={() => {\n                handleSetShowChatInfo();\n                console.log(showChatInfo);\n            }}\n        >\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n            >\n                <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                />\n            </svg>\n        </div>\n    );\n};\n\nexport default ChannelInfoToggle;\n","import React, { useContext, useEffect, useState } from 'react';\nimport Button from '../components/button/Button';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChannelInfoToggle from './ChannelInfoToggle';\n\nconst ChatHeader = ({ type, id, messages, channelMembers }) => {\n    const { channelList, allUsers, loadData, setShowContent } =\n        useContext(UserContext);\n\n    const [chatInfo, setChatInfo] = useState();\n\n    useEffect(() => {\n        if (type === 'channel') {\n            channelList.data.data.map((channel) => {\n                if (channel.id === parseInt(id)) {\n                    setChatInfo({\n                        id: channel.id,\n                        name: channel.name,\n                        isChannel: true,\n                    });\n                }\n            });\n        } else if (type === 'user') {\n            allUsers.data.data.map((user) => {\n                if (user.id === parseInt(id)) {\n                    setChatInfo({\n                        id: user.id,\n                        name: user.email,\n                        isChannel: false,\n                    });\n                }\n            });\n        }\n    }, [loadData]);\n\n    return (\n        <>\n            {chatInfo ? (\n                <div className=\"chat-header\">\n                    <button\n                        className={'back-button'}\n                        onClick={() => setShowContent(false)}\n                    >\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-6 w-6\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                        >\n                            <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M15 19l-7-7 7-7\"\n                            />\n                        </svg>\n                    </button>\n                    <div className=\"header-name\">\n                        {!chatInfo.isChannel ? (\n                            <Pic\n                                id={chatInfo.id}\n                                name={chatInfo.name}\n                                isChannel={chatInfo.isChannel}\n                            />\n                        ) : (\n                            ''\n                        )}\n                        <h1\n                            className={\n                                !chatInfo.isChannel\n                                    ? 'chat-name chat-name-user'\n                                    : 'chat-name '\n                            }\n                        >\n                            {chatInfo.name}\n                        </h1>\n                    </div>\n\n                    <ChannelInfoToggle\n                        id={chatInfo.id}\n                        channelMembers={channelMembers}\n                    />\n                </div>\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ChatHeader;\n","import React, { useContext, useRef, useState } from 'react';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { sendMessageAPI } from '../api/API';\nimport Button from '../components/button/Button';\nimport { UserContext } from '../context/UserContext';\n\nconst MessageInput = ({ type, id, newMsg, setNewMessageUser }) => {\n    const { currentHeaders, handleSetLoadData } = useContext(UserContext);\n\n    let messageInputRef = useRef(null);\n    let history = useHistory();\n\n    const sendMessage = () => {\n        if (\n            (messageInputRef.current.value !== null ||\n                messageInputRef.current.value !== '') &&\n            id !== null\n        ) {\n            let sendMessageRequest = {\n                url: 'messages',\n                'access-token': currentHeaders['access-token'],\n                client: currentHeaders.client,\n                expiry: currentHeaders.expiry,\n                uid: currentHeaders.uid,\n                receiver_id: parseInt(id),\n                receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n                message: messageInputRef.current.value,\n            };\n\n            sendMessageAPI(sendMessageRequest)\n                .then((res) => {\n                    console.log('send message ', res);\n                    handleSetLoadData();\n                    messageInputRef.current.value = '';\n                })\n                .catch((err) => console.log(err));\n\n            if (\n                (messageInputRef.current.value !== null ||\n                    messageInputRef.current.value !== '') &&\n                newMsg &&\n                id !== null\n            ) {\n                history.push(`/user/${id}`);\n                setNewMessageUser();\n            }\n        }\n    };\n\n    return (\n        <form\n            className=\"message-input-container\"\n            onSubmit={(e) => {\n                e.preventDefault();\n                sendMessage();\n            }}\n        >\n            <label className=\"message-input\">\n                <input\n                    type=\"text\"\n                    name=\"message-input\"\n                    id=\"message-input\"\n                    placeholder=\"Type your message here...\"\n                    ref={messageInputRef}\n                />\n            </label>\n            <button type=\"submit\" className=\"send-button\">\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-6 w-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                >\n                    <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={1}\n                        d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                    />\n                </svg>\n            </button>\n        </form>\n    );\n};\n\nexport default MessageInput;\n","export default __webpack_public_path__ + \"static/media/newmessage.b249c0dd.svg\";","import React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport './search.css';\n\nconst NewMsgSearch = ({ setNewMessageUser }) => {\n    const { allUsers, handleSetLoadData } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n\n        const searchFilter = allUsers.data.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"newmsg-search-container\">\n                <span>To: </span>\n                <div className=\"newmsg-search-input-container\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"someone@example.com\"\n                        onChange={handleSearchList}\n                    />\n                </div>\n            </div>\n            {searchList.length != 0 && (\n                <div className=\"newmsg-search-results\">\n                    {searchList.slice(0, 15).map((user, index) => (\n                        <div\n                            className=\"newmsg-search-item\"\n                            key={index}\n                            onClick={() => {\n                                handleSetLoadData();\n                                setNewMessageUser(user);\n                            }}\n                        >\n                            <Pic\n                                id={user.id}\n                                name={user.email}\n                                isChannel={false}\n                            />\n                            <span>{user.email}</span>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default NewMsgSearch;\n","import React, { useContext } from 'react';\nimport { useParams } from 'react-router';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { getMessagesAPI } from '../api/API';\nimport Loading from '../components/loading/Loading';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChatBubble from '../messages/ChatBubble';\nimport ChatHeader from '../messages/ChatHeader';\nimport Newmessage from '../components/newmessage.svg';\nimport MessageInput from '../messages/MessageInput';\nimport Search from '../components/search/Search';\nimport NewMsgSearch from '../components/search/NewMsgSearch';\nimport './newmessages.css';\n\nconst NewMessage = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        channelList,\n        allUsers,\n        loadData,\n        showContent,\n        setShowContent,\n    } = useContext(UserContext);\n\n    /* const { type, id } = useParams(); */\n\n    const [newMessageUser, setNewMessageUser] = useState();\n\n    // const [chatInfo, setChatInfo] = useState();\n\n    // const getMessages = () => {\n    //     let messageRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         user_id: parseInt(id),\n    //         receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n    //     };\n\n    //     console.log(messageRequest);\n    //     getMessagesAPI(messageRequest).then((res) => {\n    //         console.log(res);\n    //         setMessages(res);\n    //     });\n    // };\n\n    return (\n        <div\n            className={\n                showContent\n                    ? 'main-content'\n                    : 'main-content main-content-closed'\n            }\n        >\n            <div className=\"new-messages-section\">\n                <div className=\"new-messages-header\">\n                    <div className=\"chat-header\">\n                        <button\n                            className={'back-button'}\n                            onClick={() => setShowContent(false)}\n                        >\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-6 w-6\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                            >\n                                <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M15 19l-7-7 7-7\"\n                                />\n                            </svg>\n                        </button>\n                        <h1 className=\"chat-name\">New message</h1>\n                    </div>\n                    {!newMessageUser ? (\n                        <NewMsgSearch setNewMessageUser={setNewMessageUser} />\n                    ) : (\n                        <div className=\"newmsg-search-container\">\n                            <span>To: </span>\n                            <div className=\"chip-container\">\n                                <Pic\n                                    id={newMessageUser.id}\n                                    name={newMessageUser.email}\n                                    isChip={true}\n                                />\n                                <span>{newMessageUser.email}</span>\n                                <div\n                                    className=\"delete-chip-button\"\n                                    onClick={() => setNewMessageUser()}\n                                >\n                                    ✕\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {/* \n            <div className=\"message-flex\">\n                <div className=\"messages-container\"></div>\n            </div> */}\n\n                <MessageInput\n                    type=\"User\"\n                    id={newMessageUser ? newMessageUser.id : null}\n                    newMsg={true}\n                    setNewMessageUser={setNewMessageUser}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NewMessage;\n","export default __webpack_public_path__ + \"static/media/nocontent.ebe2c5bc.svg\";","import React, { useRef, useEffect } from 'react';\n\nconst ScrollDown = () => {\n    const elementRef = useRef();\n\n    useEffect(() => {\n        elementRef.current.scrollIntoView();\n    });\n\n    return <div ref={elementRef}></div>;\n};\n\nexport default ScrollDown;\n","import React, { useEffect, useState } from 'react';\nimport { useContext } from 'react';\nimport { useParams } from 'react-router';\nimport { getListsAPI } from '../api/API';\nimport Button from '../components/button/Button';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChannelInfoToggle from './ChannelInfoToggle';\nimport ChatHeader from './ChatHeader';\n\nconst MessageSidebar = () => {\n    const {\n        allUsers,\n        currentHeaders,\n        handleSetShowChatInfo,\n        showChatInfo,\n        chatInfo,\n        loadData,\n        channelList,\n        chatName,\n    } = useContext(UserContext);\n\n    const [channelMembers, setChannelMembers] = useState();\n\n    /* const { type, id } = useParams(); */\n\n    // const [chatName, setChatName] = useState();\n\n    // useEffect(() => {\n    //     if (chatInfo.type === 'channel') {\n    //         channelList.data.data.map((channel) => {\n    //             if (channel.id === parseInt(chatInfo.id)) {\n    //                 setChatName({\n    //                     id: channel.id,\n    //                     name: channel.name,\n    //                     isChannel: true,\n    //                 });\n    //             }\n    //         });\n    //     } else if (chatInfo.type === 'user') {\n    //         allUsers.data.data.map((user) => {\n    //             if (user.id === parseInt(chatInfo.id)) {\n    //                 setChatName({\n    //                     id: user.id,\n    //                     name: user.email,\n    //                     isChannel: false,\n    //                 });\n    //             }\n    //         });\n    //     }\n    // }, [loadData]);\n\n    const getMemberIcons = () => {\n        let getMemberRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: `channels/${chatInfo.id}`,\n        };\n    };\n\n    //Make a function that gets all chat info\n    // let channelInfoRequest = {\n    //     url: `channels/${id}`,\n    //     'access-token': currentHeaders['access-token'],\n    //     client: currentHeaders.client,\n    //     expiry: currentHeaders.expiry,\n    //     uid: currentHeaders.uid,\n    // };\n\n    // getListsAPI(channelInfoRequest).then((res) => {\n    //     console.log('channel info response', res);\n    //     setChannelMembers(res.data?.data?.channel_members);\n    // });\n\n    return (\n        <div\n            className={\n                showChatInfo\n                    ? 'message-sidebar'\n                    : 'message-sidebar message-sidebar-closed'\n            }\n        >\n            <div className=\"modal-title\">\n                <span\n                    className=\"close-button\"\n                    onClick={() => handleSetShowChatInfo()}\n                >\n                    ✕\n                </span>\n                <h1>Test component</h1>\n                {chatName && (\n                    <Pic\n                        id={chatName.id}\n                        name={chatName?.name || 'none'}\n                        isChannel={chatName.isChannel}\n                    />\n                )}\n                <Button text={'Invite user'} className=\"button\" />\n            </div>\n        </div>\n    );\n};\n\nexport default MessageSidebar;\n","import React, { useContext, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { getMessagesAPI, getListsAPI } from '../api/API';\nimport Loading from '../components/loading/Loading';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChatBubble from './ChatBubble';\nimport ChatHeader from './ChatHeader';\nimport Nocontent from '../components/nocontent.svg';\nimport MessageInput from './MessageInput';\nimport ScrollDown from '../messages/ScrollDown';\nimport MessageSidebar from './MessageSidebar';\n\nconst Messages = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        channelList,\n        allUsers,\n        loadData,\n        showContent,\n        messages,\n        setMessages,\n        showChatInfo,\n        setChatInfo,\n        setChatName,\n    } = useContext(UserContext);\n\n    const { type, id } = useParams();\n\n    // const [messages, setMessages] = useState();\n    const [channelMembers, setChannelMembers] = useState();\n\n    // const [chatInfo, setChatInfo] = useState();\n\n    const sendMessageRef = useRef();\n    const endMessageRef = useRef(null);\n    const elementRef = useRef();\n\n    const getMessages = () => {\n        let messageRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            user_id: parseInt(id),\n            receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n        };\n\n        /* setChatInfo({\n            id: id,\n            type: type,\n        }); */\n\n        console.log('message request', messageRequest);\n        getMessagesAPI(messageRequest).then((res) => {\n            console.log('message request response', res);\n            setMessages(res);\n        });\n\n        // if (type === 'channel') {\n        //     let channelInfoRequest = {\n        //         url: `channels/${id}`,\n        //         'access-token': currentHeaders['access-token'],\n        //         client: currentHeaders.client,\n        //         expiry: currentHeaders.expiry,\n        //         uid: currentHeaders.uid,\n        //     };\n\n        //     getListsAPI(channelInfoRequest).then((res) => {\n        //         console.log('channel info response', res);\n        //         setChannelMembers(res.data?.data?.channel_members);\n        //     });\n        // }\n    };\n\n    const getChatName = () => {\n        if (type === 'channel') {\n            channelList.data.data.map((channel) => {\n                if (channel.id === parseInt(id)) {\n                    setChatName({\n                        id: channel.id,\n                        name: channel.name,\n                        isChannel: true,\n                    });\n                }\n            });\n        } else if (type === 'user') {\n            allUsers.data.data.map((user) => {\n                if (user.id === parseInt(id)) {\n                    setChatName({\n                        id: user.id,\n                        name: user.email,\n                        isChannel: false,\n                    });\n                }\n            });\n        }\n    };\n\n    // const getChatInfo = () => {\n    //     if (type === 'channel') {\n    //         for (let i = 0; i < channelList.length; i++) {\n    //             if (parseInt(id) === channelList.data.data[i].id) {\n    //                 setChatInfo({\n    //                     id: channelList.data.data[i].id,\n    //                     name: channelList.data.data[i].name,\n    //                     isChannel: true,\n    //                 });\n    //                 console.log('get ' + chatInfo);\n    //             }\n    //         }\n    //         console.log('hindi kinuha channel' + chatInfo);\n    //     } else if (type === 'user') {\n    //         for (let i = 0; i < allUsers.length; i++) {\n    //             if (parseInt(id) === allUsers.data.data[i].id) {\n    //                 setChatInfo({\n    //                     id: allUsers.data.data[i].id,\n    //                     name: allUsers.data.data[i].email,\n    //                     isChannel: false,\n    //                 });\n    //                 console.log('get ' + chatInfo);\n    //             }\n    //         }\n    //         console.log(allUsers);\n    //         console.log('hindi kinuha users' + chatInfo);\n    //     }\n    // };\n\n    // getChatInfo();\n\n    useEffect(() => {\n        getMessages();\n        getChatName();\n        // getChatInfo();\n    }, [loadData /* , messages, currentHeaders */]);\n\n    if (!messages) {\n        return <Loading />;\n    } else {\n        return (\n            <div\n                className={\n                    showContent\n                        ? 'main-content'\n                        : 'main-content main-content-closed'\n                }\n            >\n                <div className='messages-section'>\n                    {messages ? (\n                        <>\n                            <ChatHeader\n                                type={type}\n                                id={id}\n                                messages={messages}\n                                channelMembers={channelMembers}\n                            />\n                            <div className='messages-content'>\n                                {messages.data?.data.length > 0 ? (\n                                    <div className='message-flex'>\n                                        <div className='messages-container'>\n                                            {messages.data.data.map(\n                                                (message, index) => {\n                                                    return message.sender.id !==\n                                                        currentUser.id ? (\n                                                        <ChatBubble\n                                                            keyNum={index}\n                                                            id={\n                                                                message.sender\n                                                                    .id\n                                                            }\n                                                            name={\n                                                                message.sender\n                                                                    .email\n                                                            }\n                                                            message={\n                                                                message.body\n                                                            }\n                                                            time={\n                                                                message.created_at\n                                                            }\n                                                            className='incoming-messages'\n                                                            type='sender'\n                                                        />\n                                                    ) : (\n                                                        <ChatBubble\n                                                            keyNum={index}\n                                                            id={\n                                                                message.sender\n                                                                    .id\n                                                            }\n                                                            name={\n                                                                message.sender\n                                                                    .email\n                                                            }\n                                                            message={\n                                                                message.body\n                                                            }\n                                                            time={\n                                                                message.created_at\n                                                            }\n                                                            className='outgoing-messages'\n                                                            type='user'\n                                                        />\n                                                    );\n                                                }\n                                            )}\n                                            {/* <div ref={elementRef}></div> */}\n                                            <ScrollDown />\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div className='message-container-empty'>\n                                        <img src={Nocontent} />\n                                        <span className='empty-title'>\n                                            Be the first one to say hi!\n                                        </span>\n                                        <p>Send a message!</p>\n                                    </div>\n                                )}\n                            </div>\n                            <MessageInput type={type} id={id} />\n                        </>\n                    ) : (\n                        ''\n                    )}\n                </div>\n                {/* <div\n                    className={\n                        showChatInfo\n                            ? 'message-sidebar'\n                            : 'message-sidebar message-sidebar-closed'\n                    }\n                >\n                    <ChatHeader type={type} id={id} messages={messages} />\n                    <MessageSidebar />\n                    <h1>channel sidebar</h1>\n                </div> */}\n            </div>\n        );\n    }\n};\n\nexport default Messages;\n","import React from 'react';\nimport './toast.css';\n\nconst Toast = ({ className, text }) => {\n    return <div className={className}>{text}</div>;\n};\n\nexport default Toast;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport Pic from '../components/pic/Pic';\nimport '../newchannel/searchuser.css';\nimport { useRef } from 'react';\n\nimport Toast from '../components/toast/Toast';\n\nconst SearchUser = ({ type, placeholder }) => {\n    const {\n        currentHeaders,\n        allUsers,\n        currentUser,\n        addUsers,\n        setAddUsers,\n        userIds,\n        setUserIds,\n    } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const [searchValue, setSearchValue] = useState('');\n\n    const [message, setMessage] = useState('');\n    const [showToast, setShowToast] = useState(false);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        setSearchValue(searchInput);\n        const searchFilter = allUsers.data?.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n    const addUser = (user) => {\n        if (addUsers.includes(user)) {\n            setShowToast(true);\n            setMessage('Please add another user');\n            setTimeout(() => {\n                setShowToast(false);\n            }, 1000);\n        } else {\n            setAddUsers([...addUsers, user]);\n            setUserIds([...userIds, user.id]);\n        }\n\n        console.log(addUsers);\n        console.log(userIds);\n    };\n\n    const clearSearchField = () => {\n        setSearchList([]);\n        setSearchValue('');\n    };\n\n    // const deleteUser = (e) => {\n    //     let temp_arr = [...addUsers];\n    //     temp_arr.splice(e.target.dataset.index, 1);\n\n    //     let temp_arr2 = [...userIds];\n    //     temp_arr2.splice(e.target.dataset.index, 1);\n    //     updateIndex(temp_arr, temp_arr2);\n    //     console.log(temp_arr);\n    //     console.log(temp_arr2);\n    // };\n\n    // const updateIndex = (newList, newIdsList) => {\n    //     setAddUsers(newList);\n    //     setUserIds(newIdsList);\n    // };\n\n    return (\n        <>\n            {showToast ? (\n                <Toast className='toast-message' text={message} />\n            ) : (\n                <></>\n            )}\n            <div className='input-container'>\n                <span>Add users</span>\n                <input\n                    type='text'\n                    placeholder={placeholder}\n                    onChange={handleSearchList}\n                    value={searchValue}\n                />\n            </div>\n            {searchList.length !== 0 && (\n                <div className='newchannel-search-results'>\n                    {searchList.slice(0, 5).map((user, index) => (\n                        <div\n                            className='newmsg-search-item'\n                            key={index}\n                            onClick={() => {\n                                addUser(user, index);\n                                clearSearchField();\n                            }}\n                        >\n                            <Pic id={user.id} name={user.email} isChip={true} />\n                            <span>{user.uid}</span>\n                        </div>\n                    ))}\n                </div>\n            )}\n            {/* <br />\n            <br />\n            <br /> */}\n            {/* <span>User List:</span> */}\n            {/* {addUsers.map((val, index) => {\n                return (\n                    <div className=\"select-chip-container\" key={index}>\n                        <Pic id={val.id} name={val.email} isChip={true} />\n                        <span>{val.email}</span>\n                        <div\n                            className=\"delete-chip-button\"\n                            data-index={index}\n                            onClick={(e) => deleteUser(e)}\n                        >\n                            ✕\n                        </div>\n                    </div>\n                );\n            })} */}\n        </>\n    );\n};\n\nexport default SearchUser;\n","import React, { useContext, useRef, useState } from 'react';\nimport Button from '../components/button/Button';\nimport { createChannelAPI } from '../api/API';\nimport axios from 'axios';\nimport Toast from '../components/toast/Toast';\nimport './newchannel.css';\nimport { UserContext } from '../context/UserContext';\nimport SearchUser from '../newchannel/SearchUser';\nimport Pic from '../components/pic/Pic';\n\nconst NewChannel = () => {\n    const {\n        currentHeaders,\n        setShowModal,\n        userIds,\n        addUsers,\n        setAddUsers,\n        setUserIds,\n    } = useContext(UserContext);\n\n    const channelNameRef = useRef();\n    // const userInputRef = useRef();\n\n    //Toast\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n\n    //Error Message\n    const [showError, setShowError] = useState(false);\n\n    const onCreateChannel = () => {\n        // if (channelNameRef.current.value.length > 15) {\n        //     setMessage('Channel Name too long');\n        //     setShowError(true);\n        //     setShowToast(false);\n        //     setTimeout(() => {\n        //         setShowError(false);\n        //     }, 3000);\n        //     channelNameRef.current.focus();\n        // } else if (channelNameRef.current.value.length < 3) {\n        //     setMessage('Channel Name too short');\n        //     setShowError(true);\n        //     setTimeout(() => {\n        //         setShowError(false);\n        //     }, 3000);\n        //     channelNameRef.current.focus();\n        // } else {\n        const data = {\n            name: channelNameRef.current.value,\n            user_ids: userIds,\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n        };\n        createChannelAPI(data)\n            .then((res) => {\n                if (res.data.errors) {\n                    setMessage(res.data.errors[0]);\n                    setShowToast(true);\n                    setTimeout(() => {\n                        setShowToast(false);\n                    }, 3000);\n                } else {\n                    setMessage('Channel Created');\n                    setShowToast(true);\n                    setTimeout(() => {\n                        setShowToast(false);\n                        setShowModal(false);\n                    }, 1500);\n                    userIds.splice(0, userIds.length);\n                    addUsers.splice(0, addUsers.length);\n                    console.log(res);\n                }\n            })\n            .catch((err) => {\n                console.log('error', err);\n            });\n    };\n    const newFunction = () => {\n        setAddUsers([]);\n        setUserIds([]);\n        setShowModal(false);\n    };\n\n    const updateIndex = (newList, newIdsList) => {\n        setAddUsers(newList);\n        setUserIds(newIdsList);\n    };\n\n    const deleteUser = (e) => {\n        let temp_arr = [...addUsers];\n        temp_arr.splice(e.target.dataset.index, 1);\n\n        let temp_arr2 = [...userIds];\n        temp_arr2.splice(e.target.dataset.index, 1);\n        updateIndex(temp_arr, temp_arr2);\n        console.log(temp_arr);\n        console.log(temp_arr2);\n    };\n\n    return (\n        <div className=\"channel-modal-container\">\n            <form className=\"channel-modal\">\n                <div className=\"modal-upperhalf\">\n                    <div className=\"modal-title\">\n                        <span\n                            className=\"close-button\"\n                            onClick={() => newFunction()}\n                        >\n                            ✕\n                        </span>\n                        <h1 className=\"sidebar-title\">Create a channel</h1>\n                    </div>\n                    <div className=\"newchannel-inputs-container\">\n                        <label className=\"input-container\">\n                            <span>Channel Name</span>\n\n                            <input\n                                type=\"text\"\n                                min=\"3\"\n                                max=\"15\"\n                                ref={channelNameRef}\n                            ></input>\n                        </label>\n                        {/* <label className='input-container'>\n                    <span>Input user IDs</span>\n                    {<input type='text' ref={userInputRef}></input>}\n                </label> */}\n                        {<SearchUser />}\n                    </div>\n                </div>\n                <span className=\"newchannel-chips-container-label\">\n                    Users to be added to the channel\n                </span>\n                <div className=\"newchannel-chips-container\">\n                    {addUsers.map((val, index) => {\n                        return (\n                            <div className=\"select-chip-container\" key={index}>\n                                <Pic\n                                    id={val.id}\n                                    name={val.email}\n                                    isChip={true}\n                                />\n                                <span>{val.email}</span>\n                                <div\n                                    className=\"delete-chip-button\"\n                                    data-index={index}\n                                    onClick={(e) => deleteUser(e)}\n                                >\n                                    ✕\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n\n                <Button\n                    className=\"button\"\n                    type=\"submit\"\n                    text=\"Create Channel\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        onCreateChannel();\n                    }}\n                />\n            </form>\n            {showToast || showError ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default NewChannel;\n","export default __webpack_public_path__ + \"static/media/selectmessage.d806d655.svg\";","import React, { useEffect, useContext } from 'react';\nimport { getListsAPI } from './api/API';\nimport Navbar from './components/navbar/Navbar';\nimport Sidebar from './components/sidebar/Sidebar';\nimport Loading from './components/loading/Loading';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NewMessage from './newmessage/NewMessage';\nimport Messages from './messages/Messages';\nimport { UserContext } from './context/UserContext';\nimport NewChannel from './newchannel/NewChannel';\nimport Selectmessage from './components/selectmessage.svg';\nimport MessageSidebar from './messages/MessageSidebar';\n\nconst Main = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        setChannelList,\n        setAllUsers,\n        setContactList,\n        allUsers,\n        channelList,\n        contactList,\n        showModal,\n        setShowModal,\n        loadData,\n        removeEmail,\n        showContent,\n        showChatInfo,\n    } = useContext(UserContext);\n\n    const runAPI = () => {\n        let channelListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'channels',\n        };\n\n        let allUsersListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'users',\n        };\n\n        let contactListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'users/recent',\n        };\n\n        getListsAPI(channelListRequest)\n            .then((res) => {\n                console.log('channels r', res);\n                console.log('channels', channelList);\n                setChannelList(res);\n            })\n            .catch((err) => console.log(err));\n\n        getListsAPI(allUsersListRequest)\n            .then((res) => {\n                console.log('users r', res);\n                console.log('users', allUsers);\n                setAllUsers(res);\n            })\n            .catch((err) => console.log(err));\n\n        getListsAPI(contactListRequest)\n            .then((res) => {\n                console.log('contact r', res);\n                console.log('contact', contactList);\n                setContactList(res);\n            })\n            .catch((err) => console.log(err));\n    };\n\n    useEffect(() => {\n        runAPI();\n    }, [loadData]);\n\n    // useState(() => {\n    //     let channelListRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: 'channels',\n    //     };\n\n    //     let allUsersListRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: 'users',\n    //     };\n\n    //     let contactListRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: 'users/recent/',\n    //     };\n\n    //     console.log('channelsReq', channelListRequest);\n    //     console.log('allusr', allUsersListRequest);\n    //     console.log('contr', contactListRequest);\n\n    //     getListsAPI(channelListRequest)\n    //         .then((res) => {\n    //             console.log('channels r', res);\n    //             console.log('channels', channelList);\n    //             setChannelList(res.data.data);\n    //         })\n    //         .catch((err) => console.log(err));\n\n    //     getListsAPI(allUsersListRequest)\n    //         .then((res) => {\n    //             console.log('users r', channelList);\n    //             console.log('users', allUsers);\n    //             console.log('channels r2', res);\n    //             console.log('channels2', channelList);\n    //             setAllUsers(res.data.data);\n    //         })\n    //         .catch((err) => console.log(err));\n\n    //     getListsAPI(contactListRequest)\n    //         .then((res) => {\n    //             console.log('contact r', channelList);\n    //             console.log('contact', contactList);\n    //             console.log('channels r3', res);\n    //             console.log('channels 3', channelList);\n    //             setContactList(res.data.data);\n    //         })\n    //         .catch((err) => console.log(err));\n    // }, [currentHeaders, channelList, allUsers, contactList]);\n\n    // //Logout function\n    // const logoutFunction = () => {\n    //     localStorage.setItem('User', null);\n    //     setUser(null);\n    //     setHeaders(null);\n    //     setIsLoggedIn(false);\n    //     setLoginMessage('');\n    //     setSidebarMode('dm');\n    // };\n\n    if (!channelList.data || !allUsers || !contactList) {\n        // setIsLoading(false);\n        return <Loading />;\n    }\n\n    // if (isLoading) {\n    // return <Loading />;\n    // }\n    else {\n        return (\n            <div className=\"app-container\">\n                {showModal ? (\n                    <NewChannel\n                        showModal={showModal}\n                        setShowModal={setShowModal}\n                    />\n                ) : null}\n                <Router basename={process.env.PUBLIC_URL}>\n                    <div\n                        className={\n                            showContent\n                                ? 'navigation-bars-container navigation-bars-container-closed'\n                                : 'navigation-bars-container '\n                        }\n                    >\n                        <Navbar />\n                        <Sidebar />\n                    </div>\n                    <Switch>\n                        <Route path=\"/\" exact>\n                            <div\n                                className={\n                                    !showContent\n                                        ? 'main-content main-content-closed'\n                                        : showChatInfo\n                                        ? 'main-content main-content-closed'\n                                        : 'main-content'\n                                }\n                            >\n                                <div className=\"message-container-empty\">\n                                    <img\n                                        src={Selectmessage}\n                                        alt=\"Welcome back\"\n                                    />\n                                    <span className=\"empty-title\">\n                                        Welcome back,{' '}\n                                        {removeEmail(currentUser.email)}!\n                                    </span>\n                                    <p>\n                                        Send a message or choose a contact to\n                                        get started.\n                                    </p>\n                                </div>\n                            </div>\n                        </Route>\n                        <Route path=\"/:type/:id\" component={Messages} />\n                        {/* <Messages />\n                    </Route> */}\n                        <Route\n                            exact\n                            path=\"/new-message\"\n                            component={NewMessage}\n                        />\n                        {/*   <NewMessage />\n                    </Route> */}\n                    </Switch>\n\n                    <MessageSidebar />\n                </Router>\n            </div>\n        );\n    }\n};\n\nexport default Main;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from './context/UserContext';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const { isLoggedIn } = useContext(UserContext);\n\n    return (\n        // Show the component only when the user is logged in\n        // Otherwise, redirect the user to /signin page\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn ? <Component {...props} /> : <Redirect to=\"/login\" />\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from './context/UserContext';\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n    const { isLoggedIn } = useContext(UserContext);\n\n    return (\n        // restricted = false meaning public route\n        // restricted = true meaning restricted route\n\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn && restricted ? (\n                    <Redirect to=\"/\" exact />\n                ) : (\n                    <Component {...props} />\n                )\n            }\n        />\n    );\n};\n\nexport default PublicRoute;\n","import axios from 'axios';\nimport { useEffect, useState, useRef, useContext } from 'react';\nimport { userSessionAPI } from '../api/API';\nimport { Router, Route, Switch, NavLink } from 'react-router-dom';\nimport Button from '../components/button/Button';\nimport Loading from '../components/loading/Loading';\nimport './login.css';\nimport Logo from '../components/logo/Logo';\nimport Toast from '../components/toast/Toast';\nimport { UserContext } from '../context/UserContext';\n\nconst Login = () => {\n    const {\n        setUser,\n        setHeaders,\n        setIsLoggedIn,\n        loginMessage,\n        localStorageLogin,\n        setLoginMessage,\n        tokenSessionStorage,\n    } = useContext(UserContext);\n\n    //Refs for email and password input fields\n    let loginEmailRef = useRef(null);\n    let loginPasswordRef = useRef(null);\n\n    const [rememberUser, setRememberUser] = useState(null);\n\n    const isRememberUser = (e) => {\n        const checked = e.target.checked;\n        if (checked) {\n            setRememberUser(true);\n        } else {\n            setRememberUser(false);\n        }\n    };\n\n    //Toast Message\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n\n    //Login function\n    const loginFunction = () => {\n        if (\n            loginEmailRef.current.value !== '' &&\n            loginPasswordRef.current.value !== ''\n        ) {\n            //Save login data to an object so it can be passed down to API call\n            const data = {\n                url: 'auth/sign_in',\n                email: loginEmailRef.current.value,\n                password: loginPasswordRef.current.value,\n            };\n\n            //Message for logging in while waiting for API response\n            setMessage('Logging you in...');\n\n            //API call for creating new user session\n            userSessionAPI(data)\n                .then((res) => {\n                    setHeaders(res.headers);\n                    setUser(res.data.data);\n                    setMessage('Logged in!');\n                    setIsLoggedIn(true);\n                    console.log(res);\n\n                    if (rememberUser) {\n                        localStorageLogin(\n                            /* res.data.data, res.headers */ data\n                        );\n                        tokenSessionStorage(res.data.data, res.headers);\n                    }\n                })\n                .catch((err) => {\n                    if (err.response) {\n                        // Request made and server responded\n                        // console.log(err.response.data);\n                        // console.log(err.response.status);\n                        // console.log(err.response.headers);\n                        setHeaders('');\n                        setUser('');\n                        setMessage(err?.response.data.errors[0]);\n                        setTimeout(() => {\n                            setMessage(false);\n                        }, 3000);\n                    } else if (err.request) {\n                        // The request was made but no response was received\n                        console.log(err.request);\n                        setMessage('Server error, please try again.');\n                        setTimeout(() => {\n                            setMessage(false);\n                        }, 3000);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', err.message);\n                    }\n                });\n        } else {\n            setMessage('Please fill out the required fields');\n            setShowToast(true);\n        }\n    };\n\n    // Logged In\n    useEffect(() => {\n        const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\n        const sessionStorageUser = JSON.parse(sessionStorage.getItem('User'));\n        const sessionStorageHeaders = JSON.parse(\n            sessionStorage.getItem('Headers')\n        );\n\n        if (sessionStorageUser) {\n            setIsLoggedIn(true);\n            setHeaders(sessionStorageHeaders);\n            setUser(sessionStorageUser);\n        } else if (localStorageLoginUser) {\n            setLoginMessage('Logging you in...');\n\n            userSessionAPI(localStorageLoginUser)\n                .then((res) => {\n                    setHeaders(res.headers);\n                    setUser(res.data.data);\n                    setLoginMessage('Logged in!');\n                    setIsLoggedIn(true);\n                    tokenSessionStorage(res.data.data, res.headers);\n                })\n                .catch((err) => {\n                    if (err.response) {\n                        // Request made and server responded\n                        console.log(err.response.data);\n                        console.log(err.response.status);\n                        console.log(err.response.headers);\n                        setHeaders('');\n                        setUser('');\n                        setLoginMessage(err.response.data.errors[0]);\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                    } else if (err.request) {\n                        // The request was made but no response was received\n                        console.log(err.request);\n                        setLoginMessage('Server error, please try again.');\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', err.message);\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className=\"login-page\">\n            {showToast || message || loginMessage ? (\n                <Toast\n                    className=\"toast-message\"\n                    text={message || loginMessage}\n                />\n            ) : (\n                <></>\n            )}\n            {/* {isLoading ? <Loading /> : ''} */}\n            <Logo className=\"hero-logo\" />\n            <h2 className=\"login-title\">Let's go!</h2>\n            <p className=\"login-subtitle\">\n                Log in to your account and start connecting. Check check check.\n            </p>\n            <form\n                className=\"login-container\"\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(loginEmailRef.current.value);\n                    console.log(loginPasswordRef.current.value);\n                    loginFunction({});\n                }}\n            >\n                <label className=\"input-container\">\n                    <span>Email</span>\n                    <input\n                        type=\"email\"\n                        name=\"login-email\"\n                        id=\"login-email\"\n                        ref={loginEmailRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"login-password\"\n                        id=\"login-password\"\n                        ref={loginPasswordRef}\n                    />\n                </label>\n\n                <label className=\"checkbox-container\">\n                    <input\n                        type=\"checkbox\"\n                        name=\"remember-user\"\n                        id=\"remember-user\"\n                        onClick={(e) => {\n                            isRememberUser(e);\n                        }}\n                    />\n                    <span>Keep me logged in</span>\n                </label>\n                <Button type=\"submit\" text=\"Login\" className=\"button\" />\n            </form>\n\n            <div>\n                Don't have an account yet?{' '}\n                <NavLink className=\"hyperlink\" to=\"/signup\">\n                    Sign up here.\n                </NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport './login.css';\n\nconst Loginhero = () => {\n    return <div className=\"login-hero\"></div>;\n};\n\nexport default Loginhero;\n","import React, { useState, useRef } from 'react';\nimport Button from '../components/button/Button';\nimport axios from 'axios';\nimport { userSessionAPI } from '../api/API';\nimport { Route, Switch, NavLink } from 'react-router-dom';\nimport './login.css';\nimport Toast from '../components/toast/Toast';\n\nconst Register = () => {\n    const registerEmailRef = useRef(null);\n    const registerPasswordRef = useRef(null);\n    const registerConfirmPasswordRef = useRef(null);\n\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n    const [showPassError, setShowPassError] = useState(false);\n\n    const onRegister = () => {\n        handleError();\n\n        const data = {\n            url: 'auth',\n            email: registerEmailRef.current.value,\n            password: registerPasswordRef.current.value,\n            password_confirmation: registerConfirmPasswordRef.current.value,\n        };\n\n        userSessionAPI(data)\n            .then((res) => {\n                setMessage('Registration Success');\n                setShowToast(true);\n                console.log('res', res);\n            })\n            .catch((err) => {\n                setMessage('Something went wrong. Please try again');\n                setShowToast(true);\n                console.log('err', err);\n            });\n    };\n\n    const handleError = () => {\n        if (\n            registerPasswordRef.current.value !==\n            registerConfirmPasswordRef.current.value\n        ) {\n            setMessage('Password did not match');\n            setShowPassError(true);\n            registerPasswordRef.current.focus();\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        }\n        if (registerPasswordRef.current.value.length < 6) {\n            setMessage('Password is too short');\n            setShowPassError(true);\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        }\n        if (\n            !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(\n                registerEmailRef.current.value\n            )\n        ) {\n            setMessage('Please enter valid email');\n            setShowPassError(true);\n            registerEmailRef.current.focus();\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        }\n    };\n\n    return (\n        <div className=\"login-page\">\n            <h2 className=\"login-title\">Let's get started!</h2>\n            <p className=\"login-subtitle\">\n                Sign up for an account to connect with other people\n            </p>\n            <form\n                className=\"login-container\"\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    onRegister();\n                }}\n            >\n                <br />\n\n                <label className=\"input-container\">\n                    <span>Email</span>\n                    <input\n                        type=\"email\"\n                        name=\"register-email\"\n                        id=\"register-email\"\n                        ref={registerEmailRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"register-name\"\n                        min=\"6\"\n                        id=\"register-password\"\n                        ref={registerPasswordRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Confirm Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"register-name\"\n                        min=\"6\"\n                        id=\"register-passconfirm\"\n                        ref={registerConfirmPasswordRef}\n                    />\n                </label>\n\n                <Button text=\"Register\" type=\"submit\" className=\"button\" />\n            </form>\n            <div>\n                Already have an account? <NavLink to=\"/login\">Log in.</NavLink>\n            </div>\n            {showToast || showPassError ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default Register;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport PrivateRoute from '../PrivateRoute';\nimport PublicRoute from '../PublicRoute';\nimport Login from './Login';\nimport Loginhero from './Loginhero';\nimport Register from './Register';\n\nconst LoginPage = () => {\n    return (\n        <div className=\"login-main-container\">\n            <Loginhero />\n            <Switch>\n                <PublicRoute\n                    component={Login}\n                    restricted={true}\n                    path=\"/login\"\n                    exact\n                />\n                <PublicRoute\n                    component={Register}\n                    restricted={true}\n                    path=\"/signup\"\n                    exact\n                />\n                <Route render={() => <Redirect to=\"/login\" />} />\n            </Switch>\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import './App.css';\nimport './login/login.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Main from './Main';\nimport PrivateRoute from './PrivateRoute';\nimport LoginPage from './login/LoginPage';\n\nfunction App() {\n    // // Logged In\n    // useEffect(() => {\n    //     const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\n\n    //     if (localStorageLoginUser) {\n    //         setLoginMessage('Logging you in...');\n\n    //         userSessionAPI(localStorageLoginUser)\n    //             .then((res) => {\n    //                 setHeaders(res.headers);\n    //                 setUser(res.data.data);\n    //                 setLoginMessage('Logged in!');\n    //                 setIsLoggedIn(true);\n    //             })\n    //             .catch((err) => {\n    //                 if (err.response) {\n    //                     // Request made and server responded\n    //                     console.log(err.response.data);\n    //                     console.log(err.response.status);\n    //                     console.log(err.response.headers);\n    //                     setHeaders('');\n    //                     setUser('');\n    //                     setLoginMessage(err.response.data.errors[0]);\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                 } else if (err.request) {\n    //                     // The request was made but no response was received\n    //                     console.log(err.request);\n    //                     setLoginMessage('Server error, please try again.');\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                 } else {\n    //                     // Something happened in setting up the request that triggered an Error\n    //                     console.log('Error', err.message);\n    //                 }\n    //             });\n    //     }\n    // }, []);\n\n    return (\n        <div className=\"App\">\n            {/* <Router> */}\n            <Switch>\n                <PrivateRoute component={Main} path=\"/\" exact />\n\n                <Route component={LoginPage} />\n            </Switch>\n            {/* </Router> */}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { UserProvider } from './context/UserContext';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n            <UserProvider>\n                <App />\n            </UserProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}