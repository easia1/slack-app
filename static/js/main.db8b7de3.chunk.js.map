{"version":3,"sources":["api/API.js","components/button/Button.js","components/logo/Logo.js","components/loading/Loading.js","components/toast/Toast.js","context/UserContext.js","login/Login.js","login/Register.js","login/Loginhero.js","components/pic/Pic.js","components/startchannel.svg","components/channel/ChannelList.js","components/navbar/Navbar.js","components/beginchat.svg","components/contact/ContactList.js","newchannel/SearchUser.js","newchannel/NewChannel.js","components/search/Search.js","components/sidebar/Sidebar.js","messages/ChatBubble.js","messages/ChannelInfoToggle.js","messages/ChatHeader.js","messages/MessageInput.js","components/newmessage.svg","components/search/NewMsgSearch.js","newmessage/NewMessage.js","components/nocontent.svg","messages/ScrollDown.js","messages/MessageSidebar.js","messages/Messages.js","components/selectmessage.svg","Main.js","PrivateRoute.js","PublicRoute.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","userSessionAPI","data","method","url","email","password","password_confirmation","getListsAPI","headers","client","expiry","uid","then","res","catch","err","getMessagesAPI","user_id","receiver_class","params","receiver_id","Button","className","text","type","onClick","Logo","Loading","Toast","UserContext","createContext","UserProvider","children","useState","currentUser","setUser","currentHeaders","setHeaders","isLoggedIn","setIsLoggedIn","loginMessage","setLoginMessage","sidebarMode","setSidebarMode","channelList","setChannelList","allUsers","setAllUsers","contactList","setContactList","addUsers","setAddUsers","userIds","setUserIds","messages","setMessages","allChannelMessages","setAllChannelMessages","loadData","setLoadData","showModal","setShowModal","showContent","setShowContent","showChatInfo","setShowChatInfo","chatInfo","setChatInfo","chatName","setChatName","Provider","value","handleSetLoadData","logoutFunction","localStorage","setItem","sessionStorage","to","localStorageLogin","JSON","stringify","tokenSessionStorage","removeEmail","split","handleSetShowChatInfo","Login","useContext","loginEmailRef","useRef","loginPasswordRef","rememberUser","setRememberUser","message","setMessage","showToast","setShowToast","useEffect","localStorageLoginUser","parse","getItem","sessionStorageUser","sessionStorageHeaders","response","console","log","status","errors","setTimeout","request","onSubmit","e","preventDefault","current","loginFunction","name","id","ref","checked","target","isRememberUser","Register","registerEmailRef","registerPasswordRef","registerConfirmPasswordRef","showPassError","setShowPassError","handleError","focus","length","test","onRegister","min","Loginhero","Pic","colorNumber","isChannel","isChip","colors","Math","floor","style","backgroundColor","charAt","toUpperCase","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","ChannelList","displayRecentMsg","channel","i","sender","channelRecentMsgRequest","parseInt","at","body","getRecentMsg","src","StartChannel","map","index","activeClassName","Navbar","ContactList","BeginChat","user","SearchUser","placeholder","searchList","setSearchList","searchValue","setSearchValue","onChange","searchInput","searchFilter","filter","toLowerCase","includes","slice","addUser","NewChannel","channelNameRef","showError","onCreateChannel","user_ids","createChannelAPI","splice","deleteUser","temp_arr","dataset","newIdsList","temp_arr2","max","val","Search","Sidebar","ChatBubble","keyNum","time","date","Date","toLocaleTimeString","hour","minute","hour12","toLocaleDateString","ChannelInfoToggle","channelMembers","ChatHeader","MessageInput","newMsg","setNewMessageUser","messageInputRef","history","useHistory","sendMessage","sendMessageRequest","push","NewMsgSearch","NewMessage","newMessageUser","ScrollDown","elementRef","scrollIntoView","MessageSidebar","Messages","useParams","messageRequest","getMessages","created_at","Nocontent","Main","channelListRequest","allUsersListRequest","contactListRequest","runAPI","path","exact","Selectmessage","PrivateRoute","Component","component","rest","render","props","PublicRoute","restricted","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db8b7de3.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//Set default URL for the API\r\naxios.defaults.baseURL = 'https://slackapi.avionschool.com/api/v1/';\r\n\r\nexport const userSessionAPI = (data) => {\r\n    return axios({\r\n        method: 'post',\r\n        url: data.url,\r\n        data: {\r\n            email: data.email,\r\n            password: data.password,\r\n            password_confirmation: data.password_confirmation,\r\n        },\r\n    });\r\n};\r\n\r\nexport const getListsAPI = (data) => {\r\n    return axios({\r\n        method: 'GET',\r\n        url: data.url,\r\n        headers: {\r\n            'access-token': data['access-token'],\r\n            client: data.client,\r\n            expiry: data.expiry,\r\n            uid: data.uid,\r\n        },\r\n    })\r\n        .then((res) => res)\r\n        .catch((err) => err);\r\n};\r\n\r\nexport const getMessagesAPI = (data) => {\r\n    return axios({\r\n        method: 'GET',\r\n        url: `messages?receiver_id=${data.user_id}&receiver_class=${data.receiver_class}`,\r\n        params: {\r\n            receiver_id: data.user_id,\r\n            receiver_class: data.receiver_class,\r\n        },\r\n        headers: {\r\n            'access-token': data['access-token'],\r\n            client: data.client,\r\n            expiry: data.expiry,\r\n            uid: data.uid,\r\n        },\r\n    })\r\n        .then((res) => res)\r\n        .catch((err) => err);\r\n};\r\n\r\nexport const createChannelAPI = (data) => {\r\n    return axios({\r\n        method: 'POST',\r\n        url: 'channels',\r\n        data: {\r\n            name: data.name,\r\n            user_ids: data.user_ids,\r\n        },\r\n        headers: {\r\n            'access-token': data['access-token'],\r\n            client: data.client,\r\n            expiry: data.expiry,\r\n            uid: data.uid,\r\n        },\r\n    })\r\n        .then((res) => res)\r\n        .catch((err) => err);\r\n};\r\n\r\nexport const sendMessageAPI = (data) => {\r\n    return axios({\r\n        method: 'POST',\r\n        url: data.url,\r\n        data: {\r\n            receiver_id: data.receiver_id,\r\n            receiver_class: data.receiver_class,\r\n            body: data.message,\r\n        },\r\n        headers: {\r\n            'access-token': data['access-token'],\r\n            client: data.client,\r\n            expiry: data.expiry,\r\n            uid: data.uid,\r\n        },\r\n    });\r\n};\r\n\r\nexport const addUserChannelAPI = (data) => {\r\n    return axios({\r\n        method: 'POST',\r\n        url: 'channel/add_member',\r\n        data: {\r\n            id: data.channel_id,\r\n            member_id: data.user_id,\r\n        },\r\n        headers: {\r\n            'access-token': data['access-token'],\r\n            client: data.client,\r\n            expiry: data.expiry,\r\n            uid: data.uid,\r\n        },\r\n    });\r\n};\r\n","import React, { Children } from 'react';\r\nimport './button.css';\r\n\r\nconst Button = ({ className, text, type, onClick }) => {\r\n    return (\r\n        <>\r\n            <button className={className} type={type} onClick={onClick}>\r\n                {text}\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './logo.css';\r\n\r\nconst Logo = ({ className }) => {\r\n    return (\r\n        <>\r\n            <h1 className={className}>\r\n                <span>t</span>\r\n                <span>:</span>\r\n                <span>l</span>\r\n                <span>k</span>\r\n            </h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import './loading.css';\r\nimport Logo from '../logo/Logo';\r\nimport React from 'react';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <Logo className=\"loading-logo\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport './toast.css';\r\n\r\nconst Toast = ({ className, text }) => {\r\n    return <div className={className}>{text}</div>;\r\n};\r\n\r\nexport default Toast;\r\n","import { createContext, useState } from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\n/* ------------------ How to access contents of useContext ------------------ */\r\n// 1. Go to your component file where you want to access the content.\r\n// 2. Type const { name of prop } = useContext(UserContext)\r\n\r\n/* ------------------------------- useContext ------------------------------- */\r\n//Creating a context can help pass down props to several child components without having to pass them down through every parent component.\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    //Current user information\r\n    const [currentUser, setUser] = useState(null);\r\n\r\n    //Access tokens\r\n    const [currentHeaders, setHeaders] = useState(null);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [loginMessage, setLoginMessage] = useState('');\r\n\r\n    //Save user to local storage\r\n    const localStorageLogin = (data) => {\r\n        localStorage.setItem('User', JSON.stringify(data));\r\n    };\r\n\r\n    //Save user to local storage\r\n    const tokenSessionStorage = (data, headers) => {\r\n        sessionStorage.setItem('User', JSON.stringify(data));\r\n        sessionStorage.setItem('Headers', JSON.stringify(headers));\r\n    };\r\n\r\n    //Sidebar state\r\n    const [sidebarMode, setSidebarMode] = useState('dm');\r\n\r\n    //List of data\r\n    const [channelList, setChannelList] = useState('');\r\n    const [allUsers, setAllUsers] = useState('');\r\n    const [contactList, setContactList] = useState('');\r\n    const [addUsers, setAddUsers] = useState([]);\r\n    const [userIds, setUserIds] = useState([]);\r\n\r\n    //Messages\r\n    const [messages, setMessages] = useState();\r\n\r\n    //For recent messages\r\n    const [allChannelMessages, setAllChannelMessages] = useState([]);\r\n\r\n    //Will be used for useEffect for reloading data\r\n    const [loadData, setLoadData] = useState(false);\r\n\r\n    //Function for toggling data reload\r\n    const handleSetLoadData = () => {\r\n        setLoadData(!loadData);\r\n    };\r\n\r\n    //Logout function\r\n    const logoutFunction = () => {\r\n        localStorage.setItem('User', null);\r\n        sessionStorage.setItem('User', null);\r\n        sessionStorage.setItem('Headers', null);\r\n        setUser(null);\r\n        setHeaders(null);\r\n        setIsLoggedIn(false);\r\n        setLoginMessage('');\r\n        setSidebarMode('dm');\r\n        setShowContent(false);\r\n        return <Redirect to=\"/login\" />;\r\n    };\r\n\r\n    //Show new channel modal\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    //Remove @___.___ from email\r\n    const removeEmail = (email) => {\r\n        return email.split('@')[0];\r\n    };\r\n    //For mobile devices, for showing main content\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n    //For message sidebars/options\r\n    const [showChatInfo, setShowChatInfo] = useState(false);\r\n    const handleSetShowChatInfo = () => {\r\n        setShowChatInfo((showChatInfo) => !showChatInfo);\r\n    };\r\n    const [chatInfo, setChatInfo] = useState({});\r\n    const [chatName, setChatName] = useState();\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                currentUser,\r\n                setUser,\r\n                currentHeaders,\r\n                setHeaders,\r\n                isLoggedIn,\r\n                setIsLoggedIn,\r\n                loginMessage,\r\n                setLoginMessage,\r\n                sidebarMode,\r\n                setSidebarMode,\r\n                channelList,\r\n                setChannelList,\r\n                allUsers,\r\n                setAllUsers,\r\n                contactList,\r\n                setContactList,\r\n                allChannelMessages,\r\n                setAllChannelMessages,\r\n                loadData,\r\n                setLoadData,\r\n                handleSetLoadData,\r\n                logoutFunction,\r\n                localStorageLogin,\r\n                tokenSessionStorage,\r\n                showModal,\r\n                setShowModal,\r\n                removeEmail,\r\n                showContent,\r\n                setShowContent,\r\n                showChatInfo,\r\n                setShowChatInfo,\r\n                messages,\r\n                setMessages,\r\n                handleSetShowChatInfo,\r\n                userIds,\r\n                setUserIds,\r\n                addUsers,\r\n                setAddUsers,\r\n                chatInfo,\r\n                setChatInfo,\r\n                chatName,\r\n                setChatName,\r\n            }}\r\n        >\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n","import axios from 'axios';\r\nimport { useEffect, useState, useRef, useContext } from 'react';\r\nimport { userSessionAPI } from '../api/API';\r\nimport { Router, Route, Switch, NavLink } from 'react-router-dom';\r\nimport Button from '../components/button/Button';\r\nimport Loading from '../components/loading/Loading';\r\nimport './login.css';\r\nimport Logo from '../components/logo/Logo';\r\nimport Toast from '../components/toast/Toast';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst Login = () => {\r\n    const {\r\n        setUser,\r\n        setHeaders,\r\n        setIsLoggedIn,\r\n        loginMessage,\r\n        localStorageLogin,\r\n        setLoginMessage,\r\n        tokenSessionStorage,\r\n    } = useContext(UserContext);\r\n\r\n    //Refs for email and password input fields\r\n    let loginEmailRef = useRef(null);\r\n    let loginPasswordRef = useRef(null);\r\n\r\n    const [rememberUser, setRememberUser] = useState(null);\r\n\r\n    const isRememberUser = (e) => {\r\n        const checked = e.target.checked;\r\n        if (checked) {\r\n            setRememberUser(true);\r\n        } else {\r\n            setRememberUser(false);\r\n        }\r\n    };\r\n\r\n    //Toast Message\r\n    const [message, setMessage] = useState();\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    //Login function\r\n    const loginFunction = () => {\r\n        if (\r\n            loginEmailRef.current.value !== '' &&\r\n            loginPasswordRef.current.value !== ''\r\n        ) {\r\n            //Save login data to an object so it can be passed down to API call\r\n            const data = {\r\n                url: 'auth/sign_in',\r\n                email: loginEmailRef.current.value,\r\n                password: loginPasswordRef.current.value,\r\n            };\r\n\r\n            //Message for logging in while waiting for API response\r\n            setMessage('Logging you in...');\r\n\r\n            //API call for creating new user session\r\n            userSessionAPI(data)\r\n                .then((res) => {\r\n                    setHeaders(res.headers);\r\n                    setUser(res.data.data);\r\n                    setMessage('Logged in!');\r\n                    setIsLoggedIn(true);\r\n                    console.log(res);\r\n\r\n                    if (rememberUser) {\r\n                        localStorageLogin(\r\n                            /* res.data.data, res.headers */ data\r\n                        );\r\n                        tokenSessionStorage(res.data.data, res.headers);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    if (err.response) {\r\n                        // Request made and server responded\r\n                        // console.log(err.response.data);\r\n                        // console.log(err.response.status);\r\n                        // console.log(err.response.headers);\r\n                        setHeaders('');\r\n                        setUser('');\r\n                        setMessage(err?.response.data.errors[0]);\r\n                        setTimeout(() => {\r\n                            setMessage(false);\r\n                        }, 3000);\r\n                    } else if (err.request) {\r\n                        // The request was made but no response was received\r\n                        console.log(err.request);\r\n                        setMessage('Server error, please try again.');\r\n                        setTimeout(() => {\r\n                            setMessage(false);\r\n                        }, 3000);\r\n                    } else {\r\n                        // Something happened in setting up the request that triggered an Error\r\n                        console.log('Error', err.message);\r\n                    }\r\n                });\r\n        } else {\r\n            setMessage('Please fill out the required fields');\r\n            setShowToast(true);\r\n        }\r\n    };\r\n\r\n    // Logged In\r\n    useEffect(() => {\r\n        const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\r\n        const sessionStorageUser = JSON.parse(sessionStorage.getItem('User'));\r\n        const sessionStorageHeaders = JSON.parse(\r\n            sessionStorage.getItem('Headers')\r\n        );\r\n\r\n        if (sessionStorageUser) {\r\n            setIsLoggedIn(true);\r\n            setHeaders(sessionStorageHeaders);\r\n            setUser(sessionStorageUser);\r\n        } else if (localStorageLoginUser) {\r\n            setLoginMessage('Logging you in...');\r\n\r\n            userSessionAPI(localStorageLoginUser)\r\n                .then((res) => {\r\n                    setHeaders(res.headers);\r\n                    setUser(res.data.data);\r\n                    setLoginMessage('Logged in!');\r\n                    setIsLoggedIn(true);\r\n                    tokenSessionStorage(res.data.data, res.headers);\r\n                })\r\n                .catch((err) => {\r\n                    if (err.response) {\r\n                        // Request made and server responded\r\n                        console.log(err.response.data);\r\n                        console.log(err.response.status);\r\n                        console.log(err.response.headers);\r\n                        setHeaders('');\r\n                        setUser('');\r\n                        setLoginMessage(err.response.data.errors[0]);\r\n                        setTimeout(() => {\r\n                            setLoginMessage('');\r\n                        }, 3000);\r\n                        setTimeout(() => {\r\n                            setLoginMessage('');\r\n                        }, 3000);\r\n                    } else if (err.request) {\r\n                        // The request was made but no response was received\r\n                        console.log(err.request);\r\n                        setLoginMessage('Server error, please try again.');\r\n                        setTimeout(() => {\r\n                            setLoginMessage('');\r\n                        }, 3000);\r\n                    } else {\r\n                        // Something happened in setting up the request that triggered an Error\r\n                        console.log('Error', err.message);\r\n                    }\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className='login-page'>\r\n            {showToast || message || loginMessage ? (\r\n                <Toast\r\n                    className='toast-message'\r\n                    text={message || loginMessage}\r\n                />\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {/* {isLoading ? <Loading /> : ''} */}\r\n            <Logo className='hero-logo' />\r\n            <h2 className='login-title'>Let's go!</h2>\r\n            <p className='login-subtitle'>\r\n                Log in to your account and start connecting. Check check check.\r\n            </p>\r\n            <form\r\n                className='login-container'\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    console.log(loginEmailRef.current.value);\r\n                    console.log(loginPasswordRef.current.value);\r\n                    loginFunction({});\r\n                }}\r\n            >\r\n                <label className='input-container'>\r\n                    <span>Email</span>\r\n                    <input\r\n                        type='email'\r\n                        name='login-email'\r\n                        id='login-email'\r\n                        ref={loginEmailRef}\r\n                    />\r\n                </label>\r\n\r\n                <label className='input-container'>\r\n                    <span>Password</span>\r\n                    <input\r\n                        type='password'\r\n                        name='login-password'\r\n                        id='login-password'\r\n                        ref={loginPasswordRef}\r\n                    />\r\n                </label>\r\n\r\n                <label className='checkbox-container'>\r\n                    <input\r\n                        type='checkbox'\r\n                        name='remember-user'\r\n                        id='remember-user'\r\n                        onClick={(e) => {\r\n                            isRememberUser(e);\r\n                        }}\r\n                    />\r\n                    <span>Keep me logged in</span>\r\n                </label>\r\n                <Button type='submit' text='Login' className='button' />\r\n            </form>\r\n\r\n            <div>\r\n                Don't have an account yet?{' '}\r\n                <NavLink className='hyperlink' to='/slack-app/signup'>\r\n                    Sign up here.\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState, useRef } from 'react';\r\nimport Button from '../components/button/Button';\r\nimport axios from 'axios';\r\nimport { userSessionAPI } from '../api/API';\r\nimport { Route, Switch, NavLink } from 'react-router-dom';\r\nimport './login.css';\r\nimport Toast from '../components/toast/Toast';\r\n\r\nconst Register = () => {\r\n    const registerEmailRef = useRef(null);\r\n    const registerPasswordRef = useRef(null);\r\n    const registerConfirmPasswordRef = useRef(null);\r\n\r\n    const [message, setMessage] = useState();\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [showPassError, setShowPassError] = useState(false);\r\n\r\n    const onRegister = () => {\r\n        handleError();\r\n\r\n        const data = {\r\n            url: 'auth',\r\n            email: registerEmailRef.current.value,\r\n            password: registerPasswordRef.current.value,\r\n            password_confirmation: registerConfirmPasswordRef.current.value,\r\n        };\r\n\r\n        userSessionAPI(data)\r\n            .then((res) => {\r\n                setMessage('Registration Success');\r\n                setShowToast(true);\r\n                console.log('res', res);\r\n            })\r\n            .catch((err) => {\r\n                setMessage('Something went wrong. Please try again');\r\n                setShowToast(true);\r\n                console.log('err', err);\r\n            });\r\n    };\r\n\r\n    const handleError = () => {\r\n        if (\r\n            registerPasswordRef.current.value !==\r\n            registerConfirmPasswordRef.current.value\r\n        ) {\r\n            setMessage('Password did not match');\r\n            setShowPassError(true);\r\n            registerPasswordRef.current.focus();\r\n            setTimeout(() => {\r\n                setShowPassError(false);\r\n            }, 3000);\r\n        }\r\n        if (registerPasswordRef.current.value.length < 6) {\r\n            setMessage('Password is too short');\r\n            setShowPassError(true);\r\n            setTimeout(() => {\r\n                setShowPassError(false);\r\n            }, 3000);\r\n        }\r\n        if (\r\n            !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(\r\n                registerEmailRef.current.value\r\n            )\r\n        ) {\r\n            setMessage('Please enter valid email');\r\n            setShowPassError(true);\r\n            registerEmailRef.current.focus();\r\n            setTimeout(() => {\r\n                setShowPassError(false);\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-page\">\r\n            <h2 className=\"login-title\">Let's get started!</h2>\r\n            <p className=\"login-subtitle\">\r\n                Sign up for an account to connect with other people\r\n            </p>\r\n            <form\r\n                className=\"login-container\"\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    onRegister();\r\n                }}\r\n            >\r\n                <br />\r\n\r\n                <label className=\"input-container\">\r\n                    <span>Email</span>\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"register-email\"\r\n                        id=\"register-email\"\r\n                        ref={registerEmailRef}\r\n                    />\r\n                </label>\r\n\r\n                <label className=\"input-container\">\r\n                    <span>Password</span>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"register-name\"\r\n                        min=\"6\"\r\n                        id=\"register-password\"\r\n                        ref={registerPasswordRef}\r\n                    />\r\n                </label>\r\n\r\n                <label className=\"input-container\">\r\n                    <span>Confirm Password</span>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"register-name\"\r\n                        min=\"6\"\r\n                        id=\"register-passconfirm\"\r\n                        ref={registerConfirmPasswordRef}\r\n                    />\r\n                </label>\r\n\r\n                <Button text=\"Register\" type=\"submit\" className=\"button\" />\r\n            </form>\r\n            <div>\r\n                Already have an account?{' '}\r\n                <NavLink to=\"/slack-app/login\">Log in.</NavLink>\r\n            </div>\r\n            {showToast || showPassError ? (\r\n                <Toast className=\"toast-message\" text={message} />\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport './login.css';\r\n\r\nconst Loginhero = () => {\r\n    return <div className=\"login-hero\"></div>;\r\n};\r\n\r\nexport default Loginhero;\r\n","import React from 'react';\r\nimport './pic.css';\r\n\r\nconst Pic = ({ id, name, isChannel, isChip }) => {\r\n    const getInitial = () => {\r\n        let initialLetter = name.charAt(0);\r\n        return initialLetter.toUpperCase();\r\n    };\r\n\r\n    let colors = [\r\n        '#d43d2a',\r\n        '#ed8937',\r\n        '#d5b758',\r\n        '#9cb27a',\r\n        '#62ae9d',\r\n        '#2aa9be',\r\n    ];\r\n\r\n    let colorNumber;\r\n\r\n    const getColor = () => {\r\n        if (id === 0) {\r\n            return (colorNumber = 0);\r\n        } else if (id >= colors.length) {\r\n            return (colorNumber = Math.floor(id % colors.length));\r\n        } else if (id < colors.length) {\r\n            return (colorNumber = Math.floor(colors.length % id));\r\n        }\r\n    };\r\n\r\n    getColor();\r\n\r\n    return (\r\n        <div className=\"pic-container\">\r\n            <div\r\n                className={isChip ? 'chip-pic' : 'profile-pic'}\r\n                style={{\r\n                    backgroundColor: colors[colorNumber],\r\n                }}\r\n            >\r\n                {getInitial()}\r\n            </div>\r\n            {isChannel ? (\r\n                <div className=\"channel-pic-icon\">\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className=\"h-6 w-6\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                    >\r\n                        <path\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            strokeWidth={1}\r\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pic;\r\n","export default __webpack_public_path__ + \"static/media/startchannel.d76733b3.svg\";","import React, { useContext, useEffect, useState } from 'react';\r\nimport Pic from '../pic/Pic';\r\nimport './channellist.css';\r\nimport { default as StartChannel } from '../startchannel.svg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { getMessagesAPI } from '../../api/API';\r\n\r\nconst ChannelList = () => {\r\n    const {\r\n        channelList,\r\n        handleSetLoadData,\r\n        currentHeaders,\r\n        loadData,\r\n        removeEmail,\r\n        allChannelMessages,\r\n        setAllChannelMessages,\r\n        setShowContent,\r\n        setMessages,\r\n    } = useContext(UserContext);\r\n\r\n    // const [allChannelMessages, setAllChannelMessages] = useState([]);\r\n\r\n    const getRecentMsg = () => {\r\n        if (channelList) {\r\n            for (let i = 0; i < channelList.data?.data.length; i++) {\r\n                let channelRecentMsgRequest = {\r\n                    'access-token': currentHeaders['access-token'],\r\n                    client: currentHeaders.client,\r\n                    expiry: currentHeaders.expiry,\r\n                    uid: currentHeaders.uid,\r\n                    user_id: parseInt(channelList.data.data[i].id),\r\n                    receiver_class: 'Channel',\r\n                };\r\n\r\n                getMessagesAPI(channelRecentMsgRequest).then((res) => {\r\n                    if (res.data?.data.length > 0) {\r\n                        console.log('res', res);\r\n                        console.log(res.data.data.at(-1).body);\r\n                        setAllChannelMessages((allChannelMessages) => [\r\n                            ...allChannelMessages,\r\n                            {\r\n                                id: parseInt(channelList.data.data[i].id),\r\n                                message: res.data.data.at(-1).body,\r\n                                sender: res.data.data.at(-1).sender.email,\r\n                            },\r\n                        ]);\r\n                    } else {\r\n                        console.log('res', res);\r\n                        setAllChannelMessages((allChannelMessages) => [\r\n                            ...allChannelMessages,\r\n                            {\r\n                                id: parseInt(channelList.data.data[i].id),\r\n                                message: 'No messages',\r\n                                sender: null,\r\n                            },\r\n                        ]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const displayRecentMsg = (channel) => {\r\n        // console.log(allChannelMessages);\r\n\r\n        for (let i = 0; i < allChannelMessages.length; i++) {\r\n            if (channel.id === allChannelMessages[i].id) {\r\n                return (\r\n                    <div className=\"recent-message-container\">\r\n                        {allChannelMessages[i].sender ? (\r\n                            <span className=\"recent-message-sender\">\r\n                                {removeEmail(allChannelMessages[i].sender)}:\r\n                            </span>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <span className=\"recent-message\">\r\n                            {allChannelMessages[i].message}\r\n                        </span>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getRecentMsg();\r\n    }, [loadData, currentHeaders]);\r\n\r\n    if (channelList.data.errors) {\r\n        return (\r\n            <div className=\"contact-container-empty\">\r\n                <img src={StartChannel} />\r\n                <span className=\"empty-title\">The more the merrier!</span>\r\n                <p>Create a new channel.</p>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"channel-container\">\r\n                {channelList.data.data.map((channel, index) => (\r\n                    <NavLink\r\n                        to={`/channel/${channel.id}`}\r\n                        className=\"channel-item\"\r\n                        key={index}\r\n                        activeClassName=\"selected-message\"\r\n                        onClick={() => {\r\n                            handleSetLoadData();\r\n                            setShowContent(true);\r\n                            /* setMessages(); */\r\n                        }}\r\n                    >\r\n                        <Pic\r\n                            id={channel.id}\r\n                            name={channel.name}\r\n                            isChannel={true}\r\n                        />\r\n                        <div className=\"inbox-info\">\r\n                            <span className=\"inbox-name\">{channel.name}</span>\r\n                            {displayRecentMsg(channel)}\r\n                        </div>\r\n                    </NavLink>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ChannelList;\r\n","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport Logo from '../logo/Logo';\r\nimport Pic from '../pic/Pic';\r\nimport './navbar.css';\r\n\r\nconst Navbar = () => {\r\n    const { setSidebarMode, sidebarMode, currentUser } =\r\n        useContext(UserContext);\r\n\r\n    return (\r\n        <nav>\r\n            <Logo className=\"navbar-logo\" />\r\n            <div className=\"navlink-container\">\r\n                <button\r\n                    className={\r\n                        sidebarMode === 'dm'\r\n                            ? 'nav-link nav-link-active'\r\n                            : 'nav-link'\r\n                    }\r\n                    onClick={() => setSidebarMode('dm')}\r\n                >\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className=\"h-6 w-6\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                    >\r\n                        <path\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            strokeWidth={1}\r\n                            d=\"M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z\"\r\n                        />\r\n                    </svg>\r\n                </button>\r\n                <button\r\n                    className={\r\n                        sidebarMode === 'channel'\r\n                            ? 'nav-link nav-link-active'\r\n                            : 'nav-link'\r\n                    }\r\n                    onClick={() => setSidebarMode('channel')}\r\n                >\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className=\"h-6 w-6\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                    >\r\n                        <path\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            strokeWidth={1}\r\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\r\n                        />\r\n                    </svg>\r\n                </button>\r\n                <button\r\n                    className={\r\n                        sidebarMode === 'search'\r\n                            ? 'nav-link nav-link-active'\r\n                            : 'nav-link'\r\n                    }\r\n                    onClick={() => setSidebarMode('search')}\r\n                >\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className=\"h-6 w-6\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke=\"currentColor\"\r\n                    >\r\n                        <path\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                            strokeWidth={1}\r\n                            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n                        />\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n            <button\r\n                className={\r\n                    sidebarMode === 'user'\r\n                        ? 'nav-link nav-link-active'\r\n                        : 'nav-link'\r\n                }\r\n                onClick={() => setSidebarMode('user')}\r\n            >\r\n                <Pic id={currentUser.id} name={currentUser.email} />\r\n            </button>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","export default __webpack_public_path__ + \"static/media/beginchat.fee9cb19.svg\";","import React, { useContext, useEffect, useState } from 'react';\r\nimport Pic from '../pic/Pic';\r\nimport './contactlist.css';\r\nimport { default as BeginChat } from '../beginchat.svg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\n\r\nconst ContactList = () => {\r\n    const {\r\n        contactList,\r\n        handleSetLoadData,\r\n        removeEmail,\r\n        setShowContent,\r\n        setMessages,\r\n    } = useContext(UserContext);\r\n\r\n    if (contactList.data.data.length === 0) {\r\n        return (\r\n            <div className='contact-container-empty'>\r\n                <img src={BeginChat} />\r\n                <span className='empty-title'>Whew, there's nothing here.</span>\r\n                <p>Start a new conversation!</p>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className='contact-container'>\r\n                {contactList.data.data.map((user, index) => (\r\n                    <NavLink\r\n                        to={`/user/${user.id}`}\r\n                        className='contact-item'\r\n                        key={index}\r\n                        activeClassName='selected-message'\r\n                        onClick={() => {\r\n                            handleSetLoadData();\r\n                            setShowContent(true);\r\n                            /* setMessages(); */\r\n                        }}\r\n                    >\r\n                        <Pic id={user.id} name={user.email} />\r\n                        <span>{user.email}</span>\r\n                    </NavLink>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { UserContext } from '../context/UserContext';\r\nimport Pic from '../components/pic/Pic';\r\nimport '../newchannel/searchuser.css';\r\nimport { useRef } from 'react';\r\n\r\nimport Toast from '../components/toast/Toast';\r\n\r\nconst SearchUser = ({ type, placeholder }) => {\r\n    const {\r\n        currentHeaders,\r\n        allUsers,\r\n        currentUser,\r\n        addUsers,\r\n        setAddUsers,\r\n        userIds,\r\n        setUserIds,\r\n    } = useContext(UserContext);\r\n\r\n    const [searchList, setSearchList] = useState([]);\r\n\r\n    const [searchValue, setSearchValue] = useState('');\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    const handleSearchList = (e) => {\r\n        const searchInput = e.target.value;\r\n        setSearchValue(searchInput);\r\n        const searchFilter = allUsers.data?.data.filter((user) => {\r\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\r\n        });\r\n\r\n        if (searchInput === '') {\r\n            setSearchList([]);\r\n        } else {\r\n            setSearchList(searchFilter);\r\n        }\r\n    };\r\n    const addUser = (user) => {\r\n        if (addUsers.includes(user)) {\r\n            setShowToast(true);\r\n            setMessage('Please add another user');\r\n            setTimeout(() => {\r\n                setShowToast(false);\r\n            }, 1000);\r\n        } else {\r\n            setAddUsers([...addUsers, user]);\r\n            setUserIds([...userIds, user.id]);\r\n        }\r\n\r\n        console.log(addUsers);\r\n        console.log(userIds);\r\n    };\r\n\r\n    const clearSearchField = () => {\r\n        setSearchList([]);\r\n        setSearchValue('');\r\n    };\r\n\r\n    // const deleteUser = (e) => {\r\n    //     let temp_arr = [...addUsers];\r\n    //     temp_arr.splice(e.target.dataset.index, 1);\r\n\r\n    //     let temp_arr2 = [...userIds];\r\n    //     temp_arr2.splice(e.target.dataset.index, 1);\r\n    //     updateIndex(temp_arr, temp_arr2);\r\n    //     console.log(temp_arr);\r\n    //     console.log(temp_arr2);\r\n    // };\r\n\r\n    // const updateIndex = (newList, newIdsList) => {\r\n    //     setAddUsers(newList);\r\n    //     setUserIds(newIdsList);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            {showToast ? (\r\n                <Toast className='toast-message' text={message} />\r\n            ) : (\r\n                <></>\r\n            )}\r\n            <div className='input-container'>\r\n                <span>Add users</span>\r\n                <input\r\n                    type='text'\r\n                    placeholder={placeholder}\r\n                    onChange={handleSearchList}\r\n                    value={searchValue}\r\n                />\r\n            </div>\r\n            {searchList.length !== 0 && (\r\n                <div className='newchannel-search-results'>\r\n                    {searchList.slice(0, 5).map((user, index) => (\r\n                        <div\r\n                            className='newmsg-search-item'\r\n                            key={index}\r\n                            onClick={() => {\r\n                                addUser(user, index);\r\n                                clearSearchField();\r\n                            }}\r\n                        >\r\n                            <Pic id={user.id} name={user.email} isChip={true} />\r\n                            <span>{user.uid}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n            {/* <br />\r\n            <br />\r\n            <br /> */}\r\n            {/* <span>User List:</span> */}\r\n            {/* {addUsers.map((val, index) => {\r\n                return (\r\n                    <div className=\"select-chip-container\" key={index}>\r\n                        <Pic id={val.id} name={val.email} isChip={true} />\r\n                        <span>{val.email}</span>\r\n                        <div\r\n                            className=\"delete-chip-button\"\r\n                            data-index={index}\r\n                            onClick={(e) => deleteUser(e)}\r\n                        >\r\n                            ✕\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })} */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchUser;\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport Button from '../components/button/Button';\r\nimport { createChannelAPI } from '../api/API';\r\nimport axios from 'axios';\r\nimport Toast from '../components/toast/Toast';\r\nimport './newchannel.css';\r\nimport { UserContext } from '../context/UserContext';\r\nimport SearchUser from '../newchannel/SearchUser';\r\nimport Pic from '../components/pic/Pic';\r\n\r\nconst NewChannel = () => {\r\n    const {\r\n        currentHeaders,\r\n        setShowModal,\r\n        userIds,\r\n        addUsers,\r\n        setAddUsers,\r\n        setUserIds,\r\n    } = useContext(UserContext);\r\n\r\n    const channelNameRef = useRef();\r\n    // const userInputRef = useRef();\r\n\r\n    //Toast\r\n    const [message, setMessage] = useState();\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    //Error Message\r\n    const [showError, setShowError] = useState(false);\r\n\r\n    const onCreateChannel = () => {\r\n        // if (channelNameRef.current.value.length > 15) {\r\n        //     setMessage('Channel Name too long');\r\n        //     setShowError(true);\r\n        //     setShowToast(false);\r\n        //     setTimeout(() => {\r\n        //         setShowError(false);\r\n        //     }, 3000);\r\n        //     channelNameRef.current.focus();\r\n        // } else if (channelNameRef.current.value.length < 3) {\r\n        //     setMessage('Channel Name too short');\r\n        //     setShowError(true);\r\n        //     setTimeout(() => {\r\n        //         setShowError(false);\r\n        //     }, 3000);\r\n        //     channelNameRef.current.focus();\r\n        // } else {\r\n        const data = {\r\n            name: channelNameRef.current.value,\r\n            user_ids: userIds,\r\n            'access-token': currentHeaders['access-token'],\r\n            client: currentHeaders.client,\r\n            expiry: currentHeaders.expiry,\r\n            uid: currentHeaders.uid,\r\n        };\r\n        createChannelAPI(data)\r\n            .then((res) => {\r\n                if (res.data.errors) {\r\n                    setMessage(res.data.errors[0]);\r\n                    setShowToast(true);\r\n                    setTimeout(() => {\r\n                        setShowToast(false);\r\n                    }, 3000);\r\n                } else {\r\n                    setMessage('Channel Created');\r\n                    setShowToast(true);\r\n                    setTimeout(() => {\r\n                        setShowToast(false);\r\n                        setShowModal(false);\r\n                    }, 1500);\r\n                    userIds.splice(0, userIds.length);\r\n                    addUsers.splice(0, addUsers.length);\r\n                    console.log(res);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log('error', err);\r\n            });\r\n    };\r\n    const newFunction = () => {\r\n        setAddUsers([]);\r\n        setUserIds([]);\r\n        setShowModal(false);\r\n    };\r\n\r\n    const updateIndex = (newList, newIdsList) => {\r\n        setAddUsers(newList);\r\n        setUserIds(newIdsList);\r\n    };\r\n\r\n    const deleteUser = (e) => {\r\n        let temp_arr = [...addUsers];\r\n        temp_arr.splice(e.target.dataset.index, 1);\r\n\r\n        let temp_arr2 = [...userIds];\r\n        temp_arr2.splice(e.target.dataset.index, 1);\r\n        updateIndex(temp_arr, temp_arr2);\r\n        console.log(temp_arr);\r\n        console.log(temp_arr2);\r\n    };\r\n\r\n    return (\r\n        <div className=\"channel-modal-container\">\r\n            <form className=\"channel-modal\">\r\n                <div className=\"modal-upperhalf\">\r\n                    <div className=\"modal-title\">\r\n                        <span\r\n                            className=\"close-button\"\r\n                            onClick={() => newFunction()}\r\n                        >\r\n                            ✕\r\n                        </span>\r\n                        <h1 className=\"sidebar-title\">Create a channel</h1>\r\n                    </div>\r\n                    <div className=\"newchannel-inputs-container\">\r\n                        <label className=\"input-container\">\r\n                            <span>Channel Name</span>\r\n\r\n                            <input\r\n                                type=\"text\"\r\n                                min=\"3\"\r\n                                max=\"15\"\r\n                                ref={channelNameRef}\r\n                            ></input>\r\n                        </label>\r\n                        {/* <label className='input-container'>\r\n                    <span>Input user IDs</span>\r\n                    {<input type='text' ref={userInputRef}></input>}\r\n                </label> */}\r\n                        {<SearchUser />}\r\n                    </div>\r\n                </div>\r\n                <span className=\"newchannel-chips-container-label\">\r\n                    Users to be added to the channel\r\n                </span>\r\n                <div className=\"newchannel-chips-container\">\r\n                    {addUsers.map((val, index) => {\r\n                        return (\r\n                            <div className=\"select-chip-container\" key={index}>\r\n                                <Pic\r\n                                    id={val.id}\r\n                                    name={val.email}\r\n                                    isChip={true}\r\n                                />\r\n                                <span>{val.email}</span>\r\n                                <div\r\n                                    className=\"delete-chip-button\"\r\n                                    data-index={index}\r\n                                    onClick={(e) => deleteUser(e)}\r\n                                >\r\n                                    ✕\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n\r\n                <Button\r\n                    className=\"button\"\r\n                    type=\"submit\"\r\n                    text=\"Create Channel\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        onCreateChannel();\r\n                    }}\r\n                />\r\n            </form>\r\n            {showToast || showError ? (\r\n                <Toast className=\"toast-message\" text={message} />\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewChannel;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport Pic from '../pic/Pic';\r\nimport './search.css';\r\n\r\nconst Search = ({ placeholder, type }) => {\r\n    const { channelList, allUsers, handleSetLoadData, setShowContent } =\r\n        useContext(UserContext);\r\n\r\n    const [searchList, setSearchList] = useState([]);\r\n\r\n    const handleSearchList = (e) => {\r\n        const searchInput = e.target.value;\r\n        if (type === 'channel') {\r\n            const searchFilter = channelList.data.data.filter((channel) => {\r\n                return channel.name\r\n                    .toLowerCase()\r\n                    .includes(searchInput.toLowerCase());\r\n            });\r\n\r\n            if (searchInput === '') {\r\n                setSearchList([]);\r\n            } else {\r\n                setSearchList(searchFilter);\r\n            }\r\n        } else if (type === 'user') {\r\n            const searchFilter = allUsers.data.data.filter((user) => {\r\n                return user.email\r\n                    .toLowerCase()\r\n                    .includes(searchInput.toLowerCase());\r\n            });\r\n\r\n            if (searchInput === '') {\r\n                setSearchList([]);\r\n            } else {\r\n                setSearchList(searchFilter);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n            <div className=\"search-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={placeholder}\r\n                    onChange={handleSearchList}\r\n                />\r\n            </div>\r\n            {searchList.length != 0 && (\r\n                <div className=\"search-results\">\r\n                    {type === 'channel' ? (\r\n                        <>\r\n                            {searchList.map((channel, index) => (\r\n                                <NavLink\r\n                                    className=\"search-item\"\r\n                                    to={`/channel/${channel.id}`}\r\n                                    key={index}\r\n                                    onClick={() => {\r\n                                        handleSetLoadData();\r\n                                        setShowContent(true);\r\n                                    }}\r\n                                >\r\n                                    <Pic\r\n                                        id={channel.id}\r\n                                        name={channel.name}\r\n                                        isChannel={true}\r\n                                    />\r\n                                    <span> {channel.name}</span>\r\n                                </NavLink>\r\n                            ))}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {searchList.slice(0, 15).map((user, index) => (\r\n                                <NavLink\r\n                                    className=\"search-item\"\r\n                                    to={`/user/${user.id}`}\r\n                                    key={index}\r\n                                    onClick={() => {\r\n                                        handleSetLoadData();\r\n                                        setShowContent(true);\r\n                                    }}\r\n                                >\r\n                                    <Pic\r\n                                        id={user.id}\r\n                                        name={user.email}\r\n                                        isChannel={false}\r\n                                    />\r\n                                    <span> {user.email} </span>\r\n                                </NavLink>\r\n                            ))}\r\n                        </>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import './sidebar.css';\r\nimport Button from '../button/Button';\r\nimport React, { useContext, useState } from 'react';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport Pic from '../pic/Pic';\r\nimport ChannelList from '../channel/ChannelList';\r\nimport ContactList from '../contact/ContactList';\r\nimport { NavLink } from 'react-router-dom';\r\nimport NewChannel from '../../newchannel/NewChannel';\r\nimport { getMessagesAPI } from '../../api/API';\r\nimport Search from '../search/Search';\r\n\r\nconst Sidebar = () => {\r\n    // console.log('sidebar', currentHeaders);\r\n    // console.log('sidebar', allUsers);\r\n    // console.log('sidebar', contactList);\r\n    // console.log('sidebar', channelList);\r\n\r\n    const {\r\n        sidebarMode,\r\n        logoutFunction,\r\n        currentUser,\r\n        setShowModal,\r\n        channelList,\r\n        allUsers,\r\n        currentHeaders,\r\n        setShowContent,\r\n    } = useContext(UserContext);\r\n\r\n    // const [showModal, setShowModal] = useState(false);\r\n\r\n    if (sidebarMode === 'dm') {\r\n        return (\r\n            <div className=\"sidebar\">\r\n                <h1 className=\"sidebar-title\">Direct messages</h1>\r\n                <NavLink\r\n                    to=\"/new-message\"\r\n                    className=\"button\"\r\n                    onClick={() => setShowContent(true)}\r\n                >\r\n                    New message\r\n                </NavLink>\r\n                <ContactList />\r\n            </div>\r\n        );\r\n    } else if (sidebarMode === 'channel') {\r\n        return (\r\n            <div className=\"sidebar\">\r\n                <h1 className=\"sidebar-title\">Channels</h1>\r\n\r\n                <Button\r\n                    className=\"button\"\r\n                    text=\"Add channel\"\r\n                    onClick={() => setShowModal(true)}\r\n                />\r\n\r\n                <ChannelList />\r\n            </div>\r\n        );\r\n    } else if (sidebarMode === 'search') {\r\n        return (\r\n            <div className=\"sidebar\">\r\n                <h1 className=\"sidebar-title\">Search</h1>\r\n                <Search placeholder={'Search for a user'} type=\"user\" />\r\n            </div>\r\n        );\r\n    } else if (sidebarMode === 'user') {\r\n        return (\r\n            <div className=\"sidebar\">\r\n                <h1 className=\"sidebar-title\">User</h1>\r\n                <div className=\"user-container\">\r\n                    <Pic id={currentUser.id} name={currentUser.email} />\r\n                    <span className=\"user-email\">{currentUser.email}</span>\r\n                </div>\r\n                <Button\r\n                    onClick={logoutFunction}\r\n                    text=\"Logout\"\r\n                    className=\"button\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport Pic from '../components/pic/Pic';\r\nimport './messages.css';\r\n\r\nconst ChatBubble = ({ keyNum, className, id, name, message, time, type }) => {\r\n    const date = new Date(time);\r\n\r\n    const formattedTime = date.toLocaleTimeString([], {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        hour12: true,\r\n    });\r\n\r\n    const formattedDate = date.toLocaleDateString('en-US');\r\n\r\n    return (\r\n        <div className={className} key={keyNum}>\r\n            <div className=\"pic-message-container\">\r\n                <Pic id={id} name={name} />\r\n                <span className={`message-bubble-${type}`}>{message}</span>\r\n            </div>\r\n\r\n            <span className={`message-${type}-name`}>{name}</span>\r\n            {/* <span className=\"message-time\">\r\n                {formattedDate} {formattedTime}\r\n            </span> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatBubble;\r\n","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport Pic from '../components/pic/Pic';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst ChannelInfoToggle = ({ id, channelMembers }) => {\r\n    const { showChatInfo, setShowChatInfo, handleSetShowChatInfo } =\r\n        useContext(UserContext);\r\n\r\n    return (\r\n        <div\r\n            className=\"message-sidebar-toggle\"\r\n            onClick={() => {\r\n                handleSetShowChatInfo();\r\n                console.log(showChatInfo);\r\n            }}\r\n        >\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-6 w-6\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n            >\r\n                <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\r\n                />\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChannelInfoToggle;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport Button from '../components/button/Button';\r\nimport Pic from '../components/pic/Pic';\r\nimport { UserContext } from '../context/UserContext';\r\nimport ChannelInfoToggle from './ChannelInfoToggle';\r\n\r\nconst ChatHeader = ({ type, id, messages, channelMembers }) => {\r\n    const { channelList, allUsers, loadData, setShowContent } =\r\n        useContext(UserContext);\r\n\r\n    const [chatInfo, setChatInfo] = useState();\r\n\r\n    useEffect(() => {\r\n        if (type === 'channel') {\r\n            channelList.data.data.map((channel) => {\r\n                if (channel.id === parseInt(id)) {\r\n                    setChatInfo({\r\n                        id: channel.id,\r\n                        name: channel.name,\r\n                        isChannel: true,\r\n                    });\r\n                }\r\n            });\r\n        } else if (type === 'user') {\r\n            allUsers.data.data.map((user) => {\r\n                if (user.id === parseInt(id)) {\r\n                    setChatInfo({\r\n                        id: user.id,\r\n                        name: user.email,\r\n                        isChannel: false,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }, [loadData]);\r\n\r\n    return (\r\n        <>\r\n            {chatInfo ? (\r\n                <div className=\"chat-header\">\r\n                    <button\r\n                        className={'back-button'}\r\n                        onClick={() => setShowContent(false)}\r\n                    >\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            className=\"h-6 w-6\"\r\n                            fill=\"none\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            stroke=\"currentColor\"\r\n                        >\r\n                            <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth={2}\r\n                                d=\"M15 19l-7-7 7-7\"\r\n                            />\r\n                        </svg>\r\n                    </button>\r\n                    <div className=\"header-name\">\r\n                        {!chatInfo.isChannel ? (\r\n                            <Pic\r\n                                id={chatInfo.id}\r\n                                name={chatInfo.name}\r\n                                isChannel={chatInfo.isChannel}\r\n                            />\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                        <h1\r\n                            className={\r\n                                !chatInfo.isChannel\r\n                                    ? 'chat-name chat-name-user'\r\n                                    : 'chat-name '\r\n                            }\r\n                        >\r\n                            {chatInfo.name}\r\n                        </h1>\r\n                    </div>\r\n\r\n                    <ChannelInfoToggle\r\n                        id={chatInfo.id}\r\n                        channelMembers={channelMembers}\r\n                    />\r\n                </div>\r\n            ) : (\r\n                ''\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatHeader;\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { sendMessageAPI } from '../api/API';\r\nimport Button from '../components/button/Button';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst MessageInput = ({ type, id, newMsg, setNewMessageUser }) => {\r\n    const { currentHeaders, handleSetLoadData } = useContext(UserContext);\r\n\r\n    let messageInputRef = useRef(null);\r\n    let history = useHistory();\r\n\r\n    const sendMessage = () => {\r\n        if (\r\n            (messageInputRef.current.value !== null ||\r\n                messageInputRef.current.value !== '') &&\r\n            id !== null\r\n        ) {\r\n            let sendMessageRequest = {\r\n                url: 'messages',\r\n                'access-token': currentHeaders['access-token'],\r\n                client: currentHeaders.client,\r\n                expiry: currentHeaders.expiry,\r\n                uid: currentHeaders.uid,\r\n                receiver_id: parseInt(id),\r\n                receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\r\n                message: messageInputRef.current.value,\r\n            };\r\n\r\n            sendMessageAPI(sendMessageRequest)\r\n                .then((res) => {\r\n                    console.log('send message ', res);\r\n                    handleSetLoadData();\r\n                    messageInputRef.current.value = '';\r\n                })\r\n                .catch((err) => console.log(err));\r\n\r\n            if (\r\n                (messageInputRef.current.value !== null ||\r\n                    messageInputRef.current.value !== '') &&\r\n                newMsg &&\r\n                id !== null\r\n            ) {\r\n                history.push(`/user/${id}`);\r\n                setNewMessageUser();\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"message-input-container\"\r\n            onSubmit={(e) => {\r\n                e.preventDefault();\r\n                sendMessage();\r\n            }}\r\n        >\r\n            <label className=\"message-input\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"message-input\"\r\n                    id=\"message-input\"\r\n                    placeholder=\"Type your message here...\"\r\n                    ref={messageInputRef}\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"h-6 w-6\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                >\r\n                    <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth={1}\r\n                        d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\r\n                    />\r\n                </svg>\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageInput;\r\n","export default __webpack_public_path__ + \"static/media/newmessage.b249c0dd.svg\";","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport Pic from '../pic/Pic';\r\nimport './search.css';\r\n\r\nconst NewMsgSearch = ({ setNewMessageUser }) => {\r\n    const { allUsers, handleSetLoadData } = useContext(UserContext);\r\n\r\n    const [searchList, setSearchList] = useState([]);\r\n\r\n    const handleSearchList = (e) => {\r\n        const searchInput = e.target.value;\r\n\r\n        const searchFilter = allUsers.data.data.filter((user) => {\r\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\r\n        });\r\n\r\n        if (searchInput === '') {\r\n            setSearchList([]);\r\n        } else {\r\n            setSearchList(searchFilter);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"newmsg-search-container\">\r\n                <span>To: </span>\r\n                <div className=\"newmsg-search-input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"someone@example.com\"\r\n                        onChange={handleSearchList}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {searchList.length != 0 && (\r\n                <div className=\"newmsg-search-results\">\r\n                    {searchList.slice(0, 15).map((user, index) => (\r\n                        <div\r\n                            className=\"newmsg-search-item\"\r\n                            key={index}\r\n                            onClick={() => {\r\n                                handleSetLoadData();\r\n                                setNewMessageUser(user);\r\n                            }}\r\n                        >\r\n                            <Pic\r\n                                id={user.id}\r\n                                name={user.email}\r\n                                isChannel={false}\r\n                            />\r\n                            <span>{user.email}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewMsgSearch;\r\n","import React, { useContext } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useEffect, useState } from 'react/cjs/react.development';\r\nimport { getMessagesAPI } from '../api/API';\r\nimport Loading from '../components/loading/Loading';\r\nimport Pic from '../components/pic/Pic';\r\nimport { UserContext } from '../context/UserContext';\r\nimport ChatBubble from '../messages/ChatBubble';\r\nimport ChatHeader from '../messages/ChatHeader';\r\nimport Newmessage from '../components/newmessage.svg';\r\nimport MessageInput from '../messages/MessageInput';\r\nimport Search from '../components/search/Search';\r\nimport NewMsgSearch from '../components/search/NewMsgSearch';\r\nimport './newmessages.css';\r\n\r\nconst NewMessage = () => {\r\n    const {\r\n        currentHeaders,\r\n        currentUser,\r\n        channelList,\r\n        allUsers,\r\n        loadData,\r\n        showContent,\r\n        setShowContent,\r\n    } = useContext(UserContext);\r\n\r\n    /* const { type, id } = useParams(); */\r\n\r\n    const [newMessageUser, setNewMessageUser] = useState();\r\n\r\n    // const [chatInfo, setChatInfo] = useState();\r\n\r\n    // const getMessages = () => {\r\n    //     let messageRequest = {\r\n    //         'access-token': currentHeaders['access-token'],\r\n    //         client: currentHeaders.client,\r\n    //         expiry: currentHeaders.expiry,\r\n    //         uid: currentHeaders.uid,\r\n    //         user_id: parseInt(id),\r\n    //         receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\r\n    //     };\r\n\r\n    //     console.log(messageRequest);\r\n    //     getMessagesAPI(messageRequest).then((res) => {\r\n    //         console.log(res);\r\n    //         setMessages(res);\r\n    //     });\r\n    // };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                showContent\r\n                    ? 'main-content'\r\n                    : 'main-content main-content-closed'\r\n            }\r\n        >\r\n            <div className=\"new-messages-section\">\r\n                <div className=\"new-messages-header\">\r\n                    <div className=\"chat-header\">\r\n                        <button\r\n                            className={'back-button'}\r\n                            onClick={() => setShowContent(false)}\r\n                        >\r\n                            <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                className=\"h-6 w-6\"\r\n                                fill=\"none\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                stroke=\"currentColor\"\r\n                            >\r\n                                <path\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    strokeWidth={2}\r\n                                    d=\"M15 19l-7-7 7-7\"\r\n                                />\r\n                            </svg>\r\n                        </button>\r\n                        <h1 className=\"chat-name\">New message</h1>\r\n                    </div>\r\n                    {!newMessageUser ? (\r\n                        <NewMsgSearch setNewMessageUser={setNewMessageUser} />\r\n                    ) : (\r\n                        <div className=\"newmsg-search-container\">\r\n                            <span>To: </span>\r\n                            <div className=\"chip-container\">\r\n                                <Pic\r\n                                    id={newMessageUser.id}\r\n                                    name={newMessageUser.email}\r\n                                    isChip={true}\r\n                                />\r\n                                <span>{newMessageUser.email}</span>\r\n                                <div\r\n                                    className=\"delete-chip-button\"\r\n                                    onClick={() => setNewMessageUser()}\r\n                                >\r\n                                    ✕\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                {/* \r\n            <div className=\"message-flex\">\r\n                <div className=\"messages-container\"></div>\r\n            </div> */}\r\n\r\n                <MessageInput\r\n                    type=\"User\"\r\n                    id={newMessageUser ? newMessageUser.id : null}\r\n                    newMsg={true}\r\n                    setNewMessageUser={setNewMessageUser}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewMessage;\r\n","export default __webpack_public_path__ + \"static/media/nocontent.ebe2c5bc.svg\";","import React, { useRef, useEffect } from 'react';\r\n\r\nconst ScrollDown = () => {\r\n    const elementRef = useRef();\r\n\r\n    useEffect(() => {\r\n        elementRef.current.scrollIntoView();\r\n    });\r\n\r\n    return <div ref={elementRef}></div>;\r\n};\r\n\r\nexport default ScrollDown;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { getListsAPI } from '../api/API';\r\nimport Button from '../components/button/Button';\r\nimport Pic from '../components/pic/Pic';\r\nimport { UserContext } from '../context/UserContext';\r\nimport ChannelInfoToggle from './ChannelInfoToggle';\r\nimport ChatHeader from './ChatHeader';\r\n\r\nconst MessageSidebar = () => {\r\n    const {\r\n        allUsers,\r\n        currentHeaders,\r\n        handleSetShowChatInfo,\r\n        showChatInfo,\r\n        chatInfo,\r\n        loadData,\r\n        channelList,\r\n        chatName,\r\n    } = useContext(UserContext);\r\n\r\n    const [channelMembers, setChannelMembers] = useState();\r\n\r\n    /* const { type, id } = useParams(); */\r\n\r\n    // const [chatName, setChatName] = useState();\r\n\r\n    // useEffect(() => {\r\n    //     if (chatInfo.type === 'channel') {\r\n    //         channelList.data.data.map((channel) => {\r\n    //             if (channel.id === parseInt(chatInfo.id)) {\r\n    //                 setChatName({\r\n    //                     id: channel.id,\r\n    //                     name: channel.name,\r\n    //                     isChannel: true,\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     } else if (chatInfo.type === 'user') {\r\n    //         allUsers.data.data.map((user) => {\r\n    //             if (user.id === parseInt(chatInfo.id)) {\r\n    //                 setChatName({\r\n    //                     id: user.id,\r\n    //                     name: user.email,\r\n    //                     isChannel: false,\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    //     }\r\n    // }, [loadData]);\r\n\r\n    const getMemberIcons = () => {\r\n        let getMemberRequest = {\r\n            'access-token': currentHeaders['access-token'],\r\n            client: currentHeaders.client,\r\n            expiry: currentHeaders.expiry,\r\n            uid: currentHeaders.uid,\r\n            url: `channels/${chatInfo.id}`,\r\n        };\r\n    };\r\n\r\n    //Make a function that gets all chat info\r\n    // let channelInfoRequest = {\r\n    //     url: `channels/${id}`,\r\n    //     'access-token': currentHeaders['access-token'],\r\n    //     client: currentHeaders.client,\r\n    //     expiry: currentHeaders.expiry,\r\n    //     uid: currentHeaders.uid,\r\n    // };\r\n\r\n    // getListsAPI(channelInfoRequest).then((res) => {\r\n    //     console.log('channel info response', res);\r\n    //     setChannelMembers(res.data?.data?.channel_members);\r\n    // });\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                showChatInfo\r\n                    ? 'message-sidebar'\r\n                    : 'message-sidebar message-sidebar-closed'\r\n            }\r\n        >\r\n            <div className=\"modal-title\">\r\n                <span\r\n                    className=\"close-button\"\r\n                    onClick={() => handleSetShowChatInfo()}\r\n                >\r\n                    ✕\r\n                </span>\r\n                <h1>Test component</h1>\r\n                {chatName && (\r\n                    <Pic\r\n                        id={chatName.id}\r\n                        name={chatName?.name || 'none'}\r\n                        isChannel={chatName.isChannel}\r\n                    />\r\n                )}\r\n                <Button text={'Invite user'} className=\"button\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageSidebar;\r\n","import React, { useContext, useRef } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useEffect, useState } from 'react/cjs/react.development';\r\nimport { getMessagesAPI, getListsAPI } from '../api/API';\r\nimport Loading from '../components/loading/Loading';\r\nimport Pic from '../components/pic/Pic';\r\nimport { UserContext } from '../context/UserContext';\r\nimport ChatBubble from './ChatBubble';\r\nimport ChatHeader from './ChatHeader';\r\nimport Nocontent from '../components/nocontent.svg';\r\nimport MessageInput from './MessageInput';\r\nimport ScrollDown from '../messages/ScrollDown';\r\nimport MessageSidebar from './MessageSidebar';\r\n\r\nconst Messages = () => {\r\n    const {\r\n        currentHeaders,\r\n        currentUser,\r\n        channelList,\r\n        allUsers,\r\n        loadData,\r\n        showContent,\r\n        messages,\r\n        setMessages,\r\n        showChatInfo,\r\n        setChatInfo,\r\n        setChatName,\r\n    } = useContext(UserContext);\r\n\r\n    const { type, id } = useParams();\r\n\r\n    // const [messages, setMessages] = useState();\r\n    const [channelMembers, setChannelMembers] = useState();\r\n\r\n    // const [chatInfo, setChatInfo] = useState();\r\n\r\n    const sendMessageRef = useRef();\r\n    const endMessageRef = useRef(null);\r\n    const elementRef = useRef();\r\n\r\n    const getMessages = () => {\r\n        let messageRequest = {\r\n            'access-token': currentHeaders['access-token'],\r\n            client: currentHeaders.client,\r\n            expiry: currentHeaders.expiry,\r\n            uid: currentHeaders.uid,\r\n            user_id: parseInt(id),\r\n            receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\r\n        };\r\n\r\n        /* setChatInfo({\r\n            id: id,\r\n            type: type,\r\n        }); */\r\n\r\n        console.log('message request', messageRequest);\r\n        getMessagesAPI(messageRequest).then((res) => {\r\n            console.log('message request response', res);\r\n            setMessages(res);\r\n        });\r\n\r\n        // if (type === 'channel') {\r\n        //     let channelInfoRequest = {\r\n        //         url: `channels/${id}`,\r\n        //         'access-token': currentHeaders['access-token'],\r\n        //         client: currentHeaders.client,\r\n        //         expiry: currentHeaders.expiry,\r\n        //         uid: currentHeaders.uid,\r\n        //     };\r\n\r\n        //     getListsAPI(channelInfoRequest).then((res) => {\r\n        //         console.log('channel info response', res);\r\n        //         setChannelMembers(res.data?.data?.channel_members);\r\n        //     });\r\n        // }\r\n    };\r\n\r\n    const getChatName = () => {\r\n        if (type === 'channel') {\r\n            channelList.data.data.map((channel) => {\r\n                if (channel.id === parseInt(id)) {\r\n                    setChatName({\r\n                        id: channel.id,\r\n                        name: channel.name,\r\n                        isChannel: true,\r\n                    });\r\n                }\r\n            });\r\n        } else if (type === 'user') {\r\n            allUsers.data.data.map((user) => {\r\n                if (user.id === parseInt(id)) {\r\n                    setChatName({\r\n                        id: user.id,\r\n                        name: user.email,\r\n                        isChannel: false,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    // const getChatInfo = () => {\r\n    //     if (type === 'channel') {\r\n    //         for (let i = 0; i < channelList.length; i++) {\r\n    //             if (parseInt(id) === channelList.data.data[i].id) {\r\n    //                 setChatInfo({\r\n    //                     id: channelList.data.data[i].id,\r\n    //                     name: channelList.data.data[i].name,\r\n    //                     isChannel: true,\r\n    //                 });\r\n    //                 console.log('get ' + chatInfo);\r\n    //             }\r\n    //         }\r\n    //         console.log('hindi kinuha channel' + chatInfo);\r\n    //     } else if (type === 'user') {\r\n    //         for (let i = 0; i < allUsers.length; i++) {\r\n    //             if (parseInt(id) === allUsers.data.data[i].id) {\r\n    //                 setChatInfo({\r\n    //                     id: allUsers.data.data[i].id,\r\n    //                     name: allUsers.data.data[i].email,\r\n    //                     isChannel: false,\r\n    //                 });\r\n    //                 console.log('get ' + chatInfo);\r\n    //             }\r\n    //         }\r\n    //         console.log(allUsers);\r\n    //         console.log('hindi kinuha users' + chatInfo);\r\n    //     }\r\n    // };\r\n\r\n    // getChatInfo();\r\n\r\n    useEffect(() => {\r\n        getMessages();\r\n        getChatName();\r\n        // getChatInfo();\r\n    }, [loadData /* , messages, currentHeaders */]);\r\n\r\n    if (!messages) {\r\n        return <Loading />;\r\n    } else {\r\n        return (\r\n            <div\r\n                className={\r\n                    showContent\r\n                        ? 'main-content'\r\n                        : 'main-content main-content-closed'\r\n                }\r\n            >\r\n                <div className='messages-section'>\r\n                    {messages ? (\r\n                        <>\r\n                            <ChatHeader\r\n                                type={type}\r\n                                id={id}\r\n                                messages={messages}\r\n                                channelMembers={channelMembers}\r\n                            />\r\n                            <div className='messages-content'>\r\n                                {messages.data?.data.length > 0 ? (\r\n                                    <div className='message-flex'>\r\n                                        <div className='messages-container'>\r\n                                            {messages.data.data.map(\r\n                                                (message, index) => {\r\n                                                    return message.sender.id !==\r\n                                                        currentUser.id ? (\r\n                                                        <ChatBubble\r\n                                                            keyNum={index}\r\n                                                            id={\r\n                                                                message.sender\r\n                                                                    .id\r\n                                                            }\r\n                                                            name={\r\n                                                                message.sender\r\n                                                                    .email\r\n                                                            }\r\n                                                            message={\r\n                                                                message.body\r\n                                                            }\r\n                                                            time={\r\n                                                                message.created_at\r\n                                                            }\r\n                                                            className='incoming-messages'\r\n                                                            type='sender'\r\n                                                        />\r\n                                                    ) : (\r\n                                                        <ChatBubble\r\n                                                            keyNum={index}\r\n                                                            id={\r\n                                                                message.sender\r\n                                                                    .id\r\n                                                            }\r\n                                                            name={\r\n                                                                message.sender\r\n                                                                    .email\r\n                                                            }\r\n                                                            message={\r\n                                                                message.body\r\n                                                            }\r\n                                                            time={\r\n                                                                message.created_at\r\n                                                            }\r\n                                                            className='outgoing-messages'\r\n                                                            type='user'\r\n                                                        />\r\n                                                    );\r\n                                                }\r\n                                            )}\r\n                                            {/* <div ref={elementRef}></div> */}\r\n                                            <ScrollDown />\r\n                                        </div>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className='message-container-empty'>\r\n                                        <img src={Nocontent} />\r\n                                        <span className='empty-title'>\r\n                                            Be the first one to say hi!\r\n                                        </span>\r\n                                        <p>Send a message!</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <MessageInput type={type} id={id} />\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </div>\r\n                {/* <div\r\n                    className={\r\n                        showChatInfo\r\n                            ? 'message-sidebar'\r\n                            : 'message-sidebar message-sidebar-closed'\r\n                    }\r\n                >\r\n                    <ChatHeader type={type} id={id} messages={messages} />\r\n                    <MessageSidebar />\r\n                    <h1>channel sidebar</h1>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Messages;\r\n","export default __webpack_public_path__ + \"static/media/selectmessage.6b51a787.svg\";","import React, { useState, useEffect, useContext } from 'react';\r\nimport { getListsAPI } from './api/API';\r\nimport Button from './components/button/Button';\r\nimport ChannelList from './components/channel/ChannelList';\r\nimport { useParams } from 'react-router';\r\nimport Navbar from './components/navbar/Navbar';\r\nimport Sidebar from './components/sidebar/Sidebar';\r\nimport Loading from './components/loading/Loading';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport NewMessage from './newmessage/NewMessage';\r\nimport Messages from './messages/Messages';\r\nimport { UserContext } from './context/UserContext';\r\nimport NewChannel from './newchannel/NewChannel';\r\nimport Selectmessage from './components/selectmessage.svg';\r\nimport MessageSidebar from './messages/MessageSidebar';\r\nimport ChatHeader from './messages/ChatHeader';\r\n\r\nconst Main = () => {\r\n    const {\r\n        currentHeaders,\r\n        currentUser,\r\n        setChannelList,\r\n        setAllUsers,\r\n        setContactList,\r\n        allUsers,\r\n        channelList,\r\n        contactList,\r\n        showModal,\r\n        setShowModal,\r\n        loadData,\r\n        removeEmail,\r\n        showContent,\r\n        showChatInfo,\r\n    } = useContext(UserContext);\r\n\r\n    const runAPI = () => {\r\n        let channelListRequest = {\r\n            'access-token': currentHeaders['access-token'],\r\n            client: currentHeaders.client,\r\n            expiry: currentHeaders.expiry,\r\n            uid: currentHeaders.uid,\r\n            url: 'channels',\r\n        };\r\n\r\n        let allUsersListRequest = {\r\n            'access-token': currentHeaders['access-token'],\r\n            client: currentHeaders.client,\r\n            expiry: currentHeaders.expiry,\r\n            uid: currentHeaders.uid,\r\n            url: 'users',\r\n        };\r\n\r\n        let contactListRequest = {\r\n            'access-token': currentHeaders['access-token'],\r\n            client: currentHeaders.client,\r\n            expiry: currentHeaders.expiry,\r\n            uid: currentHeaders.uid,\r\n            url: 'users/recent',\r\n        };\r\n\r\n        getListsAPI(channelListRequest)\r\n            .then((res) => {\r\n                console.log('channels r', res);\r\n                console.log('channels', channelList);\r\n                setChannelList(res);\r\n            })\r\n            .catch((err) => console.log(err));\r\n\r\n        getListsAPI(allUsersListRequest)\r\n            .then((res) => {\r\n                console.log('users r', res);\r\n                console.log('users', allUsers);\r\n                setAllUsers(res);\r\n            })\r\n            .catch((err) => console.log(err));\r\n\r\n        getListsAPI(contactListRequest)\r\n            .then((res) => {\r\n                console.log('contact r', res);\r\n                console.log('contact', contactList);\r\n                setContactList(res);\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n\r\n    useEffect(() => {\r\n        runAPI();\r\n    }, [loadData]);\r\n\r\n    // useState(() => {\r\n    //     let channelListRequest = {\r\n    //         'access-token': currentHeaders['access-token'],\r\n    //         client: currentHeaders.client,\r\n    //         expiry: currentHeaders.expiry,\r\n    //         uid: currentHeaders.uid,\r\n    //         url: 'channels',\r\n    //     };\r\n\r\n    //     let allUsersListRequest = {\r\n    //         'access-token': currentHeaders['access-token'],\r\n    //         client: currentHeaders.client,\r\n    //         expiry: currentHeaders.expiry,\r\n    //         uid: currentHeaders.uid,\r\n    //         url: 'users',\r\n    //     };\r\n\r\n    //     let contactListRequest = {\r\n    //         'access-token': currentHeaders['access-token'],\r\n    //         client: currentHeaders.client,\r\n    //         expiry: currentHeaders.expiry,\r\n    //         uid: currentHeaders.uid,\r\n    //         url: 'users/recent/',\r\n    //     };\r\n\r\n    //     console.log('channelsReq', channelListRequest);\r\n    //     console.log('allusr', allUsersListRequest);\r\n    //     console.log('contr', contactListRequest);\r\n\r\n    //     getListsAPI(channelListRequest)\r\n    //         .then((res) => {\r\n    //             console.log('channels r', res);\r\n    //             console.log('channels', channelList);\r\n    //             setChannelList(res.data.data);\r\n    //         })\r\n    //         .catch((err) => console.log(err));\r\n\r\n    //     getListsAPI(allUsersListRequest)\r\n    //         .then((res) => {\r\n    //             console.log('users r', channelList);\r\n    //             console.log('users', allUsers);\r\n    //             console.log('channels r2', res);\r\n    //             console.log('channels2', channelList);\r\n    //             setAllUsers(res.data.data);\r\n    //         })\r\n    //         .catch((err) => console.log(err));\r\n\r\n    //     getListsAPI(contactListRequest)\r\n    //         .then((res) => {\r\n    //             console.log('contact r', channelList);\r\n    //             console.log('contact', contactList);\r\n    //             console.log('channels r3', res);\r\n    //             console.log('channels 3', channelList);\r\n    //             setContactList(res.data.data);\r\n    //         })\r\n    //         .catch((err) => console.log(err));\r\n    // }, [currentHeaders, channelList, allUsers, contactList]);\r\n\r\n    // //Logout function\r\n    // const logoutFunction = () => {\r\n    //     localStorage.setItem('User', null);\r\n    //     setUser(null);\r\n    //     setHeaders(null);\r\n    //     setIsLoggedIn(false);\r\n    //     setLoginMessage('');\r\n    //     setSidebarMode('dm');\r\n    // };\r\n\r\n    if (!channelList.data || !allUsers || !contactList) {\r\n        // setIsLoading(false);\r\n        return <Loading />;\r\n    }\r\n\r\n    // if (isLoading) {\r\n    // return <Loading />;\r\n    // }\r\n    else {\r\n        return (\r\n            <div className=\"app-container\">\r\n                {showModal ? (\r\n                    <NewChannel\r\n                        showModal={showModal}\r\n                        setShowModal={setShowModal}\r\n                    />\r\n                ) : null}\r\n                <Router>\r\n                    <div\r\n                        className={\r\n                            showContent\r\n                                ? 'navigation-bars-container navigation-bars-container-closed'\r\n                                : 'navigation-bars-container '\r\n                        }\r\n                    >\r\n                        <Navbar />\r\n                        <Sidebar />\r\n                    </div>\r\n                    <Switch>\r\n                        <Route path=\"/slack-app\" exact>\r\n                            <div\r\n                                className={\r\n                                    !showContent\r\n                                        ? 'main-content main-content-closed'\r\n                                        : showChatInfo\r\n                                        ? 'main-content main-content-closed'\r\n                                        : 'main-content'\r\n                                }\r\n                            >\r\n                                <div className=\"message-container-empty\">\r\n                                    <img src={Selectmessage} />\r\n                                    <span className=\"empty-title\">\r\n                                        Welcome back,{' '}\r\n                                        {removeEmail(currentUser.email)}!\r\n                                    </span>\r\n                                    <p>\r\n                                        Send a message or choose a contact to\r\n                                        get started.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </Route>\r\n                        <Route path=\"/slack-app/:type/:id\">\r\n                            <Messages />\r\n                        </Route>\r\n                        <Route exact path=\"/slack-app/new-message\">\r\n                            <NewMessage />\r\n                        </Route>\r\n                    </Switch>\r\n\r\n                    <MessageSidebar />\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Main;\r\n","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { UserContext } from './context/UserContext';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    const { isLoggedIn } = useContext(UserContext);\r\n\r\n    return (\r\n        // Show the component only when the user is logged in\r\n        // Otherwise, redirect the user to /signin page\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                isLoggedIn ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect to=\"/slack-app/login\" />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { UserContext } from './context/UserContext';\r\n\r\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\r\n    const { isLoggedIn } = useContext(UserContext);\r\n\r\n    return (\r\n        // restricted = false meaning public route\r\n        // restricted = true meaning restricted route\r\n\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                isLoggedIn && restricted ? (\r\n                    <Redirect to=\"/slack-app\" exact />\r\n                ) : (\r\n                    <Component {...props} />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import './App.css';\r\nimport './login/login.css';\r\nimport Login from './login/Login';\r\nimport Register from './login/Register';\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Switch,\r\n    Redirect,\r\n} from 'react-router-dom';\r\nimport { userSessionAPI } from './api/API';\r\nimport Loginhero from './login/Loginhero';\r\nimport Main from './Main';\r\nimport { UserProvider, UserContext } from './context/UserContext';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\n\r\nfunction App() {\r\n    const { setUser, setHeaders, setLoginMessage, setIsLoggedIn } =\r\n        useContext(UserContext);\r\n\r\n    // // Logged In\r\n    // useEffect(() => {\r\n    //     const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\r\n\r\n    //     if (localStorageLoginUser) {\r\n    //         setLoginMessage('Logging you in...');\r\n\r\n    //         userSessionAPI(localStorageLoginUser)\r\n    //             .then((res) => {\r\n    //                 setHeaders(res.headers);\r\n    //                 setUser(res.data.data);\r\n    //                 setLoginMessage('Logged in!');\r\n    //                 setIsLoggedIn(true);\r\n    //             })\r\n    //             .catch((err) => {\r\n    //                 if (err.response) {\r\n    //                     // Request made and server responded\r\n    //                     console.log(err.response.data);\r\n    //                     console.log(err.response.status);\r\n    //                     console.log(err.response.headers);\r\n    //                     setHeaders('');\r\n    //                     setUser('');\r\n    //                     setLoginMessage(err.response.data.errors[0]);\r\n    //                     setTimeout(() => {\r\n    //                         setLoginMessage('');\r\n    //                     }, 3000);\r\n    //                     setTimeout(() => {\r\n    //                         setLoginMessage('');\r\n    //                     }, 3000);\r\n    //                 } else if (err.request) {\r\n    //                     // The request was made but no response was received\r\n    //                     console.log(err.request);\r\n    //                     setLoginMessage('Server error, please try again.');\r\n    //                     setTimeout(() => {\r\n    //                         setLoginMessage('');\r\n    //                     }, 3000);\r\n    //                 } else {\r\n    //                     // Something happened in setting up the request that triggered an Error\r\n    //                     console.log('Error', err.message);\r\n    //                 }\r\n    //             });\r\n    //     }\r\n    // }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Switch>\r\n                    <PrivateRoute component={Main} path=\"/slack-app\" exact />\r\n\r\n                    <div className=\"login-main-container\">\r\n                        <Loginhero />\r\n\r\n                        <PublicRoute\r\n                            component={Login}\r\n                            restricted={true}\r\n                            path=\"/slack-app/login\"\r\n                            exact\r\n                        />\r\n                        <PublicRoute\r\n                            component={Register}\r\n                            restricted={true}\r\n                            path=\"/slack-app/signup\"\r\n                            exact\r\n                        />\r\n                        <Route\r\n                            render={() => <Redirect to=\"/slack-app/login\" />}\r\n                        />\r\n                    </div>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { UserProvider } from './context/UserContext';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <UserProvider>\r\n            <App />\r\n        </UserProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}