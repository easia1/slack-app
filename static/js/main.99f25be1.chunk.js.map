{"version":3,"sources":["api/API.js","components/button/Button.js","components/logo/Logo.js","components/loading/Loading.js","components/toast/Toast.js","context/UserContext.js","login/Login.js","login/Register.js","login/Loginhero.js","components/pic/Pic.js","components/startchannel.svg","components/channel/ChannelList.js","components/navbar/Navbar.js","components/beginchat.svg","components/contact/ContactList.js","newchannel/SearchUser.js","newchannel/NewChannel.js","components/search/Search.js","components/sidebar/Sidebar.js","messages/ChatBubble.js","messages/ChannelInfoToggle.js","messages/ChatHeader.js","messages/MessageInput.js","components/newmessage.svg","components/search/NewMsgSearch.js","newmessage/NewMessage.js","components/nocontent.svg","messages/ScrollDown.js","messages/MessageSidebar.js","messages/Messages.js","components/selectmessage.svg","Main.js","PrivateRoute.js","PublicRoute.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","userSessionAPI","data","method","url","email","password","password_confirmation","getListsAPI","headers","client","expiry","uid","then","res","catch","err","getMessagesAPI","user_id","receiver_class","params","receiver_id","Button","className","text","type","onClick","Logo","Loading","Toast","UserContext","createContext","UserProvider","children","useState","currentUser","setUser","currentHeaders","setHeaders","isLoggedIn","setIsLoggedIn","loginMessage","setLoginMessage","sidebarMode","setSidebarMode","channelList","setChannelList","allUsers","setAllUsers","contactList","setContactList","addUsers","setAddUsers","userIds","setUserIds","messages","setMessages","allChannelMessages","setAllChannelMessages","loadData","setLoadData","showModal","setShowModal","showContent","setShowContent","showChatInfo","setShowChatInfo","chatInfo","setChatInfo","chatName","setChatName","Provider","value","handleSetLoadData","logoutFunction","localStorage","setItem","sessionStorage","to","localStorageLogin","JSON","stringify","tokenSessionStorage","removeEmail","split","handleSetShowChatInfo","Login","useContext","loginEmailRef","useRef","loginPasswordRef","rememberUser","setRememberUser","message","setMessage","showToast","setShowToast","useEffect","localStorageLoginUser","parse","getItem","sessionStorageUser","sessionStorageHeaders","response","console","log","status","errors","setTimeout","request","onSubmit","e","preventDefault","current","loginFunction","name","id","ref","checked","target","isRememberUser","Register","registerEmailRef","registerPasswordRef","registerConfirmPasswordRef","showPassError","setShowPassError","handleError","focus","length","test","onRegister","min","Loginhero","Pic","colorNumber","isChannel","isChip","colors","Math","floor","style","backgroundColor","charAt","toUpperCase","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","ChannelList","displayRecentMsg","channel","i","sender","channelRecentMsgRequest","parseInt","at","body","getRecentMsg","src","StartChannel","map","index","activeClassName","Navbar","ContactList","BeginChat","user","SearchUser","placeholder","searchList","setSearchList","searchValue","setSearchValue","onChange","searchInput","searchFilter","filter","toLowerCase","includes","slice","addUser","NewChannel","channelNameRef","showError","onCreateChannel","user_ids","createChannelAPI","splice","deleteUser","temp_arr","dataset","newIdsList","temp_arr2","max","val","Search","Sidebar","ChatBubble","keyNum","time","date","Date","toLocaleTimeString","hour","minute","hour12","toLocaleDateString","ChannelInfoToggle","channelMembers","ChatHeader","MessageInput","newMsg","setNewMessageUser","messageInputRef","history","useHistory","sendMessage","sendMessageRequest","push","NewMsgSearch","NewMessage","newMessageUser","ScrollDown","elementRef","scrollIntoView","MessageSidebar","Messages","useParams","messageRequest","getMessages","created_at","Nocontent","Main","channelListRequest","allUsersListRequest","contactListRequest","runAPI","path","exact","Selectmessage","PrivateRoute","Component","component","rest","render","props","PublicRoute","restricted","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.99f25be1.chunk.js","sourcesContent":["import axios from 'axios';\n\n//Set default URL for the API\naxios.defaults.baseURL = 'https://slackapi.avionschool.com/api/v1/';\n\nexport const userSessionAPI = (data) => {\n    return axios({\n        method: 'post',\n        url: data.url,\n        data: {\n            email: data.email,\n            password: data.password,\n            password_confirmation: data.password_confirmation,\n        },\n    });\n};\n\nexport const getListsAPI = (data) => {\n    return axios({\n        method: 'GET',\n        url: data.url,\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const getMessagesAPI = (data) => {\n    return axios({\n        method: 'GET',\n        url: `messages?receiver_id=${data.user_id}&receiver_class=${data.receiver_class}`,\n        params: {\n            receiver_id: data.user_id,\n            receiver_class: data.receiver_class,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const createChannelAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: 'channels',\n        data: {\n            name: data.name,\n            user_ids: data.user_ids,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    })\n        .then((res) => res)\n        .catch((err) => err);\n};\n\nexport const sendMessageAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: data.url,\n        data: {\n            receiver_id: data.receiver_id,\n            receiver_class: data.receiver_class,\n            body: data.message,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    });\n};\n\nexport const addUserChannelAPI = (data) => {\n    return axios({\n        method: 'POST',\n        url: 'channel/add_member',\n        data: {\n            id: data.channel_id,\n            member_id: data.user_id,\n        },\n        headers: {\n            'access-token': data['access-token'],\n            client: data.client,\n            expiry: data.expiry,\n            uid: data.uid,\n        },\n    });\n};\n","import React, { Children } from 'react';\nimport './button.css';\n\nconst Button = ({ className, text, type, onClick }) => {\n    return (\n        <>\n            <button className={className} type={type} onClick={onClick}>\n                {text}\n            </button>\n        </>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport './logo.css';\n\nconst Logo = ({ className }) => {\n    return (\n        <>\n            <h1 className={className}>\n                <span>t</span>\n                <span>:</span>\n                <span>l</span>\n                <span>k</span>\n            </h1>\n        </>\n    );\n};\n\nexport default Logo;\n","import './loading.css';\nimport Logo from '../logo/Logo';\nimport React from 'react';\n\nconst Loading = () => {\n    return (\n        <div className=\"loading-container\">\n            <Logo className=\"loading-logo\" />\n        </div>\n    );\n};\n\nexport default Loading;\n","import React from 'react';\nimport './toast.css';\n\nconst Toast = ({ className, text }) => {\n    return <div className={className}>{text}</div>;\n};\n\nexport default Toast;\n","import { createContext, useState } from 'react';\nimport { Redirect } from 'react-router';\n\n/* ------------------ How to access contents of useContext ------------------ */\n// 1. Go to your component file where you want to access the content.\n// 2. Type const { name of prop } = useContext(UserContext)\n\n/* ------------------------------- useContext ------------------------------- */\n//Creating a context can help pass down props to several child components without having to pass them down through every parent component.\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n    //Current user information\n    const [currentUser, setUser] = useState(null);\n\n    //Access tokens\n    const [currentHeaders, setHeaders] = useState(null);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [loginMessage, setLoginMessage] = useState('');\n\n    //Save user to local storage\n    const localStorageLogin = (data) => {\n        localStorage.setItem('User', JSON.stringify(data));\n    };\n\n    //Save user to local storage\n    const tokenSessionStorage = (data, headers) => {\n        sessionStorage.setItem('User', JSON.stringify(data));\n        sessionStorage.setItem('Headers', JSON.stringify(headers));\n    };\n\n    //Sidebar state\n    const [sidebarMode, setSidebarMode] = useState('dm');\n\n    //List of data\n    const [channelList, setChannelList] = useState('');\n    const [allUsers, setAllUsers] = useState('');\n    const [contactList, setContactList] = useState('');\n    const [addUsers, setAddUsers] = useState([]);\n    const [userIds, setUserIds] = useState([]);\n\n    //Messages\n    const [messages, setMessages] = useState();\n\n    //For recent messages\n    const [allChannelMessages, setAllChannelMessages] = useState([]);\n\n    //Will be used for useEffect for reloading data\n    const [loadData, setLoadData] = useState(false);\n\n    //Function for toggling data reload\n    const handleSetLoadData = () => {\n        setLoadData(!loadData);\n    };\n\n    //Logout function\n    const logoutFunction = () => {\n        localStorage.setItem('User', null);\n        sessionStorage.setItem('User', null);\n        sessionStorage.setItem('Headers', null);\n        setUser(null);\n        setHeaders(null);\n        setIsLoggedIn(false);\n        setLoginMessage('');\n        setSidebarMode('dm');\n        setShowContent(false);\n        return <Redirect to=\"/login\" />;\n    };\n\n    //Show new channel modal\n    const [showModal, setShowModal] = useState(false);\n\n    //Remove @___.___ from email\n    const removeEmail = (email) => {\n        return email.split('@')[0];\n    };\n    //For mobile devices, for showing main content\n    const [showContent, setShowContent] = useState(false);\n\n    //For message sidebars/options\n    const [showChatInfo, setShowChatInfo] = useState(false);\n    const handleSetShowChatInfo = () => {\n        setShowChatInfo((showChatInfo) => !showChatInfo);\n    };\n    const [chatInfo, setChatInfo] = useState({});\n    const [chatName, setChatName] = useState();\n\n    return (\n        <UserContext.Provider\n            value={{\n                currentUser,\n                setUser,\n                currentHeaders,\n                setHeaders,\n                isLoggedIn,\n                setIsLoggedIn,\n                loginMessage,\n                setLoginMessage,\n                sidebarMode,\n                setSidebarMode,\n                channelList,\n                setChannelList,\n                allUsers,\n                setAllUsers,\n                contactList,\n                setContactList,\n                allChannelMessages,\n                setAllChannelMessages,\n                loadData,\n                setLoadData,\n                handleSetLoadData,\n                logoutFunction,\n                localStorageLogin,\n                tokenSessionStorage,\n                showModal,\n                setShowModal,\n                removeEmail,\n                showContent,\n                setShowContent,\n                showChatInfo,\n                setShowChatInfo,\n                messages,\n                setMessages,\n                handleSetShowChatInfo,\n                userIds,\n                setUserIds,\n                addUsers,\n                setAddUsers,\n                chatInfo,\n                setChatInfo,\n                chatName,\n                setChatName,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n};\n","import axios from 'axios';\nimport { useEffect, useState, useRef, useContext } from 'react';\nimport { userSessionAPI } from '../api/API';\nimport { Router, Route, Switch, NavLink } from 'react-router-dom';\nimport Button from '../components/button/Button';\nimport Loading from '../components/loading/Loading';\nimport './login.css';\nimport Logo from '../components/logo/Logo';\nimport Toast from '../components/toast/Toast';\nimport { UserContext } from '../context/UserContext';\n\nconst Login = () => {\n    const {\n        setUser,\n        setHeaders,\n        setIsLoggedIn,\n        loginMessage,\n        localStorageLogin,\n        setLoginMessage,\n        tokenSessionStorage,\n    } = useContext(UserContext);\n\n    //Refs for email and password input fields\n    let loginEmailRef = useRef(null);\n    let loginPasswordRef = useRef(null);\n\n    const [rememberUser, setRememberUser] = useState(null);\n\n    const isRememberUser = (e) => {\n        const checked = e.target.checked;\n        if (checked) {\n            setRememberUser(true);\n        } else {\n            setRememberUser(false);\n        }\n    };\n\n    //Toast Message\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n\n    //Login function\n    const loginFunction = () => {\n        if (\n            loginEmailRef.current.value !== '' &&\n            loginPasswordRef.current.value !== ''\n        ) {\n            //Save login data to an object so it can be passed down to API call\n            const data = {\n                url: 'auth/sign_in',\n                email: loginEmailRef.current.value,\n                password: loginPasswordRef.current.value,\n            };\n\n            //Message for logging in while waiting for API response\n            setMessage('Logging you in...');\n\n            //API call for creating new user session\n            userSessionAPI(data)\n                .then((res) => {\n                    setHeaders(res.headers);\n                    setUser(res.data.data);\n                    setMessage('Logged in!');\n                    setIsLoggedIn(true);\n                    console.log(res);\n\n                    if (rememberUser) {\n                        localStorageLogin(\n                            /* res.data.data, res.headers */ data\n                        );\n                        tokenSessionStorage(res.data.data, res.headers);\n                    }\n                })\n                .catch((err) => {\n                    if (err.response) {\n                        // Request made and server responded\n                        // console.log(err.response.data);\n                        // console.log(err.response.status);\n                        // console.log(err.response.headers);\n                        setHeaders('');\n                        setUser('');\n                        setMessage(err?.response.data.errors[0]);\n                        setTimeout(() => {\n                            setMessage(false);\n                        }, 3000);\n                    } else if (err.request) {\n                        // The request was made but no response was received\n                        console.log(err.request);\n                        setMessage('Server error, please try again.');\n                        setTimeout(() => {\n                            setMessage(false);\n                        }, 3000);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', err.message);\n                    }\n                });\n        } else {\n            setMessage('Please fill out the required fields');\n            setShowToast(true);\n        }\n    };\n\n    // Logged In\n    useEffect(() => {\n        const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\n        const sessionStorageUser = JSON.parse(sessionStorage.getItem('User'));\n        const sessionStorageHeaders = JSON.parse(\n            sessionStorage.getItem('Headers')\n        );\n\n        if (sessionStorageUser) {\n            setIsLoggedIn(true);\n            setHeaders(sessionStorageHeaders);\n            setUser(sessionStorageUser);\n        } else if (localStorageLoginUser) {\n            setLoginMessage('Logging you in...');\n\n            userSessionAPI(localStorageLoginUser)\n                .then((res) => {\n                    setHeaders(res.headers);\n                    setUser(res.data.data);\n                    setLoginMessage('Logged in!');\n                    setIsLoggedIn(true);\n                    tokenSessionStorage(res.data.data, res.headers);\n                })\n                .catch((err) => {\n                    if (err.response) {\n                        // Request made and server responded\n                        console.log(err.response.data);\n                        console.log(err.response.status);\n                        console.log(err.response.headers);\n                        setHeaders('');\n                        setUser('');\n                        setLoginMessage(err.response.data.errors[0]);\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                    } else if (err.request) {\n                        // The request was made but no response was received\n                        console.log(err.request);\n                        setLoginMessage('Server error, please try again.');\n                        setTimeout(() => {\n                            setLoginMessage('');\n                        }, 3000);\n                    } else {\n                        // Something happened in setting up the request that triggered an Error\n                        console.log('Error', err.message);\n                    }\n                });\n        }\n    }, []);\n\n    return (\n        <div className=\"login-page\">\n            {showToast || message || loginMessage ? (\n                <Toast\n                    className=\"toast-message\"\n                    text={message || loginMessage}\n                />\n            ) : (\n                <></>\n            )}\n            {/* {isLoading ? <Loading /> : ''} */}\n            <Logo className=\"hero-logo\" />\n            <h2 className=\"login-title\">Let's go!</h2>\n            <p className=\"login-subtitle\">\n                Log in to your account and start connecting. Check check check.\n            </p>\n            <form\n                className=\"login-container\"\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    console.log(loginEmailRef.current.value);\n                    console.log(loginPasswordRef.current.value);\n                    loginFunction({});\n                }}\n            >\n                <label className=\"input-container\">\n                    <span>Email</span>\n                    <input\n                        type=\"email\"\n                        name=\"login-email\"\n                        id=\"login-email\"\n                        ref={loginEmailRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"login-password\"\n                        id=\"login-password\"\n                        ref={loginPasswordRef}\n                    />\n                </label>\n\n                <label className=\"checkbox-container\">\n                    <input\n                        type=\"checkbox\"\n                        name=\"remember-user\"\n                        id=\"remember-user\"\n                        onClick={(e) => {\n                            isRememberUser(e);\n                        }}\n                    />\n                    <span>Keep me logged in</span>\n                </label>\n                <Button type=\"submit\" text=\"Login\" className=\"button\" />\n            </form>\n\n            <div>\n                Don't have an account yet?{' '}\n                <NavLink className=\"hyperlink\" to=\"/signup\">\n                    Sign up here.\n                </NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;\n","import React, { useState, useRef } from 'react';\nimport Button from '../components/button/Button';\nimport axios from 'axios';\nimport { userSessionAPI } from '../api/API';\nimport { Route, Switch, NavLink } from 'react-router-dom';\nimport './login.css';\nimport Toast from '../components/toast/Toast';\n\nconst Register = () => {\n    const registerEmailRef = useRef(null);\n    const registerPasswordRef = useRef(null);\n    const registerConfirmPasswordRef = useRef(null);\n\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n    const [showPassError, setShowPassError] = useState(false);\n\n    const onRegister = () => {\n        handleError();\n\n        const data = {\n            url: 'auth',\n            email: registerEmailRef.current.value,\n            password: registerPasswordRef.current.value,\n            password_confirmation: registerConfirmPasswordRef.current.value,\n        };\n\n        userSessionAPI(data)\n            .then((res) => {\n                setMessage('Registration Success');\n                setShowToast(true);\n                console.log('res', res);\n            })\n            .catch((err) => {\n                setMessage('Something went wrong. Please try again');\n                setShowToast(true);\n                console.log('err', err);\n            });\n    };\n\n    const handleError = () => {\n        if (\n            registerPasswordRef.current.value !==\n            registerConfirmPasswordRef.current.value\n        ) {\n            setMessage('Password did not match');\n            setShowPassError(true);\n            registerPasswordRef.current.focus();\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        }\n        if (registerPasswordRef.current.value.length < 6) {\n            setMessage('Password is too short');\n            setShowPassError(true);\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        }\n        if (\n            !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(\n                registerEmailRef.current.value\n            )\n        ) {\n            setMessage('Please enter valid email');\n            setShowPassError(true);\n            registerEmailRef.current.focus();\n            setTimeout(() => {\n                setShowPassError(false);\n            }, 3000);\n        }\n    };\n\n    return (\n        <div className=\"login-page\">\n            <h2 className=\"login-title\">Let's get started!</h2>\n            <p className=\"login-subtitle\">\n                Sign up for an account to connect with other people\n            </p>\n            <form\n                className=\"login-container\"\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    onRegister();\n                }}\n            >\n                <br />\n\n                <label className=\"input-container\">\n                    <span>Email</span>\n                    <input\n                        type=\"email\"\n                        name=\"register-email\"\n                        id=\"register-email\"\n                        ref={registerEmailRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"register-name\"\n                        min=\"6\"\n                        id=\"register-password\"\n                        ref={registerPasswordRef}\n                    />\n                </label>\n\n                <label className=\"input-container\">\n                    <span>Confirm Password</span>\n                    <input\n                        type=\"password\"\n                        name=\"register-name\"\n                        min=\"6\"\n                        id=\"register-passconfirm\"\n                        ref={registerConfirmPasswordRef}\n                    />\n                </label>\n\n                <Button text=\"Register\" type=\"submit\" className=\"button\" />\n            </form>\n            <div>\n                Already have an account? <NavLink to=\"/login\">Log in.</NavLink>\n            </div>\n            {showToast || showPassError ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default Register;\n","import React from 'react';\nimport './login.css';\n\nconst Loginhero = () => {\n    return <div className=\"login-hero\"></div>;\n};\n\nexport default Loginhero;\n","import React from 'react';\nimport './pic.css';\n\nconst Pic = ({ id, name, isChannel, isChip }) => {\n    const getInitial = () => {\n        let initialLetter = name.charAt(0);\n        return initialLetter.toUpperCase();\n    };\n\n    let colors = [\n        '#d43d2a',\n        '#ed8937',\n        '#d5b758',\n        '#9cb27a',\n        '#62ae9d',\n        '#2aa9be',\n    ];\n\n    let colorNumber;\n\n    const getColor = () => {\n        if (id === 0) {\n            return (colorNumber = 0);\n        } else if (id >= colors.length) {\n            return (colorNumber = Math.floor(id % colors.length));\n        } else if (id < colors.length) {\n            return (colorNumber = Math.floor(colors.length % id));\n        }\n    };\n\n    getColor();\n\n    return (\n        <div className=\"pic-container\">\n            <div\n                className={isChip ? 'chip-pic' : 'profile-pic'}\n                style={{\n                    backgroundColor: colors[colorNumber],\n                }}\n            >\n                {getInitial()}\n            </div>\n            {isChannel ? (\n                <div className=\"channel-pic-icon\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                        />\n                    </svg>\n                </div>\n            ) : (\n                ''\n            )}\n        </div>\n    );\n};\n\nexport default Pic;\n","export default __webpack_public_path__ + \"static/media/startchannel.d76733b3.svg\";","import React, { useContext, useEffect, useState } from 'react';\nimport Pic from '../pic/Pic';\nimport './channellist.css';\nimport { default as StartChannel } from '../startchannel.svg';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport { getMessagesAPI } from '../../api/API';\n\nconst ChannelList = () => {\n    const {\n        channelList,\n        handleSetLoadData,\n        currentHeaders,\n        loadData,\n        removeEmail,\n        allChannelMessages,\n        setAllChannelMessages,\n        setShowContent,\n        setMessages,\n    } = useContext(UserContext);\n\n    // const [allChannelMessages, setAllChannelMessages] = useState([]);\n\n    const getRecentMsg = () => {\n        if (channelList) {\n            for (let i = 0; i < channelList.data?.data.length; i++) {\n                let channelRecentMsgRequest = {\n                    'access-token': currentHeaders['access-token'],\n                    client: currentHeaders.client,\n                    expiry: currentHeaders.expiry,\n                    uid: currentHeaders.uid,\n                    user_id: parseInt(channelList.data.data[i].id),\n                    receiver_class: 'Channel',\n                };\n\n                getMessagesAPI(channelRecentMsgRequest).then((res) => {\n                    if (res.data?.data.length > 0) {\n                        console.log('res', res);\n                        console.log(res.data.data.at(-1).body);\n                        setAllChannelMessages((allChannelMessages) => [\n                            ...allChannelMessages,\n                            {\n                                id: parseInt(channelList.data.data[i].id),\n                                message: res.data.data.at(-1).body,\n                                sender: res.data.data.at(-1).sender.email,\n                            },\n                        ]);\n                    } else {\n                        console.log('res', res);\n                        setAllChannelMessages((allChannelMessages) => [\n                            ...allChannelMessages,\n                            {\n                                id: parseInt(channelList.data.data[i].id),\n                                message: 'No messages',\n                                sender: null,\n                            },\n                        ]);\n                    }\n                });\n            }\n        }\n    };\n\n    const displayRecentMsg = (channel) => {\n        // console.log(allChannelMessages);\n\n        for (let i = 0; i < allChannelMessages.length; i++) {\n            if (channel.id === allChannelMessages[i].id) {\n                return (\n                    <div className=\"recent-message-container\">\n                        {allChannelMessages[i].sender ? (\n                            <span className=\"recent-message-sender\">\n                                {removeEmail(allChannelMessages[i].sender)}:\n                            </span>\n                        ) : (\n                            ''\n                        )}\n                        <span className=\"recent-message\">\n                            {allChannelMessages[i].message}\n                        </span>\n                    </div>\n                );\n            }\n        }\n    };\n\n    useEffect(() => {\n        getRecentMsg();\n    }, [loadData, currentHeaders]);\n\n    if (channelList.data.errors) {\n        return (\n            <div className=\"contact-container-empty\">\n                <img src={StartChannel} />\n                <span className=\"empty-title\">The more the merrier!</span>\n                <p>Create a new channel.</p>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"channel-container\">\n                {channelList.data.data.map((channel, index) => (\n                    <NavLink\n                        to={`/channel/${channel.id}`}\n                        className=\"channel-item\"\n                        key={index}\n                        activeClassName=\"selected-message\"\n                        onClick={() => {\n                            handleSetLoadData();\n                            setShowContent(true);\n                            /* setMessages(); */\n                        }}\n                    >\n                        <Pic\n                            id={channel.id}\n                            name={channel.name}\n                            isChannel={true}\n                        />\n                        <div className=\"inbox-info\">\n                            <span className=\"inbox-name\">{channel.name}</span>\n                            {displayRecentMsg(channel)}\n                        </div>\n                    </NavLink>\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default ChannelList;\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Logo from '../logo/Logo';\nimport Pic from '../pic/Pic';\nimport './navbar.css';\n\nconst Navbar = () => {\n    const { setSidebarMode, sidebarMode, currentUser } =\n        useContext(UserContext);\n\n    return (\n        <nav>\n            <Logo className=\"navbar-logo\" />\n            <div className=\"navlink-container\">\n                <button\n                    className={\n                        sidebarMode === 'dm'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => setSidebarMode('dm')}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z\"\n                        />\n                    </svg>\n                </button>\n                <button\n                    className={\n                        sidebarMode === 'channel'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => setSidebarMode('channel')}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                        />\n                    </svg>\n                </button>\n                <button\n                    className={\n                        sidebarMode === 'search'\n                            ? 'nav-link nav-link-active'\n                            : 'nav-link'\n                    }\n                    onClick={() => setSidebarMode('search')}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        className=\"h-6 w-6\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                    >\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={1}\n                            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                        />\n                    </svg>\n                </button>\n            </div>\n            <button\n                className={\n                    sidebarMode === 'user'\n                        ? 'nav-link nav-link-active'\n                        : 'nav-link'\n                }\n                onClick={() => setSidebarMode('user')}\n            >\n                <Pic id={currentUser.id} name={currentUser.email} />\n            </button>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","export default __webpack_public_path__ + \"static/media/beginchat.fee9cb19.svg\";","import React, { useContext, useEffect, useState } from 'react';\nimport Pic from '../pic/Pic';\nimport './contactlist.css';\nimport { default as BeginChat } from '../beginchat.svg';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\n\nconst ContactList = () => {\n    const {\n        contactList,\n        handleSetLoadData,\n        removeEmail,\n        setShowContent,\n        setMessages,\n    } = useContext(UserContext);\n\n    if (contactList.data.data.length === 0) {\n        return (\n            <div className='contact-container-empty'>\n                <img src={BeginChat} />\n                <span className='empty-title'>Whew, there's nothing here.</span>\n                <p>Start a new conversation!</p>\n            </div>\n        );\n    } else {\n        return (\n            <div className='contact-container'>\n                {contactList.data.data.map((user, index) => (\n                    <NavLink\n                        to={`/user/${user.id}`}\n                        className='contact-item'\n                        key={index}\n                        activeClassName='selected-message'\n                        onClick={() => {\n                            handleSetLoadData();\n                            setShowContent(true);\n                            /* setMessages(); */\n                        }}\n                    >\n                        <Pic id={user.id} name={user.email} />\n                        <span>{user.email}</span>\n                    </NavLink>\n                ))}\n            </div>\n        );\n    }\n};\n\nexport default ContactList;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport Pic from '../components/pic/Pic';\nimport '../newchannel/searchuser.css';\nimport { useRef } from 'react';\n\nimport Toast from '../components/toast/Toast';\n\nconst SearchUser = ({ type, placeholder }) => {\n    const {\n        currentHeaders,\n        allUsers,\n        currentUser,\n        addUsers,\n        setAddUsers,\n        userIds,\n        setUserIds,\n    } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const [searchValue, setSearchValue] = useState('');\n\n    const [message, setMessage] = useState('');\n    const [showToast, setShowToast] = useState(false);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        setSearchValue(searchInput);\n        const searchFilter = allUsers.data?.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n    const addUser = (user) => {\n        if (addUsers.includes(user)) {\n            setShowToast(true);\n            setMessage('Please add another user');\n            setTimeout(() => {\n                setShowToast(false);\n            }, 1000);\n        } else {\n            setAddUsers([...addUsers, user]);\n            setUserIds([...userIds, user.id]);\n        }\n\n        console.log(addUsers);\n        console.log(userIds);\n    };\n\n    const clearSearchField = () => {\n        setSearchList([]);\n        setSearchValue('');\n    };\n\n    // const deleteUser = (e) => {\n    //     let temp_arr = [...addUsers];\n    //     temp_arr.splice(e.target.dataset.index, 1);\n\n    //     let temp_arr2 = [...userIds];\n    //     temp_arr2.splice(e.target.dataset.index, 1);\n    //     updateIndex(temp_arr, temp_arr2);\n    //     console.log(temp_arr);\n    //     console.log(temp_arr2);\n    // };\n\n    // const updateIndex = (newList, newIdsList) => {\n    //     setAddUsers(newList);\n    //     setUserIds(newIdsList);\n    // };\n\n    return (\n        <>\n            {showToast ? (\n                <Toast className='toast-message' text={message} />\n            ) : (\n                <></>\n            )}\n            <div className='input-container'>\n                <span>Add users</span>\n                <input\n                    type='text'\n                    placeholder={placeholder}\n                    onChange={handleSearchList}\n                    value={searchValue}\n                />\n            </div>\n            {searchList.length !== 0 && (\n                <div className='newchannel-search-results'>\n                    {searchList.slice(0, 5).map((user, index) => (\n                        <div\n                            className='newmsg-search-item'\n                            key={index}\n                            onClick={() => {\n                                addUser(user, index);\n                                clearSearchField();\n                            }}\n                        >\n                            <Pic id={user.id} name={user.email} isChip={true} />\n                            <span>{user.uid}</span>\n                        </div>\n                    ))}\n                </div>\n            )}\n            {/* <br />\n            <br />\n            <br /> */}\n            {/* <span>User List:</span> */}\n            {/* {addUsers.map((val, index) => {\n                return (\n                    <div className=\"select-chip-container\" key={index}>\n                        <Pic id={val.id} name={val.email} isChip={true} />\n                        <span>{val.email}</span>\n                        <div\n                            className=\"delete-chip-button\"\n                            data-index={index}\n                            onClick={(e) => deleteUser(e)}\n                        >\n                            ✕\n                        </div>\n                    </div>\n                );\n            })} */}\n        </>\n    );\n};\n\nexport default SearchUser;\n","import React, { useContext, useRef, useState } from 'react';\nimport Button from '../components/button/Button';\nimport { createChannelAPI } from '../api/API';\nimport axios from 'axios';\nimport Toast from '../components/toast/Toast';\nimport './newchannel.css';\nimport { UserContext } from '../context/UserContext';\nimport SearchUser from '../newchannel/SearchUser';\nimport Pic from '../components/pic/Pic';\n\nconst NewChannel = () => {\n    const {\n        currentHeaders,\n        setShowModal,\n        userIds,\n        addUsers,\n        setAddUsers,\n        setUserIds,\n    } = useContext(UserContext);\n\n    const channelNameRef = useRef();\n    // const userInputRef = useRef();\n\n    //Toast\n    const [message, setMessage] = useState();\n    const [showToast, setShowToast] = useState(false);\n\n    //Error Message\n    const [showError, setShowError] = useState(false);\n\n    const onCreateChannel = () => {\n        // if (channelNameRef.current.value.length > 15) {\n        //     setMessage('Channel Name too long');\n        //     setShowError(true);\n        //     setShowToast(false);\n        //     setTimeout(() => {\n        //         setShowError(false);\n        //     }, 3000);\n        //     channelNameRef.current.focus();\n        // } else if (channelNameRef.current.value.length < 3) {\n        //     setMessage('Channel Name too short');\n        //     setShowError(true);\n        //     setTimeout(() => {\n        //         setShowError(false);\n        //     }, 3000);\n        //     channelNameRef.current.focus();\n        // } else {\n        const data = {\n            name: channelNameRef.current.value,\n            user_ids: userIds,\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n        };\n        createChannelAPI(data)\n            .then((res) => {\n                if (res.data.errors) {\n                    setMessage(res.data.errors[0]);\n                    setShowToast(true);\n                    setTimeout(() => {\n                        setShowToast(false);\n                    }, 3000);\n                } else {\n                    setMessage('Channel Created');\n                    setShowToast(true);\n                    setTimeout(() => {\n                        setShowToast(false);\n                        setShowModal(false);\n                    }, 1500);\n                    userIds.splice(0, userIds.length);\n                    addUsers.splice(0, addUsers.length);\n                    console.log(res);\n                }\n            })\n            .catch((err) => {\n                console.log('error', err);\n            });\n    };\n    const newFunction = () => {\n        setAddUsers([]);\n        setUserIds([]);\n        setShowModal(false);\n    };\n\n    const updateIndex = (newList, newIdsList) => {\n        setAddUsers(newList);\n        setUserIds(newIdsList);\n    };\n\n    const deleteUser = (e) => {\n        let temp_arr = [...addUsers];\n        temp_arr.splice(e.target.dataset.index, 1);\n\n        let temp_arr2 = [...userIds];\n        temp_arr2.splice(e.target.dataset.index, 1);\n        updateIndex(temp_arr, temp_arr2);\n        console.log(temp_arr);\n        console.log(temp_arr2);\n    };\n\n    return (\n        <div className=\"channel-modal-container\">\n            <form className=\"channel-modal\">\n                <div className=\"modal-upperhalf\">\n                    <div className=\"modal-title\">\n                        <span\n                            className=\"close-button\"\n                            onClick={() => newFunction()}\n                        >\n                            ✕\n                        </span>\n                        <h1 className=\"sidebar-title\">Create a channel</h1>\n                    </div>\n                    <div className=\"newchannel-inputs-container\">\n                        <label className=\"input-container\">\n                            <span>Channel Name</span>\n\n                            <input\n                                type=\"text\"\n                                min=\"3\"\n                                max=\"15\"\n                                ref={channelNameRef}\n                            ></input>\n                        </label>\n                        {/* <label className='input-container'>\n                    <span>Input user IDs</span>\n                    {<input type='text' ref={userInputRef}></input>}\n                </label> */}\n                        {<SearchUser />}\n                    </div>\n                </div>\n                <span className=\"newchannel-chips-container-label\">\n                    Users to be added to the channel\n                </span>\n                <div className=\"newchannel-chips-container\">\n                    {addUsers.map((val, index) => {\n                        return (\n                            <div className=\"select-chip-container\" key={index}>\n                                <Pic\n                                    id={val.id}\n                                    name={val.email}\n                                    isChip={true}\n                                />\n                                <span>{val.email}</span>\n                                <div\n                                    className=\"delete-chip-button\"\n                                    data-index={index}\n                                    onClick={(e) => deleteUser(e)}\n                                >\n                                    ✕\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n\n                <Button\n                    className=\"button\"\n                    type=\"submit\"\n                    text=\"Create Channel\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        onCreateChannel();\n                    }}\n                />\n            </form>\n            {showToast || showError ? (\n                <Toast className=\"toast-message\" text={message} />\n            ) : (\n                <></>\n            )}\n        </div>\n    );\n};\n\nexport default NewChannel;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport './search.css';\n\nconst Search = ({ placeholder, type }) => {\n    const { channelList, allUsers, handleSetLoadData, setShowContent } =\n        useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n        if (type === 'channel') {\n            const searchFilter = channelList.data.data.filter((channel) => {\n                return channel.name\n                    .toLowerCase()\n                    .includes(searchInput.toLowerCase());\n            });\n\n            if (searchInput === '') {\n                setSearchList([]);\n            } else {\n                setSearchList(searchFilter);\n            }\n        } else if (type === 'user') {\n            const searchFilter = allUsers.data.data.filter((user) => {\n                return user.email\n                    .toLowerCase()\n                    .includes(searchInput.toLowerCase());\n            });\n\n            if (searchInput === '') {\n                setSearchList([]);\n            } else {\n                setSearchList(searchFilter);\n            }\n        }\n    };\n\n    return (\n        <div className=\"search-container\">\n            <div className=\"search-input-container\">\n                <input\n                    type=\"text\"\n                    placeholder={placeholder}\n                    onChange={handleSearchList}\n                />\n            </div>\n            {searchList.length != 0 && (\n                <div className=\"search-results\">\n                    {type === 'channel' ? (\n                        <>\n                            {searchList.map((channel, index) => (\n                                <NavLink\n                                    className=\"search-item\"\n                                    to={`/channel/${channel.id}`}\n                                    key={index}\n                                    onClick={() => {\n                                        handleSetLoadData();\n                                        setShowContent(true);\n                                    }}\n                                >\n                                    <Pic\n                                        id={channel.id}\n                                        name={channel.name}\n                                        isChannel={true}\n                                    />\n                                    <span> {channel.name}</span>\n                                </NavLink>\n                            ))}\n                        </>\n                    ) : (\n                        <>\n                            {searchList.slice(0, 15).map((user, index) => (\n                                <NavLink\n                                    className=\"search-item\"\n                                    to={`/user/${user.id}`}\n                                    key={index}\n                                    onClick={() => {\n                                        handleSetLoadData();\n                                        setShowContent(true);\n                                    }}\n                                >\n                                    <Pic\n                                        id={user.id}\n                                        name={user.email}\n                                        isChannel={false}\n                                    />\n                                    <span> {user.email} </span>\n                                </NavLink>\n                            ))}\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Search;\n","import './sidebar.css';\nimport Button from '../button/Button';\nimport React, { useContext, useState } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport ChannelList from '../channel/ChannelList';\nimport ContactList from '../contact/ContactList';\nimport { NavLink } from 'react-router-dom';\nimport NewChannel from '../../newchannel/NewChannel';\nimport { getMessagesAPI } from '../../api/API';\nimport Search from '../search/Search';\n\nconst Sidebar = () => {\n    // console.log('sidebar', currentHeaders);\n    // console.log('sidebar', allUsers);\n    // console.log('sidebar', contactList);\n    // console.log('sidebar', channelList);\n\n    const {\n        sidebarMode,\n        logoutFunction,\n        currentUser,\n        setShowModal,\n        channelList,\n        allUsers,\n        currentHeaders,\n        setShowContent,\n    } = useContext(UserContext);\n\n    // const [showModal, setShowModal] = useState(false);\n\n    if (sidebarMode === 'dm') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Direct messages</h1>\n                <NavLink\n                    to=\"/new-message\"\n                    className=\"button\"\n                    onClick={() => setShowContent(true)}\n                >\n                    New message\n                </NavLink>\n                <ContactList />\n            </div>\n        );\n    } else if (sidebarMode === 'channel') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Channels</h1>\n\n                <Button\n                    className=\"button\"\n                    text=\"Add channel\"\n                    onClick={() => setShowModal(true)}\n                />\n\n                <ChannelList />\n            </div>\n        );\n    } else if (sidebarMode === 'search') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">Search</h1>\n                <Search placeholder={'Search for a user'} type=\"user\" />\n            </div>\n        );\n    } else if (sidebarMode === 'user') {\n        return (\n            <div className=\"sidebar\">\n                <h1 className=\"sidebar-title\">User</h1>\n                <div className=\"user-container\">\n                    <Pic id={currentUser.id} name={currentUser.email} />\n                    <span className=\"user-email\">{currentUser.email}</span>\n                </div>\n                <Button\n                    onClick={logoutFunction}\n                    text=\"Logout\"\n                    className=\"button\"\n                />\n            </div>\n        );\n    }\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport Pic from '../components/pic/Pic';\nimport './messages.css';\n\nconst ChatBubble = ({ keyNum, className, id, name, message, time, type }) => {\n    const date = new Date(time);\n\n    const formattedTime = date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true,\n    });\n\n    const formattedDate = date.toLocaleDateString('en-US');\n\n    return (\n        <div className={className} key={keyNum}>\n            <div className=\"pic-message-container\">\n                <Pic id={id} name={name} />\n                <span className={`message-bubble-${type}`}>{message}</span>\n            </div>\n\n            <span className={`message-${type}-name`}>{name}</span>\n            {/* <span className=\"message-time\">\n                {formattedDate} {formattedTime}\n            </span> */}\n        </div>\n    );\n};\n\nexport default ChatBubble;\n","import React from 'react';\nimport { useContext } from 'react';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\n\nconst ChannelInfoToggle = ({ id, channelMembers }) => {\n    const { showChatInfo, setShowChatInfo, handleSetShowChatInfo } =\n        useContext(UserContext);\n\n    return (\n        <div\n            className=\"message-sidebar-toggle\"\n            onClick={() => {\n                handleSetShowChatInfo();\n                console.log(showChatInfo);\n            }}\n        >\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n            >\n                <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                />\n            </svg>\n        </div>\n    );\n};\n\nexport default ChannelInfoToggle;\n","import React, { useContext, useEffect, useState } from 'react';\nimport Button from '../components/button/Button';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChannelInfoToggle from './ChannelInfoToggle';\n\nconst ChatHeader = ({ type, id, messages, channelMembers }) => {\n    const { channelList, allUsers, loadData, setShowContent } =\n        useContext(UserContext);\n\n    const [chatInfo, setChatInfo] = useState();\n\n    useEffect(() => {\n        if (type === 'channel') {\n            channelList.data.data.map((channel) => {\n                if (channel.id === parseInt(id)) {\n                    setChatInfo({\n                        id: channel.id,\n                        name: channel.name,\n                        isChannel: true,\n                    });\n                }\n            });\n        } else if (type === 'user') {\n            allUsers.data.data.map((user) => {\n                if (user.id === parseInt(id)) {\n                    setChatInfo({\n                        id: user.id,\n                        name: user.email,\n                        isChannel: false,\n                    });\n                }\n            });\n        }\n    }, [loadData]);\n\n    return (\n        <>\n            {chatInfo ? (\n                <div className=\"chat-header\">\n                    <button\n                        className={'back-button'}\n                        onClick={() => setShowContent(false)}\n                    >\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"h-6 w-6\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                        >\n                            <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M15 19l-7-7 7-7\"\n                            />\n                        </svg>\n                    </button>\n                    <div className=\"header-name\">\n                        {!chatInfo.isChannel ? (\n                            <Pic\n                                id={chatInfo.id}\n                                name={chatInfo.name}\n                                isChannel={chatInfo.isChannel}\n                            />\n                        ) : (\n                            ''\n                        )}\n                        <h1\n                            className={\n                                !chatInfo.isChannel\n                                    ? 'chat-name chat-name-user'\n                                    : 'chat-name '\n                            }\n                        >\n                            {chatInfo.name}\n                        </h1>\n                    </div>\n\n                    <ChannelInfoToggle\n                        id={chatInfo.id}\n                        channelMembers={channelMembers}\n                    />\n                </div>\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ChatHeader;\n","import React, { useContext, useRef, useState } from 'react';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { sendMessageAPI } from '../api/API';\nimport Button from '../components/button/Button';\nimport { UserContext } from '../context/UserContext';\n\nconst MessageInput = ({ type, id, newMsg, setNewMessageUser }) => {\n    const { currentHeaders, handleSetLoadData } = useContext(UserContext);\n\n    let messageInputRef = useRef(null);\n    let history = useHistory();\n\n    const sendMessage = () => {\n        if (\n            (messageInputRef.current.value !== null ||\n                messageInputRef.current.value !== '') &&\n            id !== null\n        ) {\n            let sendMessageRequest = {\n                url: 'messages',\n                'access-token': currentHeaders['access-token'],\n                client: currentHeaders.client,\n                expiry: currentHeaders.expiry,\n                uid: currentHeaders.uid,\n                receiver_id: parseInt(id),\n                receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n                message: messageInputRef.current.value,\n            };\n\n            sendMessageAPI(sendMessageRequest)\n                .then((res) => {\n                    console.log('send message ', res);\n                    handleSetLoadData();\n                    messageInputRef.current.value = '';\n                })\n                .catch((err) => console.log(err));\n\n            if (\n                (messageInputRef.current.value !== null ||\n                    messageInputRef.current.value !== '') &&\n                newMsg &&\n                id !== null\n            ) {\n                history.push(`/user/${id}`);\n                setNewMessageUser();\n            }\n        }\n    };\n\n    return (\n        <form\n            className=\"message-input-container\"\n            onSubmit={(e) => {\n                e.preventDefault();\n                sendMessage();\n            }}\n        >\n            <label className=\"message-input\">\n                <input\n                    type=\"text\"\n                    name=\"message-input\"\n                    id=\"message-input\"\n                    placeholder=\"Type your message here...\"\n                    ref={messageInputRef}\n                />\n            </label>\n            <button type=\"submit\" className=\"send-button\">\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-6 w-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                >\n                    <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={1}\n                        d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                    />\n                </svg>\n            </button>\n        </form>\n    );\n};\n\nexport default MessageInput;\n","export default __webpack_public_path__ + \"static/media/newmessage.b249c0dd.svg\";","import React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { UserContext } from '../../context/UserContext';\nimport Pic from '../pic/Pic';\nimport './search.css';\n\nconst NewMsgSearch = ({ setNewMessageUser }) => {\n    const { allUsers, handleSetLoadData } = useContext(UserContext);\n\n    const [searchList, setSearchList] = useState([]);\n\n    const handleSearchList = (e) => {\n        const searchInput = e.target.value;\n\n        const searchFilter = allUsers.data.data.filter((user) => {\n            return user.email.toLowerCase().includes(searchInput.toLowerCase());\n        });\n\n        if (searchInput === '') {\n            setSearchList([]);\n        } else {\n            setSearchList(searchFilter);\n        }\n    };\n\n    return (\n        <>\n            <div className=\"newmsg-search-container\">\n                <span>To: </span>\n                <div className=\"newmsg-search-input-container\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"someone@example.com\"\n                        onChange={handleSearchList}\n                    />\n                </div>\n            </div>\n            {searchList.length != 0 && (\n                <div className=\"newmsg-search-results\">\n                    {searchList.slice(0, 15).map((user, index) => (\n                        <div\n                            className=\"newmsg-search-item\"\n                            key={index}\n                            onClick={() => {\n                                handleSetLoadData();\n                                setNewMessageUser(user);\n                            }}\n                        >\n                            <Pic\n                                id={user.id}\n                                name={user.email}\n                                isChannel={false}\n                            />\n                            <span>{user.email}</span>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default NewMsgSearch;\n","import React, { useContext } from 'react';\nimport { useParams } from 'react-router';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { getMessagesAPI } from '../api/API';\nimport Loading from '../components/loading/Loading';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChatBubble from '../messages/ChatBubble';\nimport ChatHeader from '../messages/ChatHeader';\nimport Newmessage from '../components/newmessage.svg';\nimport MessageInput from '../messages/MessageInput';\nimport Search from '../components/search/Search';\nimport NewMsgSearch from '../components/search/NewMsgSearch';\nimport './newmessages.css';\n\nconst NewMessage = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        channelList,\n        allUsers,\n        loadData,\n        showContent,\n        setShowContent,\n    } = useContext(UserContext);\n\n    /* const { type, id } = useParams(); */\n\n    const [newMessageUser, setNewMessageUser] = useState();\n\n    // const [chatInfo, setChatInfo] = useState();\n\n    // const getMessages = () => {\n    //     let messageRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         user_id: parseInt(id),\n    //         receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n    //     };\n\n    //     console.log(messageRequest);\n    //     getMessagesAPI(messageRequest).then((res) => {\n    //         console.log(res);\n    //         setMessages(res);\n    //     });\n    // };\n\n    return (\n        <div\n            className={\n                showContent\n                    ? 'main-content'\n                    : 'main-content main-content-closed'\n            }\n        >\n            <div className=\"new-messages-section\">\n                <div className=\"new-messages-header\">\n                    <div className=\"chat-header\">\n                        <button\n                            className={'back-button'}\n                            onClick={() => setShowContent(false)}\n                        >\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                className=\"h-6 w-6\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                            >\n                                <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M15 19l-7-7 7-7\"\n                                />\n                            </svg>\n                        </button>\n                        <h1 className=\"chat-name\">New message</h1>\n                    </div>\n                    {!newMessageUser ? (\n                        <NewMsgSearch setNewMessageUser={setNewMessageUser} />\n                    ) : (\n                        <div className=\"newmsg-search-container\">\n                            <span>To: </span>\n                            <div className=\"chip-container\">\n                                <Pic\n                                    id={newMessageUser.id}\n                                    name={newMessageUser.email}\n                                    isChip={true}\n                                />\n                                <span>{newMessageUser.email}</span>\n                                <div\n                                    className=\"delete-chip-button\"\n                                    onClick={() => setNewMessageUser()}\n                                >\n                                    ✕\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {/* \n            <div className=\"message-flex\">\n                <div className=\"messages-container\"></div>\n            </div> */}\n\n                <MessageInput\n                    type=\"User\"\n                    id={newMessageUser ? newMessageUser.id : null}\n                    newMsg={true}\n                    setNewMessageUser={setNewMessageUser}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NewMessage;\n","export default __webpack_public_path__ + \"static/media/nocontent.ebe2c5bc.svg\";","import React, { useRef, useEffect } from 'react';\n\nconst ScrollDown = () => {\n    const elementRef = useRef();\n\n    useEffect(() => {\n        elementRef.current.scrollIntoView();\n    });\n\n    return <div ref={elementRef}></div>;\n};\n\nexport default ScrollDown;\n","import React, { useEffect, useState } from 'react';\nimport { useContext } from 'react';\nimport { useParams } from 'react-router';\nimport { getListsAPI } from '../api/API';\nimport Button from '../components/button/Button';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChannelInfoToggle from './ChannelInfoToggle';\nimport ChatHeader from './ChatHeader';\n\nconst MessageSidebar = () => {\n    const {\n        allUsers,\n        currentHeaders,\n        handleSetShowChatInfo,\n        showChatInfo,\n        chatInfo,\n        loadData,\n        channelList,\n        chatName,\n    } = useContext(UserContext);\n\n    const [channelMembers, setChannelMembers] = useState();\n\n    /* const { type, id } = useParams(); */\n\n    // const [chatName, setChatName] = useState();\n\n    // useEffect(() => {\n    //     if (chatInfo.type === 'channel') {\n    //         channelList.data.data.map((channel) => {\n    //             if (channel.id === parseInt(chatInfo.id)) {\n    //                 setChatName({\n    //                     id: channel.id,\n    //                     name: channel.name,\n    //                     isChannel: true,\n    //                 });\n    //             }\n    //         });\n    //     } else if (chatInfo.type === 'user') {\n    //         allUsers.data.data.map((user) => {\n    //             if (user.id === parseInt(chatInfo.id)) {\n    //                 setChatName({\n    //                     id: user.id,\n    //                     name: user.email,\n    //                     isChannel: false,\n    //                 });\n    //             }\n    //         });\n    //     }\n    // }, [loadData]);\n\n    const getMemberIcons = () => {\n        let getMemberRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: `channels/${chatInfo.id}`,\n        };\n    };\n\n    //Make a function that gets all chat info\n    // let channelInfoRequest = {\n    //     url: `channels/${id}`,\n    //     'access-token': currentHeaders['access-token'],\n    //     client: currentHeaders.client,\n    //     expiry: currentHeaders.expiry,\n    //     uid: currentHeaders.uid,\n    // };\n\n    // getListsAPI(channelInfoRequest).then((res) => {\n    //     console.log('channel info response', res);\n    //     setChannelMembers(res.data?.data?.channel_members);\n    // });\n\n    return (\n        <div\n            className={\n                showChatInfo\n                    ? 'message-sidebar'\n                    : 'message-sidebar message-sidebar-closed'\n            }\n        >\n            <div className=\"modal-title\">\n                <span\n                    className=\"close-button\"\n                    onClick={() => handleSetShowChatInfo()}\n                >\n                    ✕\n                </span>\n                <h1>Test component</h1>\n                {chatName && (\n                    <Pic\n                        id={chatName.id}\n                        name={chatName?.name || 'none'}\n                        isChannel={chatName.isChannel}\n                    />\n                )}\n                <Button text={'Invite user'} className=\"button\" />\n            </div>\n        </div>\n    );\n};\n\nexport default MessageSidebar;\n","import React, { useContext, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { getMessagesAPI, getListsAPI } from '../api/API';\nimport Loading from '../components/loading/Loading';\nimport Pic from '../components/pic/Pic';\nimport { UserContext } from '../context/UserContext';\nimport ChatBubble from './ChatBubble';\nimport ChatHeader from './ChatHeader';\nimport Nocontent from '../components/nocontent.svg';\nimport MessageInput from './MessageInput';\nimport ScrollDown from '../messages/ScrollDown';\nimport MessageSidebar from './MessageSidebar';\n\nconst Messages = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        channelList,\n        allUsers,\n        loadData,\n        showContent,\n        messages,\n        setMessages,\n        showChatInfo,\n        setChatInfo,\n        setChatName,\n    } = useContext(UserContext);\n\n    const { type, id } = useParams();\n\n    // const [messages, setMessages] = useState();\n    const [channelMembers, setChannelMembers] = useState();\n\n    // const [chatInfo, setChatInfo] = useState();\n\n    const sendMessageRef = useRef();\n    const endMessageRef = useRef(null);\n    const elementRef = useRef();\n\n    const getMessages = () => {\n        let messageRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            user_id: parseInt(id),\n            receiver_class: type.charAt(0).toUpperCase() + type.slice(1),\n        };\n\n        /* setChatInfo({\n            id: id,\n            type: type,\n        }); */\n\n        console.log('message request', messageRequest);\n        getMessagesAPI(messageRequest).then((res) => {\n            console.log('message request response', res);\n            setMessages(res);\n        });\n\n        // if (type === 'channel') {\n        //     let channelInfoRequest = {\n        //         url: `channels/${id}`,\n        //         'access-token': currentHeaders['access-token'],\n        //         client: currentHeaders.client,\n        //         expiry: currentHeaders.expiry,\n        //         uid: currentHeaders.uid,\n        //     };\n\n        //     getListsAPI(channelInfoRequest).then((res) => {\n        //         console.log('channel info response', res);\n        //         setChannelMembers(res.data?.data?.channel_members);\n        //     });\n        // }\n    };\n\n    const getChatName = () => {\n        if (type === 'channel') {\n            channelList.data.data.map((channel) => {\n                if (channel.id === parseInt(id)) {\n                    setChatName({\n                        id: channel.id,\n                        name: channel.name,\n                        isChannel: true,\n                    });\n                }\n            });\n        } else if (type === 'user') {\n            allUsers.data.data.map((user) => {\n                if (user.id === parseInt(id)) {\n                    setChatName({\n                        id: user.id,\n                        name: user.email,\n                        isChannel: false,\n                    });\n                }\n            });\n        }\n    };\n\n    // const getChatInfo = () => {\n    //     if (type === 'channel') {\n    //         for (let i = 0; i < channelList.length; i++) {\n    //             if (parseInt(id) === channelList.data.data[i].id) {\n    //                 setChatInfo({\n    //                     id: channelList.data.data[i].id,\n    //                     name: channelList.data.data[i].name,\n    //                     isChannel: true,\n    //                 });\n    //                 console.log('get ' + chatInfo);\n    //             }\n    //         }\n    //         console.log('hindi kinuha channel' + chatInfo);\n    //     } else if (type === 'user') {\n    //         for (let i = 0; i < allUsers.length; i++) {\n    //             if (parseInt(id) === allUsers.data.data[i].id) {\n    //                 setChatInfo({\n    //                     id: allUsers.data.data[i].id,\n    //                     name: allUsers.data.data[i].email,\n    //                     isChannel: false,\n    //                 });\n    //                 console.log('get ' + chatInfo);\n    //             }\n    //         }\n    //         console.log(allUsers);\n    //         console.log('hindi kinuha users' + chatInfo);\n    //     }\n    // };\n\n    // getChatInfo();\n\n    useEffect(() => {\n        getMessages();\n        getChatName();\n        // getChatInfo();\n    }, [loadData /* , messages, currentHeaders */]);\n\n    if (!messages) {\n        return <Loading />;\n    } else {\n        return (\n            <div\n                className={\n                    showContent\n                        ? 'main-content'\n                        : 'main-content main-content-closed'\n                }\n            >\n                <div className='messages-section'>\n                    {messages ? (\n                        <>\n                            <ChatHeader\n                                type={type}\n                                id={id}\n                                messages={messages}\n                                channelMembers={channelMembers}\n                            />\n                            <div className='messages-content'>\n                                {messages.data?.data.length > 0 ? (\n                                    <div className='message-flex'>\n                                        <div className='messages-container'>\n                                            {messages.data.data.map(\n                                                (message, index) => {\n                                                    return message.sender.id !==\n                                                        currentUser.id ? (\n                                                        <ChatBubble\n                                                            keyNum={index}\n                                                            id={\n                                                                message.sender\n                                                                    .id\n                                                            }\n                                                            name={\n                                                                message.sender\n                                                                    .email\n                                                            }\n                                                            message={\n                                                                message.body\n                                                            }\n                                                            time={\n                                                                message.created_at\n                                                            }\n                                                            className='incoming-messages'\n                                                            type='sender'\n                                                        />\n                                                    ) : (\n                                                        <ChatBubble\n                                                            keyNum={index}\n                                                            id={\n                                                                message.sender\n                                                                    .id\n                                                            }\n                                                            name={\n                                                                message.sender\n                                                                    .email\n                                                            }\n                                                            message={\n                                                                message.body\n                                                            }\n                                                            time={\n                                                                message.created_at\n                                                            }\n                                                            className='outgoing-messages'\n                                                            type='user'\n                                                        />\n                                                    );\n                                                }\n                                            )}\n                                            {/* <div ref={elementRef}></div> */}\n                                            <ScrollDown />\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div className='message-container-empty'>\n                                        <img src={Nocontent} />\n                                        <span className='empty-title'>\n                                            Be the first one to say hi!\n                                        </span>\n                                        <p>Send a message!</p>\n                                    </div>\n                                )}\n                            </div>\n                            <MessageInput type={type} id={id} />\n                        </>\n                    ) : (\n                        ''\n                    )}\n                </div>\n                {/* <div\n                    className={\n                        showChatInfo\n                            ? 'message-sidebar'\n                            : 'message-sidebar message-sidebar-closed'\n                    }\n                >\n                    <ChatHeader type={type} id={id} messages={messages} />\n                    <MessageSidebar />\n                    <h1>channel sidebar</h1>\n                </div> */}\n            </div>\n        );\n    }\n};\n\nexport default Messages;\n","export default __webpack_public_path__ + \"static/media/selectmessage.d806d655.svg\";","import React, { useState, useEffect, useContext } from 'react';\nimport { getListsAPI } from './api/API';\nimport Button from './components/button/Button';\nimport ChannelList from './components/channel/ChannelList';\nimport { useParams } from 'react-router';\nimport Navbar from './components/navbar/Navbar';\nimport Sidebar from './components/sidebar/Sidebar';\nimport Loading from './components/loading/Loading';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NewMessage from './newmessage/NewMessage';\nimport Messages from './messages/Messages';\nimport { UserContext } from './context/UserContext';\nimport NewChannel from './newchannel/NewChannel';\nimport Selectmessage from './components/selectmessage.svg';\nimport MessageSidebar from './messages/MessageSidebar';\nimport ChatHeader from './messages/ChatHeader';\n\nconst Main = () => {\n    const {\n        currentHeaders,\n        currentUser,\n        setChannelList,\n        setAllUsers,\n        setContactList,\n        allUsers,\n        channelList,\n        contactList,\n        showModal,\n        setShowModal,\n        loadData,\n        removeEmail,\n        showContent,\n        showChatInfo,\n    } = useContext(UserContext);\n\n    const runAPI = () => {\n        let channelListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'channels',\n        };\n\n        let allUsersListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'users',\n        };\n\n        let contactListRequest = {\n            'access-token': currentHeaders['access-token'],\n            client: currentHeaders.client,\n            expiry: currentHeaders.expiry,\n            uid: currentHeaders.uid,\n            url: 'users/recent',\n        };\n\n        getListsAPI(channelListRequest)\n            .then((res) => {\n                console.log('channels r', res);\n                console.log('channels', channelList);\n                setChannelList(res);\n            })\n            .catch((err) => console.log(err));\n\n        getListsAPI(allUsersListRequest)\n            .then((res) => {\n                console.log('users r', res);\n                console.log('users', allUsers);\n                setAllUsers(res);\n            })\n            .catch((err) => console.log(err));\n\n        getListsAPI(contactListRequest)\n            .then((res) => {\n                console.log('contact r', res);\n                console.log('contact', contactList);\n                setContactList(res);\n            })\n            .catch((err) => console.log(err));\n    };\n\n    useEffect(() => {\n        runAPI();\n    }, [loadData]);\n\n    // useState(() => {\n    //     let channelListRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: 'channels',\n    //     };\n\n    //     let allUsersListRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: 'users',\n    //     };\n\n    //     let contactListRequest = {\n    //         'access-token': currentHeaders['access-token'],\n    //         client: currentHeaders.client,\n    //         expiry: currentHeaders.expiry,\n    //         uid: currentHeaders.uid,\n    //         url: 'users/recent/',\n    //     };\n\n    //     console.log('channelsReq', channelListRequest);\n    //     console.log('allusr', allUsersListRequest);\n    //     console.log('contr', contactListRequest);\n\n    //     getListsAPI(channelListRequest)\n    //         .then((res) => {\n    //             console.log('channels r', res);\n    //             console.log('channels', channelList);\n    //             setChannelList(res.data.data);\n    //         })\n    //         .catch((err) => console.log(err));\n\n    //     getListsAPI(allUsersListRequest)\n    //         .then((res) => {\n    //             console.log('users r', channelList);\n    //             console.log('users', allUsers);\n    //             console.log('channels r2', res);\n    //             console.log('channels2', channelList);\n    //             setAllUsers(res.data.data);\n    //         })\n    //         .catch((err) => console.log(err));\n\n    //     getListsAPI(contactListRequest)\n    //         .then((res) => {\n    //             console.log('contact r', channelList);\n    //             console.log('contact', contactList);\n    //             console.log('channels r3', res);\n    //             console.log('channels 3', channelList);\n    //             setContactList(res.data.data);\n    //         })\n    //         .catch((err) => console.log(err));\n    // }, [currentHeaders, channelList, allUsers, contactList]);\n\n    // //Logout function\n    // const logoutFunction = () => {\n    //     localStorage.setItem('User', null);\n    //     setUser(null);\n    //     setHeaders(null);\n    //     setIsLoggedIn(false);\n    //     setLoginMessage('');\n    //     setSidebarMode('dm');\n    // };\n\n    if (!channelList.data || !allUsers || !contactList) {\n        // setIsLoading(false);\n        return <Loading />;\n    }\n\n    // if (isLoading) {\n    // return <Loading />;\n    // }\n    else {\n        return (\n            <div className=\"app-container\">\n                {showModal ? (\n                    <NewChannel\n                        showModal={showModal}\n                        setShowModal={setShowModal}\n                    />\n                ) : null}\n                {/* <Router> */}\n                <div\n                    className={\n                        showContent\n                            ? 'navigation-bars-container navigation-bars-container-closed'\n                            : 'navigation-bars-container '\n                    }\n                >\n                    <Navbar />\n                    <Sidebar />\n                </div>\n                <Switch>\n                    <Route path=\"/\" exact>\n                        <div\n                            className={\n                                !showContent\n                                    ? 'main-content main-content-closed'\n                                    : showChatInfo\n                                    ? 'main-content main-content-closed'\n                                    : 'main-content'\n                            }\n                        >\n                            <div className=\"message-container-empty\">\n                                <img src={Selectmessage} />\n                                <span className=\"empty-title\">\n                                    Welcome back,{' '}\n                                    {removeEmail(currentUser.email)}!\n                                </span>\n                                <p>\n                                    Send a message or choose a contact to get\n                                    started.\n                                </p>\n                            </div>\n                        </div>\n                    </Route>\n                    <Route path=\"/:type/:id\">\n                        <Messages />\n                    </Route>\n                    <Route exact path=\"/new-message\">\n                        <NewMessage />\n                    </Route>\n                </Switch>\n\n                <MessageSidebar />\n                {/* </Router> */}\n            </div>\n        );\n    }\n};\n\nexport default Main;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from './context/UserContext';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const { isLoggedIn } = useContext(UserContext);\n\n    return (\n        // Show the component only when the user is logged in\n        // Otherwise, redirect the user to /signin page\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn ? <Component {...props} /> : <Redirect to=\"/login\" />\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from './context/UserContext';\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n    const { isLoggedIn } = useContext(UserContext);\n\n    return (\n        // restricted = false meaning public route\n        // restricted = true meaning restricted route\n\n        <Route\n            {...rest}\n            render={(props) =>\n                isLoggedIn && restricted ? (\n                    <Redirect to=\"/\" exact />\n                ) : (\n                    <Component {...props} />\n                )\n            }\n        />\n    );\n};\n\nexport default PublicRoute;\n","import './App.css';\nimport './login/login.css';\nimport Login from './login/Login';\nimport Register from './login/Register';\nimport { useState, useEffect, useContext } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect,\n} from 'react-router-dom';\nimport { userSessionAPI } from './api/API';\nimport Loginhero from './login/Loginhero';\nimport Main from './Main';\nimport { UserProvider, UserContext } from './context/UserContext';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\n\nfunction App() {\n    const { setUser, setHeaders, setLoginMessage, setIsLoggedIn } =\n        useContext(UserContext);\n\n    // // Logged In\n    // useEffect(() => {\n    //     const localStorageLoginUser = JSON.parse(localStorage.getItem('User'));\n\n    //     if (localStorageLoginUser) {\n    //         setLoginMessage('Logging you in...');\n\n    //         userSessionAPI(localStorageLoginUser)\n    //             .then((res) => {\n    //                 setHeaders(res.headers);\n    //                 setUser(res.data.data);\n    //                 setLoginMessage('Logged in!');\n    //                 setIsLoggedIn(true);\n    //             })\n    //             .catch((err) => {\n    //                 if (err.response) {\n    //                     // Request made and server responded\n    //                     console.log(err.response.data);\n    //                     console.log(err.response.status);\n    //                     console.log(err.response.headers);\n    //                     setHeaders('');\n    //                     setUser('');\n    //                     setLoginMessage(err.response.data.errors[0]);\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                 } else if (err.request) {\n    //                     // The request was made but no response was received\n    //                     console.log(err.request);\n    //                     setLoginMessage('Server error, please try again.');\n    //                     setTimeout(() => {\n    //                         setLoginMessage('');\n    //                     }, 3000);\n    //                 } else {\n    //                     // Something happened in setting up the request that triggered an Error\n    //                     console.log('Error', err.message);\n    //                 }\n    //             });\n    //     }\n    // }, []);\n\n    return (\n        <div className=\"App\">\n            {/* <Router> */}\n            <Switch>\n                <PrivateRoute component={Main} path=\"/\" exact />\n\n                <div className=\"login-main-container\">\n                    <Loginhero />\n\n                    <PublicRoute\n                        component={Login}\n                        restricted={true}\n                        path=\"/login\"\n                        exact\n                    />\n                    <PublicRoute\n                        component={Register}\n                        restricted={true}\n                        path=\"/signup\"\n                        exact\n                    />\n                    <Route render={() => <Redirect to=\"/login\" />} />\n                </div>\n            </Switch>\n            {/* </Router> */}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { UserProvider } from './context/UserContext';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n            <UserProvider>\n                <App />\n            </UserProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}